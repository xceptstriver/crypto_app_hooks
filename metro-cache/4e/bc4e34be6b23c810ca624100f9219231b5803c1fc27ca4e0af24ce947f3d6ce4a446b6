{"dependencies":[{"name":"../common/List","data":{"asyncType":null,"locs":[{"start":{"line":77,"column":40},"end":{"line":77,"column":65}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function isValidNumber(value) {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value && value >= 0;\n  }\n\n  function isValidLocation(loc) {\n    return Boolean(loc) && isValidNumber(loc.offset) && isValidNumber(loc.line) && isValidNumber(loc.column);\n  }\n\n  function createNodeStructureChecker(type, fields) {\n    return function checkNode(node, warn) {\n      if (!node || node.constructor !== Object) {\n        return warn(node, 'Type of node should be an Object');\n      }\n\n      for (var key in node) {\n        var valid = true;\n\n        if (hasOwnProperty.call(node, key) === false) {\n          continue;\n        }\n\n        if (key === 'type') {\n          if (node.type !== type) {\n            warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');\n          }\n        } else if (key === 'loc') {\n          if (node.loc === null) {\n            continue;\n          } else if (node.loc && node.loc.constructor === Object) {\n            if (typeof node.loc.source !== 'string') {\n              key += '.source';\n            } else if (!isValidLocation(node.loc.start)) {\n              key += '.start';\n            } else if (!isValidLocation(node.loc.end)) {\n              key += '.end';\n            } else {\n              continue;\n            }\n          }\n\n          valid = false;\n        } else if (fields.hasOwnProperty(key)) {\n          for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {\n            var fieldType = fields[key][i];\n\n            switch (fieldType) {\n              case String:\n                valid = typeof node[key] === 'string';\n                break;\n\n              case Boolean:\n                valid = typeof node[key] === 'boolean';\n                break;\n\n              case null:\n                valid = node[key] === null;\n                break;\n\n              default:\n                if (typeof fieldType === 'string') {\n                  valid = node[key] && node[key].type === fieldType;\n                } else if (Array.isArray(fieldType)) {\n                  valid = node[key] instanceof _$$_REQUIRE(_dependencyMap[0], \"../common/List\");\n                }\n\n            }\n          }\n        } else {\n          warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');\n        }\n\n        if (!valid) {\n          warn(node, 'Bad value for `' + type + '.' + key + '`');\n        }\n      }\n\n      for (var key in fields) {\n        if (hasOwnProperty.call(fields, key) && hasOwnProperty.call(node, key) === false) {\n          warn(node, 'Field `' + type + '.' + key + '` is missed');\n        }\n      }\n    };\n  }\n\n  function processStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var fields = {\n      type: String,\n      loc: true\n    };\n    var docs = {\n      type: '\"' + name + '\"'\n    };\n\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n\n      var docsTypes = [];\n      var fieldTypes = fields[key] = Array.isArray(structure[key]) ? structure[key].slice() : [structure[key]];\n\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n\n        if (fieldType === String || fieldType === Boolean) {\n          docsTypes.push(fieldType.name);\n        } else if (fieldType === null) {\n          docsTypes.push('null');\n        } else if (typeof fieldType === 'string') {\n          docsTypes.push('<' + fieldType + '>');\n        } else if (Array.isArray(fieldType)) {\n          docsTypes.push('List');\n        } else {\n          throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');\n        }\n      }\n\n      docs[key] = docsTypes.join(' | ');\n    }\n\n    return {\n      docs: docs,\n      check: createNodeStructureChecker(name, fields)\n    };\n  }\n\n  module.exports = {\n    getStructureFromConfig: function getStructureFromConfig(config) {\n      var structure = {};\n\n      if (config.node) {\n        for (var name in config.node) {\n          if (hasOwnProperty.call(config.node, name)) {\n            var nodeType = config.node[name];\n\n            if (nodeType.structure) {\n              structure[name] = processStructure(name, nodeType);\n            } else {\n              throw new Error('Missed `structure` field in `' + name + '` node type definition');\n            }\n          }\n        }\n      }\n\n      return structure;\n    }\n  };\n});","lineCount":152,"map":[[2,0,2,0],[2,6,2,4,"hasOwnProperty"],[2,20,2,18],[2,23,2,21,"Object"],[2,29,2,27],[2,30,2,28,"prototype"],[2,39,2,21],[2,40,2,38,"hasOwnProperty"],[2,54,2,0],[4,0,4,0],[4,11,4,9,"isValidNumber"],[4,24,4,0],[4,25,4,23,"value"],[4,30,4,0],[4,32,4,30],[5,0,6,4],[5,11,7,8],[5,18,7,15,"value"],[5,23,7,8],[5,28,7,25],[5,36,7,8],[5,40,8,8,"isFinite"],[5,48,8,16],[5,49,8,17,"value"],[5,54,8,16],[5,55,7,8],[5,59,9,8,"Math"],[5,63,9,12],[5,64,9,13,"floor"],[5,69,9,8],[5,70,9,19,"value"],[5,75,9,8],[5,81,9,30,"value"],[5,86,7,8],[5,90,10,8,"value"],[5,95,10,13],[5,99,10,17],[5,100,6,4],[6,0,12,1],[8,0,14,0],[8,11,14,9,"isValidLocation"],[8,26,14,0],[8,27,14,25,"loc"],[8,30,14,0],[8,32,14,30],[9,0,15,4],[9,11,16,8,"Boolean"],[9,18,16,15],[9,19,16,16,"loc"],[9,22,16,15],[9,23,16,8],[9,27,17,8,"isValidNumber"],[9,40,17,21],[9,41,17,22,"loc"],[9,44,17,25],[9,45,17,26,"offset"],[9,51,17,21],[9,52,16,8],[9,56,18,8,"isValidNumber"],[9,69,18,21],[9,70,18,22,"loc"],[9,73,18,25],[9,74,18,26,"line"],[9,78,18,21],[9,79,16,8],[9,83,19,8,"isValidNumber"],[9,96,19,21],[9,97,19,22,"loc"],[9,100,19,25],[9,101,19,26,"column"],[9,107,19,21],[9,108,15,4],[10,0,21,1],[12,0,23,0],[12,11,23,9,"createNodeStructureChecker"],[12,37,23,0],[12,38,23,36,"type"],[12,42,23,0],[12,44,23,42,"fields"],[12,50,23,0],[12,52,23,50],[13,0,24,4],[13,11,24,11],[13,20,24,20,"checkNode"],[13,29,24,11],[13,30,24,30,"node"],[13,34,24,11],[13,36,24,36,"warn"],[13,40,24,11],[13,42,24,42],[14,0,25,8],[14,10,25,12],[14,11,25,13,"node"],[14,15,25,12],[14,19,25,21,"node"],[14,23,25,25],[14,24,25,26,"constructor"],[14,35,25,21],[14,40,25,42,"Object"],[14,46,25,8],[14,48,25,50],[15,0,26,12],[15,15,26,19,"warn"],[15,19,26,23],[15,20,26,24,"node"],[15,24,26,23],[15,26,26,30],[15,60,26,23],[15,61,26,12],[16,0,27,9],[18,0,29,8],[18,11,29,13],[18,15,29,17,"key"],[18,18,29,8],[18,22,29,24,"node"],[18,26,29,8],[18,28,29,30],[19,0,30,12],[19,12,30,16,"valid"],[19,17,30,21],[19,20,30,24],[19,24,30,12],[21,0,32,12],[21,12,32,16,"hasOwnProperty"],[21,26,32,30],[21,27,32,31,"call"],[21,31,32,16],[21,32,32,36,"node"],[21,36,32,16],[21,38,32,42,"key"],[21,41,32,16],[21,47,32,51],[21,52,32,12],[21,54,32,58],[22,0,33,16],[23,0,34,13],[25,0,36,12],[25,12,36,16,"key"],[25,15,36,19],[25,20,36,24],[25,26,36,12],[25,28,36,32],[26,0,37,16],[26,14,37,20,"node"],[26,18,37,24],[26,19,37,25,"type"],[26,23,37,20],[26,28,37,34,"type"],[26,32,37,16],[26,34,37,40],[27,0,38,20,"warn"],[27,12,38,20,"warn"],[27,16,38,24],[27,17,38,25,"node"],[27,21,38,24],[27,23,38,31],[27,45,38,53,"node"],[27,49,38,57],[27,50,38,58,"type"],[27,54,38,31],[27,57,38,65],[27,72,38,31],[27,75,38,83,"type"],[27,79,38,31],[27,82,38,90],[27,85,38,24],[27,86,38,20],[28,0,39,17],[29,0,40,13],[29,9,36,12],[29,15,40,19],[29,19,40,23,"key"],[29,22,40,26],[29,27,40,31],[29,32,40,19],[29,34,40,38],[30,0,41,16],[30,14,41,20,"node"],[30,18,41,24],[30,19,41,25,"loc"],[30,22,41,20],[30,27,41,33],[30,31,41,16],[30,33,41,39],[31,0,42,20],[32,0,43,17],[32,11,41,16],[32,17,43,23],[32,21,43,27,"node"],[32,25,43,31],[32,26,43,32,"loc"],[32,29,43,27],[32,33,43,39,"node"],[32,37,43,43],[32,38,43,44,"loc"],[32,41,43,39],[32,42,43,48,"constructor"],[32,53,43,39],[32,58,43,64,"Object"],[32,64,43,23],[32,66,43,72],[33,0,44,20],[33,16,44,24],[33,23,44,31,"node"],[33,27,44,35],[33,28,44,36,"loc"],[33,31,44,31],[33,32,44,40,"source"],[33,38,44,24],[33,43,44,51],[33,51,44,20],[33,53,44,61],[34,0,45,24,"key"],[34,14,45,24,"key"],[34,17,45,27],[34,21,45,31],[34,30,45,24],[35,0,46,21],[35,13,44,20],[35,19,46,27],[35,23,46,31],[35,24,46,32,"isValidLocation"],[35,39,46,47],[35,40,46,48,"node"],[35,44,46,52],[35,45,46,53,"loc"],[35,48,46,48],[35,49,46,57,"start"],[35,54,46,47],[35,55,46,27],[35,57,46,65],[36,0,47,24,"key"],[36,14,47,24,"key"],[36,17,47,27],[36,21,47,31],[36,29,47,24],[37,0,48,21],[37,13,46,27],[37,19,48,27],[37,23,48,31],[37,24,48,32,"isValidLocation"],[37,39,48,47],[37,40,48,48,"node"],[37,44,48,52],[37,45,48,53,"loc"],[37,48,48,48],[37,49,48,57,"end"],[37,52,48,47],[37,53,48,27],[37,55,48,63],[38,0,49,24,"key"],[38,14,49,24,"key"],[38,17,49,27],[38,21,49,31],[38,27,49,24],[39,0,50,21],[39,13,48,27],[39,19,50,27],[40,0,51,24],[41,0,52,21],[42,0,53,17],[44,0,55,16,"valid"],[44,10,55,16,"valid"],[44,15,55,21],[44,18,55,24],[44,23,55,16],[45,0,56,13],[45,9,40,19],[45,15,56,19],[45,19,56,23,"fields"],[45,25,56,29],[45,26,56,30,"hasOwnProperty"],[45,40,56,23],[45,41,56,45,"key"],[45,44,56,23],[45,45,56,19],[45,47,56,51],[46,0,57,16],[46,15,57,21],[46,19,57,25,"i"],[46,20,57,26],[46,23,57,29],[46,24,57,21],[46,26,57,32,"valid"],[46,31,57,37],[46,34,57,40],[46,39,57,16],[46,41,57,47],[46,42,57,48,"valid"],[46,47,57,47],[46,51,57,57,"i"],[46,52,57,58],[46,55,57,61,"fields"],[46,61,57,67],[46,62,57,68,"key"],[46,65,57,67],[46,66,57,61],[46,67,57,73,"length"],[46,73,57,16],[46,75,57,81,"i"],[46,76,57,82],[46,78,57,16],[46,80,57,86],[47,0,58,20],[47,16,58,24,"fieldType"],[47,25,58,33],[47,28,58,36,"fields"],[47,34,58,42],[47,35,58,43,"key"],[47,38,58,42],[47,39,58,36],[47,40,58,48,"i"],[47,41,58,36],[47,42,58,20],[49,0,60,20],[49,20,60,28,"fieldType"],[49,29,60,20],[50,0,61,24],[50,19,61,29,"String"],[50,25,61,24],[51,0,62,28,"valid"],[51,16,62,28,"valid"],[51,21,62,33],[51,24,62,36],[51,31,62,43,"node"],[51,35,62,47],[51,36,62,48,"key"],[51,39,62,47],[51,40,62,36],[51,45,62,57],[51,53,62,28],[52,0,63,28],[54,0,65,24],[54,19,65,29,"Boolean"],[54,26,65,24],[55,0,66,28,"valid"],[55,16,66,28,"valid"],[55,21,66,33],[55,24,66,36],[55,31,66,43,"node"],[55,35,66,47],[55,36,66,48,"key"],[55,39,66,47],[55,40,66,36],[55,45,66,57],[55,54,66,28],[56,0,67,28],[58,0,69,24],[58,19,69,29],[58,23,69,24],[59,0,70,28,"valid"],[59,16,70,28,"valid"],[59,21,70,33],[59,24,70,36,"node"],[59,28,70,40],[59,29,70,41,"key"],[59,32,70,40],[59,33,70,36],[59,38,70,50],[59,42,70,28],[60,0,71,28],[62,0,73,24],[63,0,74,28],[63,20,74,32],[63,27,74,39,"fieldType"],[63,36,74,32],[63,41,74,53],[63,49,74,28],[63,51,74,63],[64,0,75,32,"valid"],[64,18,75,32,"valid"],[64,23,75,37],[64,26,75,40,"node"],[64,30,75,44],[64,31,75,45,"key"],[64,34,75,44],[64,35,75,40],[64,39,75,53,"node"],[64,43,75,57],[64,44,75,58,"key"],[64,47,75,57],[64,48,75,53],[64,49,75,63,"type"],[64,53,75,53],[64,58,75,72,"fieldType"],[64,67,75,32],[65,0,76,29],[65,17,74,28],[65,23,76,35],[65,27,76,39,"Array"],[65,32,76,44],[65,33,76,45,"isArray"],[65,40,76,39],[65,41,76,53,"fieldType"],[65,50,76,39],[65,51,76,35],[65,53,76,65],[66,0,77,32,"valid"],[66,18,77,32,"valid"],[66,23,77,37],[66,26,77,40,"node"],[66,30,77,44],[66,31,77,45,"key"],[66,34,77,44],[66,35,77,40],[66,95,77,32],[67,0,78,29],[69,0,60,20],[70,0,80,17],[71,0,81,13],[71,9,56,19],[71,15,81,19],[72,0,82,16,"warn"],[72,10,82,16,"warn"],[72,14,82,20],[72,15,82,21,"node"],[72,19,82,20],[72,21,82,27],[72,41,82,47,"key"],[72,44,82,27],[72,47,82,53],[72,55,82,27],[72,58,82,64,"type"],[72,62,82,27],[72,65,82,71],[72,77,82,20],[72,78,82,16],[73,0,83,13],[75,0,85,12],[75,12,85,16],[75,13,85,17,"valid"],[75,18,85,12],[75,20,85,24],[76,0,86,16,"warn"],[76,10,86,16,"warn"],[76,14,86,20],[76,15,86,21,"node"],[76,19,86,20],[76,21,86,27],[76,41,86,47,"type"],[76,45,86,27],[76,48,86,54],[76,51,86,27],[76,54,86,60,"key"],[76,57,86,27],[76,60,86,66],[76,63,86,20],[76,64,86,16],[77,0,87,13],[78,0,88,9],[80,0,90,8],[80,11,90,13],[80,15,90,17,"key"],[80,18,90,8],[80,22,90,24,"fields"],[80,28,90,8],[80,30,90,32],[81,0,91,12],[81,12,91,16,"hasOwnProperty"],[81,26,91,30],[81,27,91,31,"call"],[81,31,91,16],[81,32,91,36,"fields"],[81,38,91,16],[81,40,91,44,"key"],[81,43,91,16],[81,48,92,16,"hasOwnProperty"],[81,62,92,30],[81,63,92,31,"call"],[81,67,92,16],[81,68,92,36,"node"],[81,72,92,16],[81,74,92,42,"key"],[81,77,92,16],[81,83,92,51],[81,88,91,12],[81,90,92,58],[82,0,93,16,"warn"],[82,10,93,16,"warn"],[82,14,93,20],[82,15,93,21,"node"],[82,19,93,20],[82,21,93,27],[82,33,93,39,"type"],[82,37,93,27],[82,40,93,46],[82,43,93,27],[82,46,93,52,"key"],[82,49,93,27],[82,52,93,58],[82,65,93,20],[82,66,93,16],[83,0,94,13],[84,0,95,9],[85,0,96,5],[85,5,24,4],[86,0,97,1],[88,0,99,0],[88,11,99,9,"processStructure"],[88,27,99,0],[88,28,99,26,"name"],[88,32,99,0],[88,34,99,32,"nodeType"],[88,42,99,0],[88,44,99,42],[89,0,100,4],[89,8,100,8,"structure"],[89,17,100,17],[89,20,100,20,"nodeType"],[89,28,100,28],[89,29,100,29,"structure"],[89,38,100,4],[90,0,101,4],[90,8,101,8,"fields"],[90,14,101,14],[90,17,101,17],[91,0,102,8,"type"],[91,6,102,8,"type"],[91,10,102,12],[91,12,102,14,"String"],[91,18,101,17],[92,0,103,8,"loc"],[92,6,103,8,"loc"],[92,9,103,11],[92,11,103,13],[93,0,101,17],[93,5,101,4],[94,0,105,4],[94,8,105,8,"docs"],[94,12,105,12],[94,15,105,15],[95,0,106,8,"type"],[95,6,106,8,"type"],[95,10,106,12],[95,12,106,14],[95,18,106,20,"name"],[95,22,106,14],[95,25,106,27],[96,0,105,15],[96,5,105,4],[98,0,109,4],[98,9,109,9],[98,13,109,13,"key"],[98,16,109,4],[98,20,109,20,"structure"],[98,29,109,4],[98,31,109,31],[99,0,110,8],[99,10,110,12,"hasOwnProperty"],[99,24,110,26],[99,25,110,27,"call"],[99,29,110,12],[99,30,110,32,"structure"],[99,39,110,12],[99,41,110,43,"key"],[99,44,110,12],[99,50,110,52],[99,55,110,8],[99,57,110,59],[100,0,111,12],[101,0,112,9],[103,0,114,8],[103,10,114,12,"docsTypes"],[103,19,114,21],[103,22,114,24],[103,24,114,8],[104,0,115,8],[104,10,115,12,"fieldTypes"],[104,20,115,22],[104,23,115,25,"fields"],[104,29,115,31],[104,30,115,32,"key"],[104,33,115,31],[104,34,115,25],[104,37,115,39,"Array"],[104,42,115,44],[104,43,115,45,"isArray"],[104,50,115,39],[104,51,115,53,"structure"],[104,60,115,62],[104,61,115,63,"key"],[104,64,115,62],[104,65,115,39],[104,69,116,14,"structure"],[104,78,116,23],[104,79,116,24,"key"],[104,82,116,23],[104,83,116,14],[104,84,116,29,"slice"],[104,89,116,14],[104,91,115,39],[104,94,117,14],[104,95,117,15,"structure"],[104,104,117,24],[104,105,117,25,"key"],[104,108,117,24],[104,109,117,14],[104,110,115,8],[106,0,119,8],[106,11,119,13],[106,15,119,17,"i"],[106,16,119,18],[106,19,119,21],[106,20,119,8],[106,22,119,24,"i"],[106,23,119,25],[106,26,119,28,"fieldTypes"],[106,36,119,38],[106,37,119,39,"length"],[106,43,119,8],[106,45,119,47,"i"],[106,46,119,48],[106,48,119,8],[106,50,119,52],[107,0,120,12],[107,12,120,16,"fieldType"],[107,21,120,25],[107,24,120,28,"fieldTypes"],[107,34,120,38],[107,35,120,39,"i"],[107,36,120,38],[107,37,120,12],[109,0,121,12],[109,12,121,16,"fieldType"],[109,21,121,25],[109,26,121,30,"String"],[109,32,121,16],[109,36,121,40,"fieldType"],[109,45,121,49],[109,50,121,54,"Boolean"],[109,57,121,12],[109,59,121,63],[110,0,122,16,"docsTypes"],[110,10,122,16,"docsTypes"],[110,19,122,25],[110,20,122,26,"push"],[110,24,122,16],[110,25,122,31,"fieldType"],[110,34,122,40],[110,35,122,41,"name"],[110,39,122,16],[111,0,123,13],[111,9,121,12],[111,15,123,19],[111,19,123,23,"fieldType"],[111,28,123,32],[111,33,123,37],[111,37,123,19],[111,39,123,43],[112,0,124,16,"docsTypes"],[112,10,124,16,"docsTypes"],[112,19,124,25],[112,20,124,26,"push"],[112,24,124,16],[112,25,124,31],[112,31,124,16],[113,0,125,13],[113,9,123,19],[113,15,125,19],[113,19,125,23],[113,26,125,30,"fieldType"],[113,35,125,23],[113,40,125,44],[113,48,125,19],[113,50,125,54],[114,0,126,16,"docsTypes"],[114,10,126,16,"docsTypes"],[114,19,126,25],[114,20,126,26,"push"],[114,24,126,16],[114,25,126,31],[114,31,126,37,"fieldType"],[114,40,126,31],[114,43,126,49],[114,46,126,16],[115,0,127,13],[115,9,125,19],[115,15,127,19],[115,19,127,23,"Array"],[115,24,127,28],[115,25,127,29,"isArray"],[115,32,127,23],[115,33,127,37,"fieldType"],[115,42,127,23],[115,43,127,19],[115,45,127,49],[116,0,128,16,"docsTypes"],[116,10,128,16,"docsTypes"],[116,19,128,25],[116,20,128,26,"push"],[116,24,128,16],[116,25,128,31],[116,31,128,16],[117,0,129,13],[117,9,127,19],[117,15,129,19],[118,0,130,16],[118,16,130,22],[118,20,130,26,"Error"],[118,25,130,22],[118,26,130,32],[118,44,130,50,"fieldType"],[118,53,130,32],[118,56,130,62],[118,64,130,32],[118,67,130,73,"name"],[118,71,130,32],[118,74,130,80],[118,77,130,32],[118,80,130,86,"key"],[118,83,130,32],[118,86,130,92],[118,110,130,22],[118,111,130,16],[119,0,131,13],[120,0,132,9],[122,0,134,8,"docs"],[122,6,134,8,"docs"],[122,10,134,12],[122,11,134,13,"key"],[122,14,134,12],[122,15,134,8],[122,18,134,20,"docsTypes"],[122,27,134,29],[122,28,134,30,"join"],[122,32,134,20],[122,33,134,35],[122,38,134,20],[122,39,134,8],[123,0,135,5],[125,0,137,4],[125,11,137,11],[126,0,138,8,"docs"],[126,6,138,8,"docs"],[126,10,138,12],[126,12,138,14,"docs"],[126,16,137,11],[127,0,139,8,"check"],[127,6,139,8,"check"],[127,11,139,13],[127,13,139,15,"createNodeStructureChecker"],[127,39,139,41],[127,40,139,42,"name"],[127,44,139,41],[127,46,139,48,"fields"],[127,52,139,41],[128,0,137,11],[128,5,137,4],[129,0,141,1],[131,0,143,0,"module"],[131,2,143,0,"module"],[131,8,143,6],[131,9,143,7,"exports"],[131,16,143,0],[131,19,143,17],[132,0,144,4,"getStructureFromConfig"],[132,4,144,4,"getStructureFromConfig"],[132,26,144,26],[132,28,144,28],[132,60,144,37,"config"],[132,66,144,28],[132,68,144,45],[133,0,145,8],[133,10,145,12,"structure"],[133,19,145,21],[133,22,145,24],[133,24,145,8],[135,0,147,8],[135,10,147,12,"config"],[135,16,147,18],[135,17,147,19,"node"],[135,21,147,8],[135,23,147,25],[136,0,148,12],[136,13,148,17],[136,17,148,21,"name"],[136,21,148,12],[136,25,148,29,"config"],[136,31,148,35],[136,32,148,36,"node"],[136,36,148,12],[136,38,148,42],[137,0,149,16],[137,14,149,20,"hasOwnProperty"],[137,28,149,34],[137,29,149,35,"call"],[137,33,149,20],[137,34,149,40,"config"],[137,40,149,46],[137,41,149,47,"node"],[137,45,149,20],[137,47,149,53,"name"],[137,51,149,20],[137,52,149,16],[137,54,149,60],[138,0,150,20],[138,16,150,24,"nodeType"],[138,24,150,32],[138,27,150,35,"config"],[138,33,150,41],[138,34,150,42,"node"],[138,38,150,35],[138,39,150,47,"name"],[138,43,150,35],[138,44,150,20],[140,0,152,20],[140,16,152,24,"nodeType"],[140,24,152,32],[140,25,152,33,"structure"],[140,34,152,20],[140,36,152,44],[141,0,153,24,"structure"],[141,14,153,24,"structure"],[141,23,153,33],[141,24,153,34,"name"],[141,28,153,33],[141,29,153,24],[141,32,153,42,"processStructure"],[141,48,153,58],[141,49,153,59,"name"],[141,53,153,58],[141,55,153,65,"nodeType"],[141,63,153,58],[141,64,153,24],[142,0,154,21],[142,13,152,20],[142,19,154,27],[143,0,155,24],[143,20,155,30],[143,24,155,34,"Error"],[143,29,155,30],[143,30,155,40],[143,64,155,74,"name"],[143,68,155,40],[143,71,155,81],[143,95,155,30],[143,96,155,24],[144,0,156,21],[145,0,157,17],[146,0,158,13],[147,0,159,9],[149,0,161,8],[149,13,161,15,"structure"],[149,22,161,8],[150,0,162,5],[151,0,143,17],[151,3,143,0]],"functionMap":{"names":["<global>","isValidNumber","isValidLocation","createNodeStructureChecker","checkNode","processStructure","module.exports.getStructureFromConfig"],"mappings":"AAA;ACG;CDQ;AEE;CFO;AGE;WCC;KDwE;CHC;AKE;CL0C;4BMG;KNkB"}},"type":"js/module"}]}