{"dependencies":[{"name":"../../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":12},"end":{"line":6,"column":22}},{"start":{"line":7,"column":13},"end":{"line":7,"column":24}},{"start":{"line":8,"column":16},"end":{"line":8,"column":30}},{"start":{"line":26,"column":13},"end":{"line":26,"column":29}},{"start":{"line":58,"column":19},"end":{"line":58,"column":29}},{"start":{"line":153,"column":13},"end":{"line":153,"column":51}},{"start":{"line":157,"column":13},"end":{"line":157,"column":62}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var IDENT = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Ident;\n\n  var NUMBER = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Number;\n\n  var DIMENSION = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Dimension;\n\n  var PLUSSIGN = 0x002B;\n  var HYPHENMINUS = 0x002D;\n  var QUESTIONMARK = 0x003F;\n  var U = 0x0075;\n\n  function eatHexSequence(offset, allowDash) {\n    for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {\n      var code = this.scanner.source.charCodeAt(pos);\n\n      if (code === HYPHENMINUS && allowDash && len !== 0) {\n        if (eatHexSequence.call(this, offset + len + 1, false) === 0) {\n          this.error();\n        }\n\n        return -1;\n      }\n\n      if (!_$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").isHexDigit(code)) {\n        this.error(allowDash && len !== 0 ? 'HyphenMinus' + (len < 6 ? ' or hex digit' : '') + ' is expected' : len < 6 ? 'Hex digit is expected' : 'Unexpected input', pos);\n      }\n\n      if (++len > 6) {\n        this.error('Too many hex digits', pos);\n      }\n\n      ;\n    }\n\n    this.scanner.next();\n    return len;\n  }\n\n  function eatQuestionMarkSequence(max) {\n    var count = 0;\n\n    while (this.scanner.isDelim(QUESTIONMARK)) {\n      if (++count > max) {\n        this.error('Too many question marks');\n      }\n\n      this.scanner.next();\n    }\n  }\n\n  function startsWith(code) {\n    if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {\n      this.error(_$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").NAME[code] + ' is expected');\n    }\n  }\n\n  function scanUnicodeRange() {\n    var hexLength = 0;\n\n    if (this.scanner.isDelim(PLUSSIGN)) {\n      this.scanner.next();\n\n      if (this.scanner.tokenType === IDENT) {\n        hexLength = eatHexSequence.call(this, 0, true);\n\n        if (hexLength > 0) {\n          eatQuestionMarkSequence.call(this, 6 - hexLength);\n        }\n\n        return;\n      }\n\n      if (this.scanner.isDelim(QUESTIONMARK)) {\n        this.scanner.next();\n        eatQuestionMarkSequence.call(this, 5);\n        return;\n      }\n\n      this.error('Hex digit or question mark is expected');\n      return;\n    }\n\n    if (this.scanner.tokenType === NUMBER) {\n      startsWith.call(this, PLUSSIGN);\n      hexLength = eatHexSequence.call(this, 1, true);\n\n      if (this.scanner.isDelim(QUESTIONMARK)) {\n        eatQuestionMarkSequence.call(this, 6 - hexLength);\n        return;\n      }\n\n      if (this.scanner.tokenType === DIMENSION || this.scanner.tokenType === NUMBER) {\n        startsWith.call(this, HYPHENMINUS);\n        eatHexSequence.call(this, 1, false);\n        return;\n      }\n\n      return;\n    }\n\n    if (this.scanner.tokenType === DIMENSION) {\n      startsWith.call(this, PLUSSIGN);\n      hexLength = eatHexSequence.call(this, 1, true);\n\n      if (hexLength > 0) {\n        eatQuestionMarkSequence.call(this, 6 - hexLength);\n      }\n\n      return;\n    }\n\n    this.error();\n  }\n\n  module.exports = {\n    name: 'UnicodeRange',\n    structure: {\n      value: String\n    },\n    parse: function parse() {\n      var start = this.scanner.tokenStart;\n\n      if (!_$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").cmpChar(this.scanner.source, start, U)) {\n        this.error('U is expected');\n      }\n\n      if (!_$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {\n        this.error('Plus sign is expected');\n      }\n\n      this.scanner.next();\n      scanUnicodeRange.call(this);\n      return {\n        type: 'UnicodeRange',\n        loc: this.getLocation(start, this.scanner.tokenStart),\n        value: this.scanner.substrToCursor(start)\n      };\n    },\n    generate: function generate(node) {\n      this.chunk(node.value);\n    }\n  };\n});","lineCount":144,"map":[[2,0,6,0],[2,6,6,4,"IDENT"],[2,11,6,9],[2,14,6,12],[2,69,6,17,"Ident"],[2,74,6,0],[4,0,7,0],[4,6,7,4,"NUMBER"],[4,12,7,10],[4,15,7,13],[4,70,7,18,"Number"],[4,76,7,0],[6,0,8,0],[6,6,8,4,"DIMENSION"],[6,15,8,13],[6,18,8,16],[6,73,8,21,"Dimension"],[6,82,8,0],[8,0,9,0],[8,6,9,4,"PLUSSIGN"],[8,14,9,12],[8,17,9,15],[8,23,9,0],[9,0,10,0],[9,6,10,4,"HYPHENMINUS"],[9,17,10,15],[9,20,10,18],[9,26,10,0],[10,0,11,0],[10,6,11,4,"QUESTIONMARK"],[10,18,11,16],[10,21,11,19],[10,27,11,0],[11,0,12,0],[11,6,12,4,"U"],[11,7,12,5],[11,10,12,8],[11,16,12,0],[13,0,14,0],[13,11,14,9,"eatHexSequence"],[13,25,14,0],[13,26,14,24,"offset"],[13,32,14,0],[13,34,14,32,"allowDash"],[13,43,14,0],[13,45,14,43],[14,0,15,4],[14,9,15,9],[14,13,15,13,"pos"],[14,16,15,16],[14,19,15,19],[14,24,15,24,"scanner"],[14,31,15,19],[14,32,15,32,"tokenStart"],[14,42,15,19],[14,45,15,45,"offset"],[14,51,15,9],[14,53,15,53,"len"],[14,56,15,56],[14,59,15,59],[14,60,15,4],[14,62,15,62,"pos"],[14,65,15,65],[14,68,15,68],[14,73,15,73,"scanner"],[14,80,15,68],[14,81,15,81,"tokenEnd"],[14,89,15,4],[14,91,15,91,"pos"],[14,94,15,94],[14,96,15,4],[14,98,15,98],[15,0,16,8],[15,10,16,12,"code"],[15,14,16,16],[15,17,16,19],[15,22,16,24,"scanner"],[15,29,16,19],[15,30,16,32,"source"],[15,36,16,19],[15,37,16,39,"charCodeAt"],[15,47,16,19],[15,48,16,50,"pos"],[15,51,16,19],[15,52,16,8],[17,0,18,8],[17,10,18,12,"code"],[17,14,18,16],[17,19,18,21,"HYPHENMINUS"],[17,30,18,12],[17,34,18,36,"allowDash"],[17,43,18,12],[17,47,18,49,"len"],[17,50,18,52],[17,55,18,57],[17,56,18,8],[17,58,18,60],[18,0,19,12],[18,12,19,16,"eatHexSequence"],[18,26,19,30],[18,27,19,31,"call"],[18,31,19,16],[18,32,19,36],[18,36,19,16],[18,38,19,42,"offset"],[18,44,19,48],[18,47,19,51,"len"],[18,50,19,42],[18,53,19,57],[18,54,19,16],[18,56,19,60],[18,61,19,16],[18,67,19,71],[18,68,19,12],[18,70,19,74],[19,0,20,16],[19,15,20,21,"error"],[19,20,20,16],[20,0,21,13],[22,0,23,12],[22,15,23,19],[22,16,23,20],[22,17,23,12],[23,0,24,9],[25,0,26,8],[25,10,26,12],[25,11,26,13],[25,72,26,24,"code"],[25,76,26,13],[25,77,26,8],[25,79,26,31],[26,0,27,12],[26,13,27,17,"error"],[26,18,27,12],[26,19,28,16,"allowDash"],[26,28,28,25],[26,32,28,29,"len"],[26,35,28,32],[26,40,28,37],[26,41,28,16],[26,44,29,22],[26,61,29,39,"len"],[26,64,29,42],[26,67,29,45],[26,68,29,39],[26,71,29,49],[26,86,29,39],[26,89,29,67],[26,91,29,22],[26,95,29,73],[26,109,28,16],[26,112,30,23,"len"],[26,115,30,26],[26,118,30,29],[26,119,30,23],[26,122,30,33],[26,145,30,23],[26,148,30,59],[26,166,27,12],[26,168,31,16,"pos"],[26,171,27,12],[27,0,33,9],[29,0,35,8],[29,10,35,12],[29,12,35,14,"len"],[29,15,35,12],[29,18,35,20],[29,19,35,8],[29,21,35,23],[30,0,36,12],[30,13,36,17,"error"],[30,18,36,12],[30,19,36,23],[30,40,36,12],[30,42,36,46,"pos"],[30,45,36,12],[31,0,37,9],[33,0,37,9],[34,0,38,5],[36,0,40,4],[36,9,40,9,"scanner"],[36,16,40,4],[36,17,40,17,"next"],[36,21,40,4],[37,0,41,4],[37,11,41,11,"len"],[37,14,41,4],[38,0,42,1],[40,0,44,0],[40,11,44,9,"eatQuestionMarkSequence"],[40,34,44,0],[40,35,44,33,"max"],[40,38,44,0],[40,40,44,38],[41,0,45,4],[41,8,45,8,"count"],[41,13,45,13],[41,16,45,16],[41,17,45,4],[43,0,47,4],[43,11,47,11],[43,16,47,16,"scanner"],[43,23,47,11],[43,24,47,24,"isDelim"],[43,31,47,11],[43,32,47,32,"QUESTIONMARK"],[43,44,47,11],[43,45,47,4],[43,47,47,47],[44,0,48,8],[44,10,48,12],[44,12,48,14,"count"],[44,17,48,12],[44,20,48,22,"max"],[44,23,48,8],[44,25,48,27],[45,0,49,12],[45,13,49,17,"error"],[45,18,49,12],[45,19,49,23],[45,44,49,12],[46,0,50,9],[48,0,52,8],[48,11,52,13,"scanner"],[48,18,52,8],[48,19,52,21,"next"],[48,23,52,8],[49,0,53,5],[50,0,54,1],[52,0,56,0],[52,11,56,9,"startsWith"],[52,21,56,0],[52,22,56,20,"code"],[52,26,56,0],[52,28,56,26],[53,0,57,4],[53,8,57,8],[53,13,57,13,"scanner"],[53,20,57,8],[53,21,57,21,"source"],[53,27,57,8],[53,28,57,28,"charCodeAt"],[53,38,57,8],[53,39,57,39],[53,44,57,44,"scanner"],[53,51,57,39],[53,52,57,52,"tokenStart"],[53,62,57,8],[53,68,57,68,"code"],[53,72,57,4],[53,74,57,74],[54,0,58,8],[54,11,58,13,"error"],[54,16,58,8],[54,17,58,19],[54,72,58,24,"code"],[54,76,58,19],[54,80,58,32],[54,94,58,8],[55,0,59,5],[56,0,60,1],[58,0,81,0],[58,11,81,9,"scanUnicodeRange"],[58,27,81,0],[58,30,81,28],[59,0,82,4],[59,8,82,8,"hexLength"],[59,17,82,17],[59,20,82,20],[59,21,82,4],[61,0,86,4],[61,8,86,8],[61,13,86,13,"scanner"],[61,20,86,8],[61,21,86,21,"isDelim"],[61,28,86,8],[61,29,86,29,"PLUSSIGN"],[61,37,86,8],[61,38,86,4],[61,40,86,40],[62,0,87,8],[62,11,87,13,"scanner"],[62,18,87,8],[62,19,87,21,"next"],[62,23,87,8],[64,0,89,8],[64,10,89,12],[64,15,89,17,"scanner"],[64,22,89,12],[64,23,89,25,"tokenType"],[64,32,89,12],[64,37,89,39,"IDENT"],[64,42,89,8],[64,44,89,46],[65,0,90,12,"hexLength"],[65,8,90,12,"hexLength"],[65,17,90,21],[65,20,90,24,"eatHexSequence"],[65,34,90,38],[65,35,90,39,"call"],[65,39,90,24],[65,40,90,44],[65,44,90,24],[65,46,90,50],[65,47,90,24],[65,49,90,53],[65,53,90,24],[65,54,90,12],[67,0,91,12],[67,12,91,16,"hexLength"],[67,21,91,25],[67,24,91,28],[67,25,91,12],[67,27,91,31],[68,0,92,16,"eatQuestionMarkSequence"],[68,10,92,16,"eatQuestionMarkSequence"],[68,33,92,39],[68,34,92,40,"call"],[68,38,92,16],[68,39,92,45],[68,43,92,16],[68,45,92,51],[68,49,92,55,"hexLength"],[68,58,92,16],[69,0,93,13],[71,0,94,12],[72,0,95,9],[74,0,97,8],[74,10,97,12],[74,15,97,17,"scanner"],[74,22,97,12],[74,23,97,25,"isDelim"],[74,30,97,12],[74,31,97,33,"QUESTIONMARK"],[74,43,97,12],[74,44,97,8],[74,46,97,48],[75,0,98,12],[75,13,98,17,"scanner"],[75,20,98,12],[75,21,98,25,"next"],[75,25,98,12],[76,0,99,12,"eatQuestionMarkSequence"],[76,8,99,12,"eatQuestionMarkSequence"],[76,31,99,35],[76,32,99,36,"call"],[76,36,99,12],[76,37,99,41],[76,41,99,12],[76,43,99,47],[76,44,99,12],[77,0,100,12],[78,0,101,9],[80,0,103,8],[80,11,103,13,"error"],[80,16,103,8],[80,17,103,19],[80,57,103,8],[81,0,104,8],[82,0,105,5],[84,0,110,4],[84,8,110,8],[84,13,110,13,"scanner"],[84,20,110,8],[84,21,110,21,"tokenType"],[84,30,110,8],[84,35,110,35,"NUMBER"],[84,41,110,4],[84,43,110,43],[85,0,111,8,"startsWith"],[85,6,111,8,"startsWith"],[85,16,111,18],[85,17,111,19,"call"],[85,21,111,8],[85,22,111,24],[85,26,111,8],[85,28,111,30,"PLUSSIGN"],[85,36,111,8],[86,0,112,8,"hexLength"],[86,6,112,8,"hexLength"],[86,15,112,17],[86,18,112,20,"eatHexSequence"],[86,32,112,34],[86,33,112,35,"call"],[86,37,112,20],[86,38,112,40],[86,42,112,20],[86,44,112,46],[86,45,112,20],[86,47,112,49],[86,51,112,20],[86,52,112,8],[88,0,114,8],[88,10,114,12],[88,15,114,17,"scanner"],[88,22,114,12],[88,23,114,25,"isDelim"],[88,30,114,12],[88,31,114,33,"QUESTIONMARK"],[88,43,114,12],[88,44,114,8],[88,46,114,48],[89,0,115,12,"eatQuestionMarkSequence"],[89,8,115,12,"eatQuestionMarkSequence"],[89,31,115,35],[89,32,115,36,"call"],[89,36,115,12],[89,37,115,41],[89,41,115,12],[89,43,115,47],[89,47,115,51,"hexLength"],[89,56,115,12],[90,0,116,12],[91,0,117,9],[93,0,119,8],[93,10,119,12],[93,15,119,17,"scanner"],[93,22,119,12],[93,23,119,25,"tokenType"],[93,32,119,12],[93,37,119,39,"DIMENSION"],[93,46,119,12],[93,50,120,12],[93,55,120,17,"scanner"],[93,62,120,12],[93,63,120,25,"tokenType"],[93,72,120,12],[93,77,120,39,"NUMBER"],[93,83,119,8],[93,85,120,47],[94,0,121,12,"startsWith"],[94,8,121,12,"startsWith"],[94,18,121,22],[94,19,121,23,"call"],[94,23,121,12],[94,24,121,28],[94,28,121,12],[94,30,121,34,"HYPHENMINUS"],[94,41,121,12],[95,0,122,12,"eatHexSequence"],[95,8,122,12,"eatHexSequence"],[95,22,122,26],[95,23,122,27,"call"],[95,27,122,12],[95,28,122,32],[95,32,122,12],[95,34,122,38],[95,35,122,12],[95,37,122,41],[95,42,122,12],[96,0,123,12],[97,0,124,9],[99,0,126,8],[100,0,127,5],[102,0,130,4],[102,8,130,8],[102,13,130,13,"scanner"],[102,20,130,8],[102,21,130,21,"tokenType"],[102,30,130,8],[102,35,130,35,"DIMENSION"],[102,44,130,4],[102,46,130,46],[103,0,131,8,"startsWith"],[103,6,131,8,"startsWith"],[103,16,131,18],[103,17,131,19,"call"],[103,21,131,8],[103,22,131,24],[103,26,131,8],[103,28,131,30,"PLUSSIGN"],[103,36,131,8],[104,0,132,8,"hexLength"],[104,6,132,8,"hexLength"],[104,15,132,17],[104,18,132,20,"eatHexSequence"],[104,32,132,34],[104,33,132,35,"call"],[104,37,132,20],[104,38,132,40],[104,42,132,20],[104,44,132,46],[104,45,132,20],[104,47,132,49],[104,51,132,20],[104,52,132,8],[106,0,134,8],[106,10,134,12,"hexLength"],[106,19,134,21],[106,22,134,24],[106,23,134,8],[106,25,134,27],[107,0,135,12,"eatQuestionMarkSequence"],[107,8,135,12,"eatQuestionMarkSequence"],[107,31,135,35],[107,32,135,36,"call"],[107,36,135,12],[107,37,135,41],[107,41,135,12],[107,43,135,47],[107,47,135,51,"hexLength"],[107,56,135,12],[108,0,136,9],[110,0,138,8],[111,0,139,5],[113,0,141,4],[113,9,141,9,"error"],[113,14,141,4],[114,0,142,1],[116,0,144,0,"module"],[116,2,144,0,"module"],[116,8,144,6],[116,9,144,7,"exports"],[116,16,144,0],[116,19,144,17],[117,0,145,4,"name"],[117,4,145,4,"name"],[117,8,145,8],[117,10,145,10],[117,24,144,17],[118,0,146,4,"structure"],[118,4,146,4,"structure"],[118,13,146,13],[118,15,146,15],[119,0,147,8,"value"],[119,6,147,8,"value"],[119,11,147,13],[119,13,147,15,"String"],[120,0,146,15],[120,5,144,17],[121,0,149,4,"parse"],[121,4,149,4,"parse"],[121,9,149,9],[121,11,149,11],[121,28,149,22],[122,0,150,8],[122,10,150,12,"start"],[122,15,150,17],[122,18,150,20],[122,23,150,25,"scanner"],[122,30,150,20],[122,31,150,33,"tokenStart"],[122,41,150,8],[124,0,153,8],[124,10,153,12],[124,11,153,13],[124,69,153,21],[124,74,153,26,"scanner"],[124,81,153,21],[124,82,153,34,"source"],[124,88,153,13],[124,90,153,42,"start"],[124,95,153,13],[124,97,153,49,"U"],[124,98,153,13],[124,99,153,8],[124,101,153,53],[125,0,154,12],[125,13,154,17,"error"],[125,18,154,12],[125,19,154,23],[125,34,154,12],[126,0,155,9],[128,0,157,8],[128,10,157,12],[128,11,157,13],[128,69,157,21],[128,74,157,26,"scanner"],[128,81,157,21],[128,82,157,34,"source"],[128,88,157,13],[128,90,157,42,"start"],[128,95,157,47],[128,98,157,50],[128,99,157,13],[128,101,157,53,"PLUSSIGN"],[128,109,157,13],[128,110,157,8],[128,112,157,64],[129,0,158,12],[129,13,158,17,"error"],[129,18,158,12],[129,19,158,23],[129,42,158,12],[130,0,159,9],[132,0,161,8],[132,11,161,13,"scanner"],[132,18,161,8],[132,19,161,21,"next"],[132,23,161,8],[133,0,162,8,"scanUnicodeRange"],[133,6,162,8,"scanUnicodeRange"],[133,22,162,24],[133,23,162,25,"call"],[133,27,162,8],[133,28,162,30],[133,32,162,8],[134,0,164,8],[134,13,164,15],[135,0,165,12,"type"],[135,8,165,12,"type"],[135,12,165,16],[135,14,165,18],[135,28,164,15],[136,0,166,12,"loc"],[136,8,166,12,"loc"],[136,11,166,15],[136,13,166,17],[136,18,166,22,"getLocation"],[136,29,166,17],[136,30,166,34,"start"],[136,35,166,17],[136,37,166,41],[136,42,166,46,"scanner"],[136,49,166,41],[136,50,166,54,"tokenStart"],[136,60,166,17],[136,61,164,15],[137,0,167,12,"value"],[137,8,167,12,"value"],[137,13,167,17],[137,15,167,19],[137,20,167,24,"scanner"],[137,27,167,19],[137,28,167,32,"substrToCursor"],[137,42,167,19],[137,43,167,47,"start"],[137,48,167,19],[138,0,164,15],[138,7,164,8],[139,0,169,5],[139,5,144,17],[140,0,170,4,"generate"],[140,4,170,4,"generate"],[140,12,170,12],[140,14,170,14],[140,32,170,23,"node"],[140,36,170,14],[140,38,170,29],[141,0,171,8],[141,11,171,13,"chunk"],[141,16,171,8],[141,17,171,19,"node"],[141,21,171,23],[141,22,171,24,"value"],[141,27,171,8],[142,0,172,5],[143,0,144,17],[143,3,144,0]],"functionMap":{"names":["<global>","eatHexSequence","eatQuestionMarkSequence","startsWith","scanUnicodeRange","module.exports.parse","module.exports.generate"],"mappings":"AAA;ACa;CD4B;AEE;CFU;AGE;CHI;AIqB;CJ6D;WKO;KLoB;cMC;KNE"}},"type":"js/module"}]}