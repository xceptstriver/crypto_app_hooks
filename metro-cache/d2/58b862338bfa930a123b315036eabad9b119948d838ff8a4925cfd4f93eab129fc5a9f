{"dependencies":[{"name":"../common/List","data":{"asyncType":null,"locs":[{"start":{"line":29,"column":32},"end":{"line":29,"column":42}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function getFirstMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n\n    return getFirstMatchNode(matchNode.match[0]);\n  }\n\n  function getLastMatchNode(matchNode) {\n    if ('node' in matchNode) {\n      return matchNode.node;\n    }\n\n    return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);\n  }\n\n  function matchFragments(lexer, ast, match, type, name) {\n    function findFragments(matchNode) {\n      if (matchNode.syntax !== null && matchNode.syntax.type === type && matchNode.syntax.name === name) {\n        var start = getFirstMatchNode(matchNode);\n        var end = getLastMatchNode(matchNode);\n        lexer.syntax.walk(ast, function (node, item, list) {\n          if (node === start) {\n            var nodes = new (_$$_REQUIRE(_dependencyMap[0], \"../common/List\"))();\n\n            do {\n              nodes.appendData(item.data);\n\n              if (item.data === end) {\n                break;\n              }\n\n              item = item.next;\n            } while (item !== null);\n\n            fragments.push({\n              parent: list,\n              nodes: nodes\n            });\n          }\n        });\n      }\n\n      if (Array.isArray(matchNode.match)) {\n        matchNode.match.forEach(findFragments);\n      }\n    }\n\n    var fragments = [];\n\n    if (match.matched !== null) {\n      findFragments(match.matched);\n    }\n\n    return fragments;\n  }\n\n  module.exports = {\n    matchFragments: matchFragments\n  };\n});","lineCount":62,"map":[[2,0,3,0],[2,11,3,9,"getFirstMatchNode"],[2,28,3,0],[2,29,3,27,"matchNode"],[2,38,3,0],[2,40,3,38],[3,0,4,4],[3,8,4,8],[3,18,4,18,"matchNode"],[3,27,4,4],[3,29,4,29],[4,0,5,8],[4,13,5,15,"matchNode"],[4,22,5,24],[4,23,5,25,"node"],[4,27,5,8],[5,0,6,5],[7,0,8,4],[7,11,8,11,"getFirstMatchNode"],[7,28,8,28],[7,29,8,29,"matchNode"],[7,38,8,38],[7,39,8,39,"match"],[7,44,8,29],[7,45,8,45],[7,46,8,29],[7,47,8,28],[7,48,8,4],[8,0,9,1],[10,0,11,0],[10,11,11,9,"getLastMatchNode"],[10,27,11,0],[10,28,11,26,"matchNode"],[10,37,11,0],[10,39,11,37],[11,0,12,4],[11,8,12,8],[11,18,12,18,"matchNode"],[11,27,12,4],[11,29,12,29],[12,0,13,8],[12,13,13,15,"matchNode"],[12,22,13,24],[12,23,13,25,"node"],[12,27,13,8],[13,0,14,5],[15,0,16,4],[15,11,16,11,"getLastMatchNode"],[15,27,16,27],[15,28,16,28,"matchNode"],[15,37,16,37],[15,38,16,38,"match"],[15,43,16,28],[15,44,16,44,"matchNode"],[15,53,16,53],[15,54,16,54,"match"],[15,59,16,44],[15,60,16,60,"length"],[15,66,16,44],[15,69,16,69],[15,70,16,28],[15,71,16,27],[15,72,16,4],[16,0,17,1],[18,0,19,0],[18,11,19,9,"matchFragments"],[18,25,19,0],[18,26,19,24,"lexer"],[18,31,19,0],[18,33,19,31,"ast"],[18,36,19,0],[18,38,19,36,"match"],[18,43,19,0],[18,45,19,43,"type"],[18,49,19,0],[18,51,19,49,"name"],[18,55,19,0],[18,57,19,55],[19,0,20,4],[19,13,20,13,"findFragments"],[19,26,20,4],[19,27,20,27,"matchNode"],[19,36,20,4],[19,38,20,38],[20,0,21,8],[20,10,21,12,"matchNode"],[20,19,21,21],[20,20,21,22,"syntax"],[20,26,21,12],[20,31,21,33],[20,35,21,12],[20,39,22,12,"matchNode"],[20,48,22,21],[20,49,22,22,"syntax"],[20,55,22,12],[20,56,22,29,"type"],[20,60,22,12],[20,65,22,38,"type"],[20,69,21,12],[20,73,23,12,"matchNode"],[20,82,23,21],[20,83,23,22,"syntax"],[20,89,23,12],[20,90,23,29,"name"],[20,94,23,12],[20,99,23,38,"name"],[20,103,21,8],[20,105,23,44],[21,0,24,12],[21,12,24,16,"start"],[21,17,24,21],[21,20,24,24,"getFirstMatchNode"],[21,37,24,41],[21,38,24,42,"matchNode"],[21,47,24,41],[21,48,24,12],[22,0,25,12],[22,12,25,16,"end"],[22,15,25,19],[22,18,25,22,"getLastMatchNode"],[22,34,25,38],[22,35,25,39,"matchNode"],[22,44,25,38],[22,45,25,12],[23,0,27,12,"lexer"],[23,8,27,12,"lexer"],[23,13,27,17],[23,14,27,18,"syntax"],[23,20,27,12],[23,21,27,25,"walk"],[23,25,27,12],[23,26,27,30,"ast"],[23,29,27,12],[23,31,27,35],[23,41,27,44,"node"],[23,45,27,35],[23,47,27,50,"item"],[23,51,27,35],[23,53,27,56,"list"],[23,57,27,35],[23,59,27,62],[24,0,28,16],[24,14,28,20,"node"],[24,18,28,24],[24,23,28,29,"start"],[24,28,28,16],[24,30,28,36],[25,0,29,20],[25,16,29,24,"nodes"],[25,21,29,29],[25,24,29,32],[25,80,29,20],[27,0,31,20],[27,15,31,23],[28,0,32,24,"nodes"],[28,14,32,24,"nodes"],[28,19,32,29],[28,20,32,30,"appendData"],[28,30,32,24],[28,31,32,41,"item"],[28,35,32,45],[28,36,32,46,"data"],[28,40,32,24],[30,0,34,24],[30,18,34,28,"item"],[30,22,34,32],[30,23,34,33,"data"],[30,27,34,28],[30,32,34,42,"end"],[30,35,34,24],[30,37,34,47],[31,0,35,28],[32,0,36,25],[34,0,38,24,"item"],[34,14,38,24,"item"],[34,18,38,28],[34,21,38,31,"item"],[34,25,38,35],[34,26,38,36,"next"],[34,30,38,24],[35,0,39,21],[35,13,31,20],[35,21,39,29,"item"],[35,25,39,33],[35,30,39,38],[35,34,31,20],[37,0,41,20,"fragments"],[37,12,41,20,"fragments"],[37,21,41,29],[37,22,41,30,"push"],[37,26,41,20],[37,27,41,35],[38,0,42,24,"parent"],[38,14,42,24,"parent"],[38,20,42,30],[38,22,42,32,"list"],[38,26,41,35],[39,0,43,24,"nodes"],[39,14,43,24,"nodes"],[39,19,43,29],[39,21,43,31,"nodes"],[40,0,41,35],[40,13,41,20],[41,0,45,17],[42,0,46,13],[42,9,27,12],[43,0,47,9],[45,0,49,8],[45,10,49,12,"Array"],[45,15,49,17],[45,16,49,18,"isArray"],[45,23,49,12],[45,24,49,26,"matchNode"],[45,33,49,35],[45,34,49,36,"match"],[45,39,49,12],[45,40,49,8],[45,42,49,44],[46,0,50,12,"matchNode"],[46,8,50,12,"matchNode"],[46,17,50,21],[46,18,50,22,"match"],[46,23,50,12],[46,24,50,28,"forEach"],[46,31,50,12],[46,32,50,36,"findFragments"],[46,45,50,12],[47,0,51,9],[48,0,52,5],[50,0,54,4],[50,8,54,8,"fragments"],[50,17,54,17],[50,20,54,20],[50,22,54,4],[52,0,56,4],[52,8,56,8,"match"],[52,13,56,13],[52,14,56,14,"matched"],[52,21,56,8],[52,26,56,26],[52,30,56,4],[52,32,56,32],[53,0,57,8,"findFragments"],[53,6,57,8,"findFragments"],[53,19,57,21],[53,20,57,22,"match"],[53,25,57,27],[53,26,57,28,"matched"],[53,33,57,21],[53,34,57,8],[54,0,58,5],[56,0,60,4],[56,11,60,11,"fragments"],[56,20,60,4],[57,0,61,1],[59,0,63,0,"module"],[59,2,63,0,"module"],[59,8,63,6],[59,9,63,7,"exports"],[59,16,63,0],[59,19,63,17],[60,0,64,4,"matchFragments"],[60,4,64,4,"matchFragments"],[60,18,64,18],[60,20,64,20,"matchFragments"],[61,0,63,17],[61,3,63,0]],"functionMap":{"names":["<global>","getFirstMatchNode","getLastMatchNode","matchFragments","findFragments","lexer.syntax.walk$argument_1"],"mappings":"AAA;ACE;CDM;AEE;CFM;AGE;ICC;mCCO;aDmB;KDM;CHS"}},"type":"js/module"}]}