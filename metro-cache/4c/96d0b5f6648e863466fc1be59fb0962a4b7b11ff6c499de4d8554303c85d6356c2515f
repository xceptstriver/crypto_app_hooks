{"dependencies":[{"name":"./../utils","data":{"asyncType":null,"locs":[{"start":{"line":35,"column":2},"end":{"line":35,"column":15}},{"start":{"line":37,"column":10},"end":{"line":37,"column":20}},{"start":{"line":38,"column":10},"end":{"line":38,"column":20}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];\n\n  module.exports = function parseHeaders(headers) {\n    var parsed = {};\n    var key;\n    var val;\n    var i;\n\n    if (!headers) {\n      return parsed;\n    }\n\n    _$$_REQUIRE(_dependencyMap[0], \"./../utils\").forEach(headers.split('\\n'), function parser(line) {\n      i = line.indexOf(':');\n      key = _$$_REQUIRE(_dependencyMap[0], \"./../utils\").trim(line.substr(0, i)).toLowerCase();\n      val = _$$_REQUIRE(_dependencyMap[0], \"./../utils\").trim(line.substr(i + 1));\n\n      if (key) {\n        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n          return;\n        }\n\n        if (key === 'set-cookie') {\n          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n        } else {\n          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n        }\n      }\n    });\n\n    return parsed;\n  };\n});","lineCount":36,"map":[[2,0,1,0],[4,0,7,0],[4,6,7,4,"ignoreDuplicateOf"],[4,23,7,21],[4,26,7,24],[4,27,8,2],[4,32,7,24],[4,34,8,9],[4,49,7,24],[4,51,8,26],[4,67,7,24],[4,69,8,44],[4,83,7,24],[4,85,8,60],[4,91,7,24],[4,93,9,2],[4,102,7,24],[4,104,9,13],[4,110,7,24],[4,112,9,21],[4,118,7,24],[4,120,9,29],[4,139,7,24],[4,141,9,50],[4,162,7,24],[4,164,10,2],[4,179,7,24],[4,181,10,19],[4,191,7,24],[4,193,10,31],[4,207,7,24],[4,209,10,47],[4,230,7,24],[4,232,11,2],[4,241,7,24],[4,243,11,13],[4,256,7,24],[4,258,11,28],[4,270,7,24],[4,271,7,0],[6,0,27,0,"module"],[6,2,27,0,"module"],[6,8,27,6],[6,9,27,7,"exports"],[6,16,27,0],[6,19,27,17],[6,28,27,26,"parseHeaders"],[6,40,27,17],[6,41,27,39,"headers"],[6,48,27,17],[6,50,27,48],[7,0,28,2],[7,8,28,6,"parsed"],[7,14,28,12],[7,17,28,15],[7,19,28,2],[8,0,29,2],[8,8,29,6,"key"],[8,11,29,2],[9,0,30,2],[9,8,30,6,"val"],[9,11,30,2],[10,0,31,2],[10,8,31,6,"i"],[10,9,31,2],[12,0,33,2],[12,8,33,6],[12,9,33,7,"headers"],[12,16,33,2],[12,18,33,16],[13,0,33,18],[13,13,33,25,"parsed"],[13,19,33,18],[14,0,33,34],[16,0,35,2],[16,49,35,8,"forEach"],[16,56,35,2],[16,57,35,16,"headers"],[16,64,35,23],[16,65,35,24,"split"],[16,70,35,16],[16,71,35,30],[16,75,35,16],[16,76,35,2],[16,78,35,37],[16,87,35,46,"parser"],[16,93,35,37],[16,94,35,53,"line"],[16,98,35,37],[16,100,35,59],[17,0,36,4,"i"],[17,6,36,4,"i"],[17,7,36,5],[17,10,36,8,"line"],[17,14,36,12],[17,15,36,13,"indexOf"],[17,22,36,8],[17,23,36,21],[17,26,36,8],[17,27,36,4],[18,0,37,4,"key"],[18,6,37,4,"key"],[18,9,37,7],[18,12,37,10],[18,57,37,16,"trim"],[18,61,37,10],[18,62,37,21,"line"],[18,66,37,25],[18,67,37,26,"substr"],[18,73,37,21],[18,74,37,33],[18,75,37,21],[18,77,37,36,"i"],[18,78,37,21],[18,79,37,10],[18,81,37,40,"toLowerCase"],[18,92,37,10],[18,94,37,4],[19,0,38,4,"val"],[19,6,38,4,"val"],[19,9,38,7],[19,12,38,10],[19,57,38,16,"trim"],[19,61,38,10],[19,62,38,21,"line"],[19,66,38,25],[19,67,38,26,"substr"],[19,73,38,21],[19,74,38,33,"i"],[19,75,38,34],[19,78,38,37],[19,79,38,21],[19,80,38,10],[19,81,38,4],[21,0,40,4],[21,10,40,8,"key"],[21,13,40,4],[21,15,40,13],[22,0,41,6],[22,12,41,10,"parsed"],[22,18,41,16],[22,19,41,17,"key"],[22,22,41,16],[22,23,41,10],[22,27,41,25,"ignoreDuplicateOf"],[22,44,41,42],[22,45,41,43,"indexOf"],[22,52,41,25],[22,53,41,51,"key"],[22,56,41,25],[22,61,41,59],[22,62,41,6],[22,64,41,62],[23,0,42,8],[24,0,43,7],[26,0,44,6],[26,12,44,10,"key"],[26,15,44,13],[26,20,44,18],[26,32,44,6],[26,34,44,32],[27,0,45,8,"parsed"],[27,10,45,8,"parsed"],[27,16,45,14],[27,17,45,15,"key"],[27,20,45,14],[27,21,45,8],[27,24,45,22],[27,25,45,23,"parsed"],[27,31,45,29],[27,32,45,30,"key"],[27,35,45,29],[27,36,45,23],[27,39,45,37,"parsed"],[27,45,45,43],[27,46,45,44,"key"],[27,49,45,43],[27,50,45,23],[27,53,45,51],[27,55,45,22],[27,57,45,55,"concat"],[27,63,45,22],[27,64,45,62],[27,65,45,63,"val"],[27,68,45,62],[27,69,45,22],[27,70,45,8],[28,0,46,7],[28,9,44,6],[28,15,46,13],[29,0,47,8,"parsed"],[29,10,47,8,"parsed"],[29,16,47,14],[29,17,47,15,"key"],[29,20,47,14],[29,21,47,8],[29,24,47,22,"parsed"],[29,30,47,28],[29,31,47,29,"key"],[29,34,47,28],[29,35,47,22],[29,38,47,36,"parsed"],[29,44,47,42],[29,45,47,43,"key"],[29,48,47,42],[29,49,47,36],[29,52,47,50],[29,56,47,36],[29,59,47,57,"val"],[29,62,47,22],[29,65,47,63,"val"],[29,68,47,8],[30,0,48,7],[31,0,49,5],[32,0,50,3],[32,5,35,2],[34,0,52,2],[34,11,52,9,"parsed"],[34,17,52,2],[35,0,53,1],[35,3,27,0]],"functionMap":{"names":["<global>","parseHeaders","parser"],"mappings":"AAA;iBC0B;qCCQ;GDe;CDG"}},"type":"js/module"}]}