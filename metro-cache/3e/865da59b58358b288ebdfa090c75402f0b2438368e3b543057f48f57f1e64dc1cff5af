{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":79,"column":0}},{"start":{"line":1,"column":0},"end":{"line":79,"column":0}},{"start":{"line":1,"column":0},"end":{"line":79,"column":0}},{"start":{"line":1,"column":0},"end":{"line":79,"column":0}},{"start":{"line":1,"column":0},"end":{"line":79,"column":0}},{"start":{"line":1,"column":0},"end":{"line":1,"column":42}},{"start":{"line":3,"column":0},"end":{"line":3,"column":42}}]}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":79,"column":0}}]}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":79,"column":0}}]}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":79,"column":0}}]}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":79,"column":0}}]}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":79,"column":0}}]}},{"name":"./AnimatedNode","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":1,"column":42}}]}},{"name":"fbjs/lib/areEqual","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0},"end":{"line":3,"column":42}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createOrReuseTransformNode = createOrReuseTransformNode;\n\n  var _classCallCheck2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n\n  var _createClass2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n\n  var _inherits2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/inherits\"));\n\n  var _possibleConstructorReturn2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n\n  var _getPrototypeOf2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\"));\n\n  var _AnimatedNode2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[6], \"./AnimatedNode\"));\n\n  var _areEqual = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[7], \"fbjs/lib/areEqual\"));\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n  function sanitizeTransform(inputTransform) {\n    var outputTransform = [];\n    var hasAnimatedTransform = false;\n    inputTransform.forEach(function (transform) {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof _AnimatedNode2.default) {\n          hasAnimatedTransform = true;\n          outputTransform.push({\n            property: key,\n            nodeID: value.__nodeID\n          });\n        } else {\n          outputTransform.push({\n            property: key,\n            value: value\n          });\n        }\n      }\n    });\n    return hasAnimatedTransform ? outputTransform : undefined;\n  }\n\n  function extractAnimatedParentNodes(transform) {\n    var parents = [];\n    transform.forEach(function (transform) {\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof _AnimatedNode2.default) {\n          parents.push(value);\n        }\n      }\n    });\n    return parents;\n  }\n\n  function createOrReuseTransformNode(transform, oldNode) {\n    var config = sanitizeTransform(transform);\n\n    if (config === undefined) {\n      return undefined;\n    }\n\n    if (oldNode && (0, _areEqual.default)(config, oldNode._config)) {\n      return oldNode;\n    }\n\n    return new AnimatedTransform(transform, config);\n  }\n\n  var AnimatedTransform = function (_AnimatedNode) {\n    (0, _inherits2.default)(AnimatedTransform, _AnimatedNode);\n\n    var _super = _createSuper(AnimatedTransform);\n\n    function AnimatedTransform(transform, config) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AnimatedTransform);\n      _this = _super.call(this, {\n        type: 'transform',\n        transform: config\n      }, extractAnimatedParentNodes(transform));\n      _this._config = config;\n      _this._transform = transform;\n      return _this;\n    }\n\n    (0, _createClass2.default)(AnimatedTransform, [{\n      key: \"toString\",\n      value: function toString() {\n        return \"AnimatedTransform, id: \" + this.__nodeID;\n      }\n    }, {\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._transform.map(function (transform) {\n          var result = {};\n\n          for (var key in transform) {\n            var value = transform[key];\n\n            if (value instanceof _AnimatedNode2.default) {\n              result[key] = value.__getValue();\n            }\n          }\n\n          return result;\n        });\n      }\n    }]);\n    return AnimatedTransform;\n  }(_AnimatedNode2.default);\n});","lineCount":120,"map":[[17,0,1,0],[19,0,3,0],[25,0,5,0],[25,11,5,9,"sanitizeTransform"],[25,28,5,0],[25,29,5,27,"inputTransform"],[25,43,5,0],[25,45,5,43],[26,0,6,2],[26,8,6,8,"outputTransform"],[26,23,6,23],[26,26,6,26],[26,28,6,2],[27,0,7,2],[27,8,7,6,"hasAnimatedTransform"],[27,28,7,26],[27,31,7,29],[27,36,7,2],[28,0,8,2,"inputTransform"],[28,4,8,2,"inputTransform"],[28,18,8,16],[28,19,8,17,"forEach"],[28,26,8,2],[28,27,8,25],[28,37,8,26,"transform"],[28,46,8,25],[28,48,8,40],[29,0,9,4],[29,11,9,9],[29,15,9,15,"key"],[29,18,9,4],[29,22,9,22,"transform"],[29,31,9,4],[29,33,9,33],[30,0,10,6],[30,12,10,12,"value"],[30,17,10,17],[30,20,10,20,"transform"],[30,29,10,29],[30,30,10,30,"key"],[30,33,10,29],[30,34,10,6],[32,0,11,6],[32,12,11,10,"value"],[32,17,11,15],[32,29,11,27,"AnimatedNode"],[32,51,11,6],[32,53,11,41],[33,0,12,8,"hasAnimatedTransform"],[33,10,12,8,"hasAnimatedTransform"],[33,30,12,28],[33,33,12,31],[33,37,12,8],[34,0,13,8,"outputTransform"],[34,10,13,8,"outputTransform"],[34,25,13,23],[34,26,13,24,"push"],[34,30,13,8],[34,31,13,29],[35,0,14,10,"property"],[35,12,14,10,"property"],[35,20,14,18],[35,22,14,20,"key"],[35,25,13,29],[36,0,15,10,"nodeID"],[36,12,15,10,"nodeID"],[36,18,15,16],[36,20,15,18,"value"],[36,25,15,23],[36,26,15,24,"__nodeID"],[37,0,13,29],[37,11,13,8],[38,0,17,7],[38,9,11,6],[38,15,17,13],[39,0,18,8,"outputTransform"],[39,10,18,8,"outputTransform"],[39,25,18,23],[39,26,18,24,"push"],[39,30,18,8],[39,31,18,29],[40,0,19,10,"property"],[40,12,19,10,"property"],[40,20,19,18],[40,22,19,20,"key"],[40,25,18,29],[41,0,20,10,"value"],[41,12,20,10,"value"],[41,17,20,15],[41,19,20,10,"value"],[42,0,18,29],[42,11,18,8],[43,0,22,7],[44,0,23,5],[45,0,24,3],[45,5,8,2],[46,0,25,2],[46,11,25,9,"hasAnimatedTransform"],[46,31,25,29],[46,34,25,32,"outputTransform"],[46,49,25,29],[46,52,25,50,"undefined"],[46,61,25,2],[47,0,26,1],[49,0,28,0],[49,11,28,9,"extractAnimatedParentNodes"],[49,37,28,0],[49,38,28,36,"transform"],[49,47,28,0],[49,49,28,47],[50,0,29,2],[50,8,29,8,"parents"],[50,15,29,15],[50,18,29,18],[50,20,29,2],[51,0,30,2,"transform"],[51,4,30,2,"transform"],[51,13,30,11],[51,14,30,12,"forEach"],[51,21,30,2],[51,22,30,20],[51,32,30,21,"transform"],[51,41,30,20],[51,43,30,35],[52,0,31,4],[52,11,31,9],[52,15,31,15,"key"],[52,18,31,4],[52,22,31,22,"transform"],[52,31,31,4],[52,33,31,33],[53,0,32,6],[53,12,32,12,"value"],[53,17,32,17],[53,20,32,20,"transform"],[53,29,32,29],[53,30,32,30,"key"],[53,33,32,29],[53,34,32,6],[55,0,33,6],[55,12,33,10,"value"],[55,17,33,15],[55,29,33,27,"AnimatedNode"],[55,51,33,6],[55,53,33,41],[56,0,34,8,"parents"],[56,10,34,8,"parents"],[56,17,34,15],[56,18,34,16,"push"],[56,22,34,8],[56,23,34,21,"value"],[56,28,34,8],[57,0,35,7],[58,0,36,5],[59,0,37,3],[59,5,30,2],[60,0,38,2],[60,11,38,9,"parents"],[60,18,38,2],[61,0,39,1],[63,0,41,7],[63,11,41,16,"createOrReuseTransformNode"],[63,37,41,7],[63,38,41,43,"transform"],[63,47,41,7],[63,49,41,54,"oldNode"],[63,56,41,7],[63,58,41,63],[64,0,42,2],[64,8,42,8,"config"],[64,14,42,14],[64,17,42,17,"sanitizeTransform"],[64,34,42,34],[64,35,42,35,"transform"],[64,44,42,34],[64,45,42,2],[66,0,43,2],[66,8,43,6,"config"],[66,14,43,12],[66,19,43,17,"undefined"],[66,28,43,2],[66,30,43,28],[67,0,44,4],[67,13,44,11,"undefined"],[67,22,44,4],[68,0,45,3],[70,0,46,2],[70,8,46,6,"oldNode"],[70,15,46,13],[70,19,46,17],[70,42,46,27,"config"],[70,48,46,17],[70,50,46,35,"oldNode"],[70,57,46,42],[70,58,46,43,"_config"],[70,65,46,17],[70,66,46,2],[70,68,46,53],[71,0,47,4],[71,13,47,11,"oldNode"],[71,20,47,4],[72,0,48,3],[74,0,49,2],[74,11,49,9],[74,15,49,13,"AnimatedTransform"],[74,32,49,9],[74,33,49,31,"transform"],[74,42,49,9],[74,44,49,42,"config"],[74,50,49,9],[74,51,49,2],[75,0,50,1],[77,6,52,6,"AnimatedTransform"],[77,23],[82,0,53,2],[82,31,53,14,"transform"],[82,40,53,2],[82,42,53,25,"config"],[82,48,53,2],[82,50,53,33],[83,0,53,33],[85,0,53,33],[86,0,54,4],[86,32,55,6],[87,0,55,8,"type"],[87,8,55,8,"type"],[87,12,55,12],[87,14,55,14],[87,25,55,6],[88,0,55,27,"transform"],[88,8,55,27,"transform"],[88,17,55,36],[88,19,55,38,"config"],[89,0,55,6],[89,7,54,4],[89,9,56,6,"extractAnimatedParentNodes"],[89,35,56,32],[89,36,56,33,"transform"],[89,45,56,32],[89,46,54,4],[90,0,58,4],[90,12,58,9,"_config"],[90,19,58,4],[90,22,58,19,"config"],[90,28,58,4],[91,0,59,4],[91,12,59,9,"_transform"],[91,22,59,4],[91,25,59,22,"transform"],[91,34,59,4],[92,0,53,33],[93,0,60,3],[97,13,62,2],[97,33,62,13],[98,0,63,4],[98,43,63,37],[98,48,63,42,"__nodeID"],[98,56,63,4],[99,0,64,3],[102,13,66,2],[102,37,66,17],[103,0,67,4],[103,15,67,11],[103,20,67,16,"_transform"],[103,30,67,11],[103,31,67,27,"map"],[103,34,67,11],[103,35,67,31],[103,45,67,32,"transform"],[103,54,67,31],[103,56,67,46],[104,0,68,6],[104,14,68,12,"result"],[104,20,68,18],[104,23,68,21],[104,25,68,6],[106,0,69,6],[106,15,69,11],[106,19,69,17,"key"],[106,22,69,6],[106,26,69,24,"transform"],[106,35,69,6],[106,37,69,35],[107,0,70,8],[107,16,70,14,"value"],[107,21,70,19],[107,24,70,22,"transform"],[107,33,70,31],[107,34,70,32,"key"],[107,37,70,31],[107,38,70,8],[109,0,71,8],[109,16,71,12,"value"],[109,21,71,17],[109,33,71,29,"AnimatedNode"],[109,55,71,8],[109,57,71,43],[110,0,72,10,"result"],[110,14,72,10,"result"],[110,20,72,16],[110,21,72,17,"key"],[110,24,72,16],[110,25,72,10],[110,28,72,24,"value"],[110,33,72,29],[110,34,72,30,"__getValue"],[110,44,72,24],[110,46,72,10],[111,0,73,9],[112,0,74,7],[114,0,75,6],[114,17,75,13,"result"],[114,23,75,6],[115,0,76,5],[115,9,67,11],[115,10,67,4],[116,0,77,3],[119,4,52,32,"AnimatedNode"],[119,26]],"functionMap":{"names":["<global>","sanitizeTransform","inputTransform.forEach$argument_0","extractAnimatedParentNodes","transform.forEach$argument_0","createOrReuseTransformNode","AnimatedTransform","constructor","toString","__onEvaluate","_transform.map$argument_0"],"mappings":"AAA;ACI;yBCG;GDgB;CDE;AGE;oBCE;GDO;CHE;OKE;CLS;AME;ECC;GDO;EEE;GFE;EGE;+BCC;KDS;GHC;CNC"}},"type":"js/module"}]}