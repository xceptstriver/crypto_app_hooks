{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Bezier = void 0;\n\n  var Bezier = function () {\n    var _f = function _f(mX1, mY1, mX2, mY2) {\n      var NEWTON_ITERATIONS = 4;\n      var NEWTON_MIN_SLOPE = 0.001;\n      var SUBDIVISION_PRECISION = 0.0000001;\n      var SUBDIVISION_MAX_ITERATIONS = 10;\n      var kSplineTableSize = 11;\n      var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n      var A = function () {\n        var _f = function _f(aA1, aA2) {\n          return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n        };\n\n        _f._closure = {};\n        _f.asString = \"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\";\n        _f.__workletHash = 7696928702327;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (25:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var B = function () {\n        var _f = function _f(aA1, aA2) {\n          return 3.0 * aA2 - 6.0 * aA1;\n        };\n\n        _f._closure = {};\n        _f.asString = \"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\";\n        _f.__workletHash = 3169786778773;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (29:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var C = function () {\n        var _f = function _f(aA1) {\n          return 3.0 * aA1;\n        };\n\n        _f._closure = {};\n        _f.asString = \"function C(aA1){return 3.0*aA1;}\";\n        _f.__workletHash = 6399610653367;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (33:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var calcBezier = function () {\n        var _f = function _f(aT, aA1, aA2) {\n          return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n        };\n\n        _f._closure = {\n          A: A,\n          B: B,\n          C: C\n        };\n        _f.asString = \"function calcBezier(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}}\";\n        _f.__workletHash = 3153137150968;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (39:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var getSlope = function () {\n        var _f = function _f(aT, aA1, aA2) {\n          return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n        };\n\n        _f._closure = {\n          A: A,\n          B: B,\n          C: C\n        };\n        _f.asString = \"function getSlope(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}}\";\n        _f.__workletHash = 17050227570308;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (45:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var binarySubdivide = function () {\n        var _f = function _f(aX, aA, aB, mX1, mX2) {\n          var currentX;\n          var currentT;\n          var i = 0;\n\n          do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n            if (currentX > 0.0) {\n              aB = currentT;\n            } else {\n              aA = currentT;\n            }\n          } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n          return currentT;\n        };\n\n        _f._closure = {\n          SUBDIVISION_PRECISION: SUBDIVISION_PRECISION,\n          SUBDIVISION_MAX_ITERATIONS: SUBDIVISION_MAX_ITERATIONS,\n          calcBezier: calcBezier\n        };\n        _f.asString = \"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=jsThis._closure;{var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}}\";\n        _f.__workletHash = 8216390185547;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (50:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var newtonRaphsonIterate = function () {\n        var _f = function _f(aX, aGuessT, mX1, mX2) {\n          for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n            var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n            if (currentSlope === 0.0) {\n              return aGuessT;\n            }\n\n            var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n          }\n\n          return aGuessT;\n        };\n\n        _f._closure = {\n          NEWTON_ITERATIONS: NEWTON_ITERATIONS,\n          getSlope: getSlope,\n          calcBezier: calcBezier\n        };\n        _f.asString = \"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=jsThis._closure;{for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}}\";\n        _f.__workletHash = 5901993849860;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (76:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      var LinearEasing = function () {\n        var _f = function _f(x) {\n          return x;\n        };\n\n        _f._closure = {};\n        _f.asString = \"function LinearEasing(x){return x;}\";\n        _f.__workletHash = 3962143445177;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (94:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new Error('bezier x values must be in [0, 1] range');\n      }\n\n      if (mX1 === mY1 && mX2 === mY2) {\n        return LinearEasing;\n      }\n\n      var sampleValues = new Array(kSplineTableSize);\n\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n\n      var getTForX = function () {\n        var _f = function _f(aX) {\n          var intervalStart = 0.0;\n          var currentSample = 1;\n          var lastSample = kSplineTableSize - 1;\n\n          for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n          }\n\n          --currentSample;\n          var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n          var guessForT = intervalStart + dist * kSampleStepSize;\n          var initialSlope = getSlope(guessForT, mX1, mX2);\n\n          if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n          } else if (initialSlope === 0.0) {\n            return guessForT;\n          } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n          }\n        };\n\n        _f._closure = {\n          kSplineTableSize: kSplineTableSize,\n          sampleValues: sampleValues,\n          kSampleStepSize: kSampleStepSize,\n          getSlope: getSlope,\n          mX1: mX1,\n          mX2: mX2,\n          NEWTON_MIN_SLOPE: NEWTON_MIN_SLOPE,\n          newtonRaphsonIterate: newtonRaphsonIterate,\n          binarySubdivide: binarySubdivide\n        };\n        _f.asString = \"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=jsThis._closure;{var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}}\";\n        _f.__workletHash = 10148290284160;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (121:2)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n\n      return function () {\n        var _f = function _f(x) {\n          if (mX1 === mY1 && mX2 === mY2) {\n            return x;\n          }\n\n          if (x === 0) {\n            return 0;\n          }\n\n          if (x === 1) {\n            return 1;\n          }\n\n          return calcBezier(getTForX(x), mY1, mY2);\n        };\n\n        _f._closure = {\n          mX1: mX1,\n          mY1: mY1,\n          mX2: mX2,\n          mY2: mY2,\n          calcBezier: calcBezier,\n          getTForX: getTForX\n        };\n        _f.asString = \"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=jsThis._closure;{if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}}\";\n        _f.__workletHash = 8676971518933;\n        _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (158:9)\";\n\n        global.__reanimatedWorkletInit(_f);\n\n        return _f;\n      }();\n    };\n\n    _f._closure = {};\n    _f.asString = \"function Bezier(mX1,mY1,mX2,mY2){var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var A=function(){var _f=function _f(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;};_f._closure={};_f.asString=\\\"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\\\";_f.__workletHash=7696928702327;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (25:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();var B=function(){var _f=function _f(aA1,aA2){return 3.0*aA2-6.0*aA1;};_f._closure={};_f.asString=\\\"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\\\";_f.__workletHash=3169786778773;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (29:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();var C=function(){var _f=function _f(aA1){return 3.0*aA1;};_f._closure={};_f.asString=\\\"function C(aA1){return 3.0*aA1;}\\\";_f.__workletHash=6399610653367;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (33:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();var calcBezier=function(){var _f=function _f(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;};_f._closure={A:A,B:B,C:C};_f.asString=\\\"function calcBezier(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}}\\\";_f.__workletHash=3153137150968;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (39:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();var getSlope=function(){var _f=function _f(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);};_f._closure={A:A,B:B,C:C};_f.asString=\\\"function getSlope(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}}\\\";_f.__workletHash=17050227570308;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (45:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();var binarySubdivide=function(){var _f=function _f(aX,aA,aB,mX1,mX2){var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;};_f._closure={SUBDIVISION_PRECISION:SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS:SUBDIVISION_MAX_ITERATIONS,calcBezier:calcBezier};_f.asString=\\\"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=jsThis._closure;{var currentX;var currentT;var i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}}\\\";_f.__workletHash=8216390185547;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (50:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();var newtonRaphsonIterate=function(){var _f=function _f(aX,aGuessT,mX1,mX2){for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;};_f._closure={NEWTON_ITERATIONS:NEWTON_ITERATIONS,getSlope:getSlope,calcBezier:calcBezier};_f.asString=\\\"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=jsThis._closure;{for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}}\\\";_f.__workletHash=5901993849860;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (76:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();var LinearEasing=function(){var _f=function _f(x){return x;};_f._closure={};_f.asString=\\\"function LinearEasing(x){return x;}\\\";_f.__workletHash=3962143445177;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (94:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}var sampleValues=new Array(kSplineTableSize);for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}var getTForX=function(){var _f=function _f(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}};_f._closure={kSplineTableSize:kSplineTableSize,sampleValues:sampleValues,kSampleStepSize:kSampleStepSize,getSlope:getSlope,mX1:mX1,mX2:mX2,NEWTON_MIN_SLOPE:NEWTON_MIN_SLOPE,newtonRaphsonIterate:newtonRaphsonIterate,binarySubdivide:binarySubdivide};_f.asString=\\\"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=jsThis._closure;{var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}}\\\";_f.__workletHash=10148290284160;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (121:2)\\\";global.__reanimatedWorkletInit(_f);return _f;}();return function(){var _f=function _f(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};_f._closure={mX1:mX1,mY1:mY1,mX2:mX2,mY2:mY2,calcBezier:calcBezier,getTForX:getTForX};_f.asString=\\\"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=jsThis._closure;{if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}}\\\";_f.__workletHash=8676971518933;_f.__location=\\\"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (158:9)\\\";global.__reanimatedWorkletInit(_f);return _f;}();}\";\n    _f.__workletHash = 1814897967313;\n    _f.__location = \"/home/moglix/crypto_app_hooks/node_modules/react-native-reanimated/src/reanimated2/Bezier.ts (9:7)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n\n  exports.Bezier = Bezier;\n});","lineCount":282,"map":[[7,6,9,16,"Bezier"],[7,12],[8,25,10,2,"mX1"],[8,28],[8,30,11,2,"mY1"],[8,33],[8,35,12,2,"mX2"],[8,38],[8,40,13,2,"mY2"],[8,43],[8,45,14,25],[9,0,17,2],[9,10,17,8,"NEWTON_ITERATIONS"],[9,27,17,25],[9,30,17,28],[9,31,17,2],[10,0,18,2],[10,10,18,8,"NEWTON_MIN_SLOPE"],[10,26,18,24],[10,29,18,27],[10,34,18,2],[11,0,19,2],[11,10,19,8,"SUBDIVISION_PRECISION"],[11,31,19,29],[11,34,19,32],[11,43,19,2],[12,0,20,2],[12,10,20,8,"SUBDIVISION_MAX_ITERATIONS"],[12,36,20,34],[12,39,20,37],[12,41,20,2],[13,0,22,2],[13,10,22,8,"kSplineTableSize"],[13,26,22,24],[13,29,22,27],[13,31,22,2],[14,0,23,2],[14,10,23,8,"kSampleStepSize"],[14,25,23,23],[14,28,23,26],[14,35,23,33,"kSplineTableSize"],[14,51,23,49],[14,54,23,52],[14,57,23,26],[14,58,23,2],[16,0,14,25],[16,10,25,11,"A"],[16,11,14,25],[17,0,14,25],[17,29,25,13,"aA1"],[17,32,14,25],[17,34,25,26,"aA2"],[17,37,14,25],[17,39,25,47],[18,0,27,4],[18,17,27,11],[18,23,27,17],[18,29,27,23,"aA2"],[18,32,27,11],[18,35,27,29],[18,41,27,35,"aA1"],[18,44,27,4],[19,0,28,3],[19,9,14,25],[21,0,14,25],[22,0,14,25],[23,0,14,25],[24,0,14,25],[26,0,14,25],[28,0,14,25],[29,0,14,25],[31,0,14,25],[31,10,29,11,"B"],[31,11,14,25],[32,0,14,25],[32,29,29,13,"aA1"],[32,32,14,25],[32,34,29,26,"aA2"],[32,37,14,25],[32,39,29,47],[33,0,31,4],[33,17,31,11],[33,23,31,17,"aA2"],[33,26,31,11],[33,29,31,23],[33,35,31,29,"aA1"],[33,38,31,4],[34,0,32,3],[34,9,14,25],[36,0,14,25],[37,0,14,25],[38,0,14,25],[39,0,14,25],[41,0,14,25],[43,0,14,25],[44,0,14,25],[46,0,14,25],[46,10,33,11,"C"],[46,11,14,25],[47,0,14,25],[47,29,33,13,"aA1"],[47,32,14,25],[47,34,33,26],[48,0,35,4],[48,17,35,11],[48,23,35,17,"aA1"],[48,26,35,4],[49,0,36,3],[49,9,14,25],[51,0,14,25],[52,0,14,25],[53,0,14,25],[54,0,14,25],[56,0,14,25],[58,0,14,25],[59,0,14,25],[61,0,14,25],[61,10,39,11,"calcBezier"],[61,20,14,25],[62,0,14,25],[62,29,39,22,"aT"],[62,31,14,25],[62,33,39,34,"aA1"],[62,36,14,25],[62,38,39,47,"aA2"],[62,41,14,25],[62,43,39,68],[63,0,41,4],[63,17,41,11],[63,18,41,12],[63,19,41,13,"A"],[63,20,41,14],[63,21,41,15,"aA1"],[63,24,41,14],[63,26,41,20,"aA2"],[63,29,41,14],[63,30,41,13],[63,33,41,27,"aT"],[63,35,41,13],[63,38,41,32,"B"],[63,39,41,33],[63,40,41,34,"aA1"],[63,43,41,33],[63,45,41,39,"aA2"],[63,48,41,33],[63,49,41,12],[63,53,41,47,"aT"],[63,55,41,12],[63,58,41,52,"C"],[63,59,41,53],[63,60,41,54,"aA1"],[63,63,41,53],[63,64,41,11],[63,68,41,62,"aT"],[63,70,41,4],[64,0,42,3],[64,9,14,25],[66,0,14,25],[67,0,14,25],[67,13,6,11,"A"],[67,14,14,25],[68,0,14,25],[68,13,6,30,"B"],[68,14,14,25],[69,0,14,25],[69,13,6,50,"C"],[70,0,14,25],[71,0,14,25],[72,0,14,25],[73,0,14,25],[75,0,14,25],[77,0,14,25],[78,0,14,25],[80,0,14,25],[80,10,45,11,"getSlope"],[80,18,14,25],[81,0,14,25],[81,29,45,20,"aT"],[81,31,14,25],[81,33,45,32,"aA1"],[81,36,14,25],[81,38,45,45,"aA2"],[81,41,14,25],[81,43,45,66],[82,0,47,4],[82,17,47,11],[82,23,47,17,"A"],[82,24,47,18],[82,25,47,19,"aA1"],[82,28,47,18],[82,30,47,24,"aA2"],[82,33,47,18],[82,34,47,11],[82,37,47,31,"aT"],[82,39,47,11],[82,42,47,36,"aT"],[82,44,47,11],[82,47,47,41],[82,53,47,47,"B"],[82,54,47,48],[82,55,47,49,"aA1"],[82,58,47,48],[82,60,47,54,"aA2"],[82,63,47,48],[82,64,47,41],[82,67,47,61,"aT"],[82,69,47,11],[82,72,47,66,"C"],[82,73,47,67],[82,74,47,68,"aA1"],[82,77,47,67],[82,78,47,4],[83,0,48,3],[83,9,14,25],[85,0,14,25],[86,0,14,25],[86,13,6,15,"A"],[86,14,14,25],[87,0,14,25],[87,13,6,45,"B"],[87,14,14,25],[88,0,14,25],[88,13,6,64,"C"],[89,0,14,25],[90,0,14,25],[91,0,14,25],[92,0,14,25],[94,0,14,25],[96,0,14,25],[97,0,14,25],[99,0,14,25],[99,10,50,11,"binarySubdivide"],[99,25,14,25],[100,0,14,25],[100,29,51,4,"aX"],[100,31,14,25],[100,33,52,4,"aA"],[100,35,14,25],[100,37,53,4,"aB"],[100,39,14,25],[100,41,54,4,"mX1"],[100,44,14,25],[100,46,55,4,"mX2"],[100,49,14,25],[100,51,56,12],[101,0,58,4],[101,14,58,8,"currentX"],[101,22,58,4],[102,0,59,4],[102,14,59,8,"currentT"],[102,22,59,4],[103,0,60,4],[103,14,60,8,"i"],[103,15,60,9],[103,18,60,12],[103,19,60,4],[105,0,61,4],[105,13,61,7],[106,0,62,6,"currentT"],[106,12,62,6,"currentT"],[106,20,62,14],[106,23,62,17,"aA"],[106,25,62,19],[106,28,62,22],[106,29,62,23,"aB"],[106,31,62,25],[106,34,62,28,"aA"],[106,36,62,22],[106,40,62,34],[106,43,62,6],[107,0,63,6,"currentX"],[107,12,63,6,"currentX"],[107,20,63,14],[107,23,63,17,"calcBezier"],[107,33,63,27],[107,34,63,28,"currentT"],[107,42,63,27],[107,44,63,38,"mX1"],[107,47,63,27],[107,49,63,43,"mX2"],[107,52,63,27],[107,53,63,17],[107,56,63,50,"aX"],[107,58,63,6],[109,0,64,6],[109,16,64,10,"currentX"],[109,24,64,18],[109,27,64,21],[109,30,64,6],[109,32,64,26],[110,0,65,8,"aB"],[110,14,65,8,"aB"],[110,16,65,10],[110,19,65,13,"currentT"],[110,27,65,8],[111,0,66,7],[111,13,64,6],[111,19,66,13],[112,0,67,8,"aA"],[112,14,67,8,"aA"],[112,16,67,10],[112,19,67,13,"currentT"],[112,27,67,8],[113,0,68,7],[114,0,69,5],[114,11,61,4],[114,19,70,6,"Math"],[114,23,70,10],[114,24,70,11,"abs"],[114,27,70,6],[114,28,70,15,"currentX"],[114,36,70,6],[114,40,70,27,"SUBDIVISION_PRECISION"],[114,61,70,6],[114,65,71,6],[114,67,71,8,"i"],[114,68,71,6],[114,71,71,12,"SUBDIVISION_MAX_ITERATIONS"],[114,97,61,4],[116,0,73,4],[116,17,73,11,"currentT"],[116,25,73,4],[117,0,74,3],[117,9,14,25],[119,0,14,25],[120,0,14,25],[120,33,18,32,"SUBDIVISION_PRECISION"],[120,54,14,25],[121,0,14,25],[121,38,18,63,"SUBDIVISION_MAX_ITERATIONS"],[121,64,14,25],[122,0,14,25],[122,22,11,15,"calcBezier"],[123,0,14,25],[124,0,14,25],[125,0,14,25],[126,0,14,25],[128,0,14,25],[130,0,14,25],[131,0,14,25],[133,0,14,25],[133,10,76,11,"newtonRaphsonIterate"],[133,30,14,25],[134,0,14,25],[134,29,77,4,"aX"],[134,31,14,25],[134,33,78,4,"aGuessT"],[134,40,14,25],[134,42,79,4,"mX1"],[134,45,14,25],[134,47,80,4,"mX2"],[134,50,14,25],[134,52,81,12],[135,0,83,4],[135,15,83,9],[135,19,83,13,"i"],[135,20,83,14],[135,23,83,17],[135,24,83,4],[135,26,83,20,"i"],[135,27,83,21],[135,30,83,24,"NEWTON_ITERATIONS"],[135,47,83,4],[135,49,83,43],[135,51,83,45,"i"],[135,52,83,4],[135,54,83,48],[136,0,84,6],[136,16,84,12,"currentSlope"],[136,28,84,24],[136,31,84,27,"getSlope"],[136,39,84,35],[136,40,84,36,"aGuessT"],[136,47,84,35],[136,49,84,45,"mX1"],[136,52,84,35],[136,54,84,50,"mX2"],[136,57,84,35],[136,58,84,6],[138,0,85,6],[138,16,85,10,"currentSlope"],[138,28,85,22],[138,33,85,27],[138,36,85,6],[138,38,85,32],[139,0,86,8],[139,21,86,15,"aGuessT"],[139,28,86,8],[140,0,87,7],[142,0,88,6],[142,16,88,12,"currentX"],[142,24,88,20],[142,27,88,23,"calcBezier"],[142,37,88,33],[142,38,88,34,"aGuessT"],[142,45,88,33],[142,47,88,43,"mX1"],[142,50,88,33],[142,52,88,48,"mX2"],[142,55,88,33],[142,56,88,23],[142,59,88,55,"aX"],[142,61,88,6],[143,0,89,6,"aGuessT"],[143,12,89,6,"aGuessT"],[143,19,89,13],[143,23,89,17,"currentX"],[143,31,89,25],[143,34,89,28,"currentSlope"],[143,46,89,6],[144,0,90,5],[146,0,91,4],[146,17,91,11,"aGuessT"],[146,24,91,4],[147,0,92,3],[147,9,14,25],[149,0,14,25],[150,0,14,25],[150,29,5,22,"NEWTON_ITERATIONS"],[150,46,14,25],[151,0,14,25],[151,20,6,23,"getSlope"],[151,28,14,25],[152,0,14,25],[152,22,12,19,"calcBezier"],[153,0,14,25],[154,0,14,25],[155,0,14,25],[156,0,14,25],[158,0,14,25],[160,0,14,25],[161,0,14,25],[163,0,14,25],[163,10,94,11,"LinearEasing"],[163,22,14,25],[164,0,14,25],[164,29,94,24,"x"],[164,30,14,25],[164,32,94,43],[165,0,96,4],[165,17,96,11,"x"],[165,18,96,4],[166,0,97,3],[166,9,14,25],[168,0,14,25],[169,0,14,25],[170,0,14,25],[171,0,14,25],[173,0,14,25],[175,0,14,25],[176,0,14,25],[178,0,99,2],[178,10,99,6],[178,12,99,8,"mX1"],[178,15,99,11],[178,19,99,15],[178,20,99,8],[178,24,99,20,"mX1"],[178,27,99,23],[178,31,99,27],[178,32,99,8],[178,36,99,32,"mX2"],[178,39,99,35],[178,43,99,39],[178,44,99,8],[178,48,99,44,"mX2"],[178,51,99,47],[178,55,99,51],[178,56,99,6],[178,57,99,2],[178,59,99,55],[179,0,100,4],[179,14,100,10],[179,18,100,14,"Error"],[179,23,100,10],[179,24,100,20],[179,65,100,10],[179,66,100,4],[180,0,101,3],[182,0,103,2],[182,10,103,6,"mX1"],[182,13,103,9],[182,18,103,14,"mY1"],[182,21,103,6],[182,25,103,21,"mX2"],[182,28,103,24],[182,33,103,29,"mY2"],[182,36,103,2],[182,38,103,34],[183,0,104,4],[183,15,104,11,"LinearEasing"],[183,27,104,4],[184,0,105,3],[186,0,115,2],[186,10,115,8,"sampleValues"],[186,22,115,20],[186,25,115,23],[186,29,115,27,"Array"],[186,34,115,23],[186,35,115,33,"kSplineTableSize"],[186,51,115,23],[186,52,115,2],[188,0,117,2],[188,11,117,7],[188,15,117,11,"i"],[188,16,117,12],[188,19,117,15],[188,20,117,2],[188,22,117,18,"i"],[188,23,117,19],[188,26,117,22,"kSplineTableSize"],[188,42,117,2],[188,44,117,40],[188,46,117,42,"i"],[188,47,117,2],[188,49,117,45],[189,0,118,4,"sampleValues"],[189,8,118,4,"sampleValues"],[189,20,118,16],[189,21,118,17,"i"],[189,22,118,16],[189,23,118,4],[189,26,118,22,"calcBezier"],[189,36,118,32],[189,37,118,33,"i"],[189,38,118,34],[189,41,118,37,"kSampleStepSize"],[189,56,118,32],[189,58,118,54,"mX1"],[189,61,118,32],[189,63,118,59,"mX2"],[189,66,118,32],[189,67,118,4],[190,0,119,3],[192,0,14,25],[192,10,121,11,"getTForX"],[192,18,14,25],[193,0,14,25],[193,29,121,20,"aX"],[193,31,14,25],[193,33,121,40],[194,0,123,4],[194,14,123,8,"intervalStart"],[194,27,123,21],[194,30,123,24],[194,33,123,4],[195,0,124,4],[195,14,124,8,"currentSample"],[195,27,124,21],[195,30,124,24],[195,31,124,4],[196,0,125,4],[196,14,125,10,"lastSample"],[196,24,125,20],[196,27,125,23,"kSplineTableSize"],[196,43,125,39],[196,46,125,42],[196,47,125,4],[198,0,127,4],[198,17,129,6,"currentSample"],[198,30,129,19],[198,35,129,24,"lastSample"],[198,45,129,6],[198,49,129,38,"sampleValues"],[198,61,129,50],[198,62,129,51,"currentSample"],[198,75,129,50],[198,76,129,38],[198,80,129,69,"aX"],[198,82,127,4],[198,84,130,6],[198,86,130,8,"currentSample"],[198,99,127,4],[198,101,131,6],[199,0,132,6,"intervalStart"],[199,12,132,6,"intervalStart"],[199,25,132,19],[199,29,132,23,"kSampleStepSize"],[199,44,132,6],[200,0,133,5],[202,0,134,4],[202,12,134,6,"currentSample"],[202,25,134,4],[203,0,137,4],[203,14,137,10,"dist"],[203,18,137,14],[203,21,138,6],[203,22,138,7,"aX"],[203,24,138,9],[203,27,138,12,"sampleValues"],[203,39,138,24],[203,40,138,25,"currentSample"],[203,53,138,24],[203,54,138,6],[203,59,139,7,"sampleValues"],[203,71,139,19],[203,72,139,20,"currentSample"],[203,85,139,33],[203,88,139,36],[203,89,139,19],[203,90,139,7],[203,93,139,41,"sampleValues"],[203,105,139,53],[203,106,139,54,"currentSample"],[203,119,139,53],[203,120,138,6],[203,121,137,4],[204,0,140,4],[204,14,140,10,"guessForT"],[204,23,140,19],[204,26,140,22,"intervalStart"],[204,39,140,35],[204,42,140,38,"dist"],[204,46,140,42],[204,49,140,45,"kSampleStepSize"],[204,64,140,4],[205,0,142,4],[205,14,142,10,"initialSlope"],[205,26,142,22],[205,29,142,25,"getSlope"],[205,37,142,33],[205,38,142,34,"guessForT"],[205,47,142,33],[205,49,142,45,"mX1"],[205,52,142,33],[205,54,142,50,"mX2"],[205,57,142,33],[205,58,142,4],[207,0,143,4],[207,14,143,8,"initialSlope"],[207,26,143,20],[207,30,143,24,"NEWTON_MIN_SLOPE"],[207,46,143,4],[207,48,143,42],[208,0,144,6],[208,19,144,13,"newtonRaphsonIterate"],[208,39,144,33],[208,40,144,34,"aX"],[208,42,144,33],[208,44,144,38,"guessForT"],[208,53,144,33],[208,55,144,49,"mX1"],[208,58,144,33],[208,60,144,54,"mX2"],[208,63,144,33],[208,64,144,6],[209,0,145,5],[209,11,143,4],[209,17,145,11],[209,21,145,15,"initialSlope"],[209,33,145,27],[209,38,145,32],[209,41,145,11],[209,43,145,37],[210,0,146,6],[210,19,146,13,"guessForT"],[210,28,146,6],[211,0,147,5],[211,11,145,11],[211,17,147,11],[212,0,148,6],[212,19,148,13,"binarySubdivide"],[212,34,148,28],[212,35,149,8,"aX"],[212,37,148,28],[212,39,150,8,"intervalStart"],[212,52,148,28],[212,54,151,8,"intervalStart"],[212,67,151,21],[212,70,151,24,"kSampleStepSize"],[212,85,148,28],[212,87,152,8,"mX1"],[212,90,148,28],[212,92,153,8,"mX2"],[212,95,148,28],[212,96,148,6],[213,0,155,5],[214,0,156,3],[214,9,14,25],[216,0,14,25],[217,0,14,25],[217,28,7,19,"kSplineTableSize"],[217,44,14,25],[218,0,14,25],[218,24,15,85,"sampleValues"],[218,36,14,25],[219,0,14,25],[219,27,24,62,"kSampleStepSize"],[219,42,14,25],[220,0,14,25],[220,20,17,21,"getSlope"],[220,28,14,25],[221,0,14,25],[221,15,24,79,"mX1"],[221,18,14,25],[222,0,14,25],[222,15,24,84,"mX2"],[222,18,14,25],[223,0,14,25],[223,28,19,22,"NEWTON_MIN_SLOPE"],[223,44,14,25],[224,0,14,25],[224,32,20,11,"newtonRaphsonIterate"],[224,52,14,25],[225,0,14,25],[225,27,24,11,"binarySubdivide"],[226,0,14,25],[227,0,14,25],[228,0,14,25],[229,0,14,25],[231,0,14,25],[233,0,14,25],[234,0,14,25],[236,0,158,2],[237,0,158,2],[237,29,158,31,"x"],[237,30,158,2],[237,32,158,34],[238,0,160,4],[238,14,160,8,"mX1"],[238,17,160,11],[238,22,160,16,"mY1"],[238,25,160,8],[238,29,160,23,"mX2"],[238,32,160,26],[238,37,160,31,"mY2"],[238,40,160,4],[238,42,160,36],[239,0,161,6],[239,19,161,13,"x"],[239,20,161,6],[240,0,162,5],[242,0,164,4],[242,14,164,8,"x"],[242,15,164,9],[242,20,164,14],[242,21,164,4],[242,23,164,17],[243,0,165,6],[243,19,165,13],[243,20,165,6],[244,0,166,5],[246,0,167,4],[246,14,167,8,"x"],[246,15,167,9],[246,20,167,14],[246,21,167,4],[246,23,167,17],[247,0,168,6],[247,19,168,13],[247,20,168,6],[248,0,169,5],[250,0,170,4],[250,17,170,11,"calcBezier"],[250,27,170,21],[250,28,170,22,"getTForX"],[250,36,170,30],[250,37,170,31,"x"],[250,38,170,30],[250,39,170,21],[250,41,170,35,"mY1"],[250,44,170,21],[250,46,170,40,"mY2"],[250,49,170,21],[250,50,170,4],[251,0,171,3],[251,9,158,2],[253,0,158,2],[254,0,158,2],[254,15,5,6,"mX1"],[254,18,158,2],[255,0,158,2],[255,15,18,33,"mY1"],[255,18,158,2],[256,0,158,2],[256,15,5,21,"mX2"],[256,18,158,2],[257,0,158,2],[257,15,18,38,"mY2"],[257,18,158,2],[258,0,158,2],[258,22,18,9,"calcBezier"],[258,32,158,2],[259,0,158,2],[259,20,18,20,"getTForX"],[260,0,158,2],[261,0,158,2],[262,0,158,2],[263,0,158,2],[265,0,158,2],[267,0,158,2],[268,0,158,2],[269,0,172,1],[269,5]],"functionMap":{"names":["<global>","Bezier","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","LinearEasing","getTForX","BezierEasing"],"mappings":"AAA;OCQ;ECgB;GDG;EEC;GFG;EGC;GHG;EIG;GJG;EKG;GLG;EME;GNwB;EOE;GPgB;EQE;GRG;ESwB;GTmC;SUE;GVa;CDC"}},"type":"js/module"}]}