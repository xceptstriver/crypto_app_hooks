{"dependencies":[{"name":"./match-graph","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":22},"end":{"line":14,"column":66}},{"start":{"line":15,"column":36},"end":{"line":15,"column":106}},{"start":{"line":171,"column":31},"end":{"line":171,"column":59}},{"start":{"line":192,"column":31},"end":{"line":192,"column":70}}]}},{"name":"../definition-syntax/generate","data":{"asyncType":null,"locs":[{"start":{"line":24,"column":18},"end":{"line":24,"column":66}},{"start":{"line":39,"column":22},"end":{"line":39,"column":66}}]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":34,"column":54},"end":{"line":43,"column":5}}]}},{"name":"./trace","data":{"asyncType":null,"locs":[{"start":{"line":63,"column":18},"end":{"line":63,"column":32}},{"start":{"line":64,"column":16},"end":{"line":64,"column":28}},{"start":{"line":65,"column":20},"end":{"line":65,"column":36}},{"start":{"line":66,"column":19},"end":{"line":66,"column":34}}]}},{"name":"./prepare-tokens","data":{"asyncType":null,"locs":[{"start":{"line":71,"column":17},"end":{"line":71,"column":51}}]}},{"name":"./match","data":{"asyncType":null,"locs":[{"start":{"line":79,"column":17},"end":{"line":79,"column":68}},{"start":{"line":83,"column":17},"end":{"line":83,"column":57}}]}},{"name":"./error","data":{"asyncType":null,"locs":[{"start":{"line":87,"column":16},"end":{"line":87,"column":81}},{"start":{"line":240,"column":19},"end":{"line":240,"column":80}},{"start":{"line":276,"column":19},"end":{"line":276,"column":89}},{"start":{"line":288,"column":19},"end":{"line":288,"column":77}},{"start":{"line":337,"column":42},"end":{"line":337,"column":92}},{"start":{"line":344,"column":42},"end":{"line":344,"column":80}}]}},{"name":"./structure","data":{"asyncType":null,"locs":[{"start":{"line":103,"column":34},"end":{"line":103,"column":64}}]}},{"name":"./generic","data":{"asyncType":null,"locs":[{"start":{"line":114,"column":12},"end":{"line":116,"column":13}},{"start":{"line":115,"column":36},"end":{"line":115,"column":49}},{"start":{"line":233,"column":23},"end":{"line":233,"column":55}}]}},{"name":"../definition-syntax/parse","data":{"asyncType":null,"locs":[{"start":{"line":178,"column":35},"end":{"line":178,"column":48}}]}},{"name":"../utils/names","data":{"asyncType":null,"locs":[{"start":{"line":268,"column":25},"end":{"line":268,"column":38}},{"start":{"line":280,"column":23},"end":{"line":280,"column":37}},{"start":{"line":313,"column":25},"end":{"line":313,"column":38}},{"start":{"line":374,"column":21},"end":{"line":374,"column":34}},{"start":{"line":392,"column":23},"end":{"line":392,"column":37}}]}},{"name":"./search","data":{"asyncType":null,"locs":[{"start":{"line":355,"column":15},"end":{"line":355,"column":36}},{"start":{"line":358,"column":15},"end":{"line":358,"column":36}}]}},{"name":"../definition-syntax/walk","data":{"asyncType":null,"locs":[{"start":{"line":411,"column":16},"end":{"line":422,"column":24}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var cssWideKeywords = _$$_REQUIRE(_dependencyMap[0], \"./match-graph\").buildMatchGraph('inherit | initial | unset');\n\n  var cssWideKeywordsWithExpression = _$$_REQUIRE(_dependencyMap[0], \"./match-graph\").buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\n  function dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var name in map) {\n      if (map[name].syntax) {\n        result[name] = syntaxAsAst ? map[name].syntax : _$$_REQUIRE(_dependencyMap[1], \"../definition-syntax/generate\")(map[name].syntax, {\n          compact: compact\n        });\n      }\n    }\n\n    return result;\n  }\n\n  function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var _i = 0, _Object$entries = Object.entries(map); _i < _Object$entries.length; _i++) {\n      var _ref = _Object$entries[_i];\n\n      var _ref2 = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\")(_ref, 2);\n\n      var name = _ref2[0];\n      var atrule = _ref2[1];\n      result[name] = {\n        prelude: atrule.prelude && (syntaxAsAst ? atrule.prelude.syntax : _$$_REQUIRE(_dependencyMap[1], \"../definition-syntax/generate\")(atrule.prelude.syntax, {\n          compact: compact\n        })),\n        descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n      };\n    }\n\n    return result;\n  }\n\n  function valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n      if (tokens[i].value.toLowerCase() === 'var(') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function buildMatchResult(match, error, iterations) {\n    return {\n      matched: match,\n      iterations: iterations,\n      error: error,\n      getTrace: _$$_REQUIRE(_dependencyMap[3], \"./trace\").getTrace,\n      isType: _$$_REQUIRE(_dependencyMap[3], \"./trace\").isType,\n      isProperty: _$$_REQUIRE(_dependencyMap[3], \"./trace\").isProperty,\n      isKeyword: _$$_REQUIRE(_dependencyMap[3], \"./trace\").isKeyword\n    };\n  }\n\n  function matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = _$$_REQUIRE(_dependencyMap[4], \"./prepare-tokens\")(value, lexer.syntax);\n\n    var result;\n\n    if (valueHasVar(tokens)) {\n      return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCommon) {\n      result = _$$_REQUIRE(_dependencyMap[5], \"./match\").matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n\n    if (!useCommon || !result.match) {\n      result = _$$_REQUIRE(_dependencyMap[5], \"./match\").matchAsTree(tokens, syntax.match, lexer);\n\n      if (!result.match) {\n        return buildMatchResult(null, new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxMatchError)(result.reason, syntax.syntax, value, result), result.iterations);\n      }\n    }\n\n    return buildMatchResult(result.match, null, result.iterations);\n  }\n\n  var Lexer = function Lexer(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.atrules = {};\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || _$$_REQUIRE(_dependencyMap[7], \"./structure\").getStructureFromConfig(config);\n\n    if (config) {\n      if (config.types) {\n        for (var name in config.types) {\n          this.addType_(name, config.types[name]);\n        }\n      }\n\n      if (config.generic) {\n        this.generic = true;\n\n        for (var name in _$$_REQUIRE(_dependencyMap[8], \"./generic\")) {\n          this.addType_(name, _$$_REQUIRE(_dependencyMap[8], \"./generic\")[name]);\n        }\n      }\n\n      if (config.atrules) {\n        for (var name in config.atrules) {\n          this.addAtrule_(name, config.atrules[name]);\n        }\n      }\n\n      if (config.properties) {\n        for (var name in config.properties) {\n          this.addProperty_(name, config.properties[name]);\n        }\n      }\n    }\n  };\n\n  Lexer.prototype = {\n    structure: {},\n    checkStructure: function checkStructure(ast) {\n      function collectWarning(node, message) {\n        warns.push({\n          node: node,\n          message: message\n        });\n      }\n\n      var structure = this.structure;\n      var warns = [];\n      this.syntax.walk(ast, function (node) {\n        if (structure.hasOwnProperty(node.type)) {\n          structure[node.type].check(node, collectWarning);\n        } else {\n          collectWarning(node, 'Unknown node type `' + node.type + '`');\n        }\n      });\n      return warns.length ? warns : false;\n    },\n    createDescriptor: function createDescriptor(syntax, type, name) {\n      var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var ref = {\n        type: type,\n        name: name\n      };\n      var descriptor = {\n        type: type,\n        name: name,\n        parent: parent,\n        syntax: null,\n        match: null\n      };\n\n      if (typeof syntax === 'function') {\n        descriptor.match = _$$_REQUIRE(_dependencyMap[0], \"./match-graph\").buildMatchGraph(syntax, ref);\n      } else {\n        if (typeof syntax === 'string') {\n          Object.defineProperty(descriptor, 'syntax', {\n            get: function get() {\n              Object.defineProperty(descriptor, 'syntax', {\n                value: _$$_REQUIRE(_dependencyMap[9], \"../definition-syntax/parse\")(syntax)\n              });\n              return descriptor.syntax;\n            }\n          });\n        } else {\n          descriptor.syntax = syntax;\n        }\n\n        Object.defineProperty(descriptor, 'match', {\n          get: function get() {\n            Object.defineProperty(descriptor, 'match', {\n              value: _$$_REQUIRE(_dependencyMap[0], \"./match-graph\").buildMatchGraph(descriptor.syntax, ref)\n            });\n            return descriptor.match;\n          }\n        });\n      }\n\n      return descriptor;\n    },\n    addAtrule_: function addAtrule_(name, syntax) {\n      var _this = this;\n\n      if (!syntax) {\n        return;\n      }\n\n      this.atrules[name] = {\n        type: 'Atrule',\n        name: name,\n        prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n        descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce(function (res, descName) {\n          res[descName] = _this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n          return res;\n        }, {}) : null\n      };\n    },\n    addProperty_: function addProperty_(name, syntax) {\n      if (!syntax) {\n        return;\n      }\n\n      this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function addType_(name, syntax) {\n      if (!syntax) {\n        return;\n      }\n\n      this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n      if (syntax === _$$_REQUIRE(_dependencyMap[8], \"./generic\")['-ms-legacy-expression']) {\n        this.valueCommonSyntax = cssWideKeywordsWithExpression;\n      }\n    },\n    checkAtruleName: function checkAtruleName(atruleName) {\n      if (!this.getAtrule(atruleName)) {\n        return new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown at-rule', '@' + atruleName);\n      }\n    },\n    checkAtrulePrelude: function checkAtrulePrelude(atruleName, prelude) {\n      var error = this.checkAtruleName(atruleName);\n\n      if (error) {\n        return error;\n      }\n\n      var atrule = this.getAtrule(atruleName);\n\n      if (!atrule.prelude && prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n      }\n\n      if (atrule.prelude && !prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n      }\n    },\n    checkAtruleDescriptorName: function checkAtruleDescriptorName(atruleName, descriptorName) {\n      var error = this.checkAtruleName(atruleName);\n\n      if (error) {\n        return error;\n      }\n\n      var atrule = this.getAtrule(atruleName);\n\n      var descriptor = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").keyword(descriptorName);\n\n      if (!atrule.descriptors) {\n        return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n      }\n\n      if (!atrule.descriptors[descriptor.name] && !atrule.descriptors[descriptor.basename]) {\n        return new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown at-rule descriptor', descriptorName);\n      }\n    },\n    checkPropertyName: function checkPropertyName(propertyName) {\n      var property = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").property(propertyName);\n\n      if (property.custom) {\n        return new Error('Lexer matching doesn\\'t applicable for custom properties');\n      }\n\n      if (!this.getProperty(propertyName)) {\n        return new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown property', propertyName);\n      }\n    },\n    matchAtrulePrelude: function matchAtrulePrelude(atruleName, prelude) {\n      var error = this.checkAtrulePrelude(atruleName, prelude);\n\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n\n      if (!prelude) {\n        return buildMatchResult(null, null);\n      }\n\n      return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);\n    },\n    matchAtruleDescriptor: function matchAtruleDescriptor(atruleName, descriptorName, value) {\n      var error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n\n      var atrule = this.getAtrule(atruleName);\n\n      var descriptor = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").keyword(descriptorName);\n\n      return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);\n    },\n    matchDeclaration: function matchDeclaration(node) {\n      if (node.type !== 'Declaration') {\n        return buildMatchResult(null, new Error('Not a Declaration node'));\n      }\n\n      return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function matchProperty(propertyName, value) {\n      var error = this.checkPropertyName(propertyName);\n\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n\n      return matchSyntax(this, this.getProperty(propertyName), value, true);\n    },\n    matchType: function matchType(typeName, value) {\n      var typeSyntax = this.getType(typeName);\n\n      if (!typeSyntax) {\n        return buildMatchResult(null, new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Unknown type', typeName));\n      }\n\n      return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function match(syntax, value) {\n      if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n        return buildMatchResult(null, new (_$$_REQUIRE(_dependencyMap[6], \"./error\").SyntaxReferenceError)('Bad syntax'));\n      }\n\n      if (typeof syntax === 'string' || !syntax.match) {\n        syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n      }\n\n      return matchSyntax(this, syntax, value, false);\n    },\n    findValueFragments: function findValueFragments(propertyName, value, type, name) {\n      return _$$_REQUIRE(_dependencyMap[11], \"./search\").matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function findDeclarationValueFragments(declaration, type, name) {\n      return _$$_REQUIRE(_dependencyMap[11], \"./search\").matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function findAllFragments(ast, type, name) {\n      var result = [];\n      this.syntax.walk(ast, {\n        visit: 'Declaration',\n        enter: function (declaration) {\n          result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n        }.bind(this)\n      });\n      return result;\n    },\n    getAtrule: function getAtrule(atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var atrule = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").keyword(atruleName);\n\n      var atruleEntry = atrule.vendor && fallbackBasename ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];\n      return atruleEntry || null;\n    },\n    getAtrulePrelude: function getAtrulePrelude(atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var atrule = this.getAtrule(atruleName, fallbackBasename);\n      return atrule && atrule.prelude || null;\n    },\n    getAtruleDescriptor: function getAtruleDescriptor(atruleName, name) {\n      return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;\n    },\n    getProperty: function getProperty(propertyName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var property = _$$_REQUIRE(_dependencyMap[10], \"../utils/names\").property(propertyName);\n\n      var propertyEntry = property.vendor && fallbackBasename ? this.properties[property.name] || this.properties[property.basename] : this.properties[property.name];\n      return propertyEntry || null;\n    },\n    getType: function getType(name) {\n      return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n    validate: function validate() {\n      function validate(syntax, name, broken, descriptor) {\n        if (broken.hasOwnProperty(name)) {\n          return broken[name];\n        }\n\n        broken[name] = false;\n\n        if (descriptor.syntax !== null) {\n          _$$_REQUIRE(_dependencyMap[12], \"../definition-syntax/walk\")(descriptor.syntax, function (node) {\n            if (node.type !== 'Type' && node.type !== 'Property') {\n              return;\n            }\n\n            var map = node.type === 'Type' ? syntax.types : syntax.properties;\n            var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n            if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n              broken[name] = true;\n            }\n          }, this);\n        }\n      }\n\n      var brokenTypes = {};\n      var brokenProperties = {};\n\n      for (var key in this.types) {\n        validate(this, key, brokenTypes, this.types[key]);\n      }\n\n      for (var key in this.properties) {\n        validate(this, key, brokenProperties, this.properties[key]);\n      }\n\n      brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n        return brokenTypes[name];\n      });\n      brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n        return brokenProperties[name];\n      });\n\n      if (brokenTypes.length || brokenProperties.length) {\n        return {\n          types: brokenTypes,\n          properties: brokenProperties\n        };\n      }\n\n      return null;\n    },\n    dump: function dump(syntaxAsAst, pretty) {\n      return {\n        generic: this.generic,\n        types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n        properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n        atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n      };\n    },\n    toString: function toString() {\n      return JSON.stringify(this.dump());\n    }\n  };\n  module.exports = Lexer;\n});","lineCount":444,"map":[[2,0,14,0],[2,6,14,4,"cssWideKeywords"],[2,21,14,19],[2,24,14,22],[2,88,14,38],[2,115,14,22],[2,116,14,0],[4,0,15,0],[4,6,15,4,"cssWideKeywordsWithExpression"],[4,35,15,33],[4,38,15,36],[4,102,15,52],[4,155,15,36],[4,156,15,0],[6,0,17,0],[6,11,17,9,"dumpMapSyntax"],[6,24,17,0],[6,25,17,23,"map"],[6,28,17,0],[6,30,17,28,"compact"],[6,37,17,0],[6,39,17,37,"syntaxAsAst"],[6,50,17,0],[6,52,17,50],[7,0,18,4],[7,8,18,8,"result"],[7,14,18,14],[7,17,18,17],[7,19,18,4],[9,0,20,4],[9,9,20,9],[9,13,20,13,"name"],[9,17,20,4],[9,21,20,21,"map"],[9,24,20,4],[9,26,20,26],[10,0,21,8],[10,10,21,12,"map"],[10,13,21,15],[10,14,21,16,"name"],[10,18,21,15],[10,19,21,12],[10,20,21,22,"syntax"],[10,26,21,8],[10,28,21,30],[11,0,22,12,"result"],[11,8,22,12,"result"],[11,14,22,18],[11,15,22,19,"name"],[11,19,22,18],[11,20,22,12],[11,23,22,27,"syntaxAsAst"],[11,34,22,38],[11,37,23,18,"map"],[11,40,23,21],[11,41,23,22,"name"],[11,45,23,21],[11,46,23,18],[11,47,23,28,"syntax"],[11,53,22,38],[11,56,24,18],[11,120,24,27,"map"],[11,123,24,30],[11,124,24,31,"name"],[11,128,24,30],[11,129,24,27],[11,130,24,37,"syntax"],[11,136,24,18],[11,138,24,45],[12,0,24,47,"compact"],[12,10,24,47,"compact"],[12,17,24,54],[12,19,24,56,"compact"],[13,0,24,45],[13,9,24,18],[13,10,22,12],[14,0,25,9],[15,0,26,5],[17,0,28,4],[17,11,28,11,"result"],[17,17,28,4],[18,0,29,1],[20,0,31,0],[20,11,31,9,"dumpAtruleMapSyntax"],[20,30,31,0],[20,31,31,29,"map"],[20,34,31,0],[20,36,31,34,"compact"],[20,43,31,0],[20,45,31,43,"syntaxAsAst"],[20,56,31,0],[20,58,31,56],[21,0,32,4],[21,8,32,10,"result"],[21,14,32,16],[21,17,32,19],[21,19,32,4],[23,0,34,4],[23,39,34,33,"Object"],[23,45,34,39],[23,46,34,40,"entries"],[23,53,34,33],[23,54,34,48,"map"],[23,57,34,33],[23,58,34,4],[23,95,34,54],[24,0,34,54],[26,0,34,54],[28,0,34,54],[28,10,34,16,"name"],[28,14,34,54],[29,0,34,54],[29,10,34,22,"atrule"],[29,16,34,54],[30,0,35,8,"result"],[30,6,35,8,"result"],[30,12,35,14],[30,13,35,15,"name"],[30,17,35,14],[30,18,35,8],[30,21,35,23],[31,0,36,12,"prelude"],[31,8,36,12,"prelude"],[31,15,36,19],[31,17,36,21,"atrule"],[31,23,36,27],[31,24,36,28,"prelude"],[31,31,36,21],[31,36,37,16,"syntaxAsAst"],[31,47,37,27],[31,50,38,22,"atrule"],[31,56,38,28],[31,57,38,29,"prelude"],[31,64,38,22],[31,65,38,37,"syntax"],[31,71,37,27],[31,74,39,22],[31,138,39,31,"atrule"],[31,144,39,37],[31,145,39,38,"prelude"],[31,152,39,31],[31,153,39,46,"syntax"],[31,159,39,22],[31,161,39,54],[32,0,39,56,"compact"],[32,10,39,56,"compact"],[32,17,39,63],[32,19,39,56,"compact"],[33,0,39,54],[33,9,39,22],[33,10,36,21],[33,11,35,23],[34,0,41,12,"descriptors"],[34,8,41,12,"descriptors"],[34,19,41,23],[34,21,41,25,"atrule"],[34,27,41,31],[34,28,41,32,"descriptors"],[34,39,41,25],[34,43,41,47,"dumpMapSyntax"],[34,56,41,60],[34,57,41,61,"atrule"],[34,63,41,67],[34,64,41,68,"descriptors"],[34,75,41,60],[34,77,41,81,"compact"],[34,84,41,60],[34,86,41,90,"syntaxAsAst"],[34,97,41,60],[35,0,35,23],[35,7,35,8],[36,0,43,5],[38,0,45,4],[38,11,45,11,"result"],[38,17,45,4],[39,0,46,1],[41,0,48,0],[41,11,48,9,"valueHasVar"],[41,22,48,0],[41,23,48,21,"tokens"],[41,29,48,0],[41,31,48,29],[42,0,49,4],[42,9,49,9],[42,13,49,13,"i"],[42,14,49,14],[42,17,49,17],[42,18,49,4],[42,20,49,20,"i"],[42,21,49,21],[42,24,49,24,"tokens"],[42,30,49,30],[42,31,49,31,"length"],[42,37,49,4],[42,39,49,39,"i"],[42,40,49,40],[42,42,49,4],[42,44,49,44],[43,0,50,8],[43,10,50,12,"tokens"],[43,16,50,18],[43,17,50,19,"i"],[43,18,50,18],[43,19,50,12],[43,20,50,22,"value"],[43,25,50,12],[43,26,50,28,"toLowerCase"],[43,37,50,12],[43,44,50,46],[43,50,50,8],[43,52,50,54],[44,0,51,12],[44,15,51,19],[44,19,51,12],[45,0,52,9],[46,0,53,5],[48,0,55,4],[48,11,55,11],[48,16,55,4],[49,0,56,1],[51,0,58,0],[51,11,58,9,"buildMatchResult"],[51,27,58,0],[51,28,58,26,"match"],[51,33,58,0],[51,35,58,33,"error"],[51,40,58,0],[51,42,58,40,"iterations"],[51,52,58,0],[51,54,58,52],[52,0,59,4],[52,11,59,11],[53,0,60,8,"matched"],[53,6,60,8,"matched"],[53,13,60,15],[53,15,60,17,"match"],[53,20,59,11],[54,0,61,8,"iterations"],[54,6,61,8,"iterations"],[54,16,61,18],[54,18,61,20,"iterations"],[54,28,59,11],[55,0,62,8,"error"],[55,6,62,8,"error"],[55,11,62,13],[55,13,62,15,"error"],[55,18,59,11],[56,0,63,8,"getTrace"],[56,6,63,8,"getTrace"],[56,14,63,16],[56,16,63,18],[56,58,63,24,"getTrace"],[56,66,59,11],[57,0,64,8,"isType"],[57,6,64,8,"isType"],[57,12,64,14],[57,14,64,16],[57,56,64,22,"isType"],[57,62,59,11],[58,0,65,8,"isProperty"],[58,6,65,8,"isProperty"],[58,16,65,18],[58,18,65,20],[58,60,65,26,"isProperty"],[58,70,59,11],[59,0,66,8,"isKeyword"],[59,6,66,8,"isKeyword"],[59,15,66,17],[59,17,66,19],[59,59,66,25,"isKeyword"],[60,0,59,11],[60,5,59,4],[61,0,68,1],[63,0,70,0],[63,11,70,9,"matchSyntax"],[63,22,70,0],[63,23,70,21,"lexer"],[63,28,70,0],[63,30,70,28,"syntax"],[63,36,70,0],[63,38,70,36,"value"],[63,43,70,0],[63,45,70,43,"useCommon"],[63,54,70,0],[63,56,70,54],[64,0,71,4],[64,8,71,8,"tokens"],[64,14,71,14],[64,17,71,17],[64,68,71,31,"value"],[64,73,71,17],[64,75,71,38,"lexer"],[64,80,71,43],[64,81,71,44,"syntax"],[64,87,71,17],[64,88,71,4],[66,0,72,4],[66,8,72,8,"result"],[66,14,72,4],[68,0,74,4],[68,8,74,8,"valueHasVar"],[68,19,74,19],[68,20,74,20,"tokens"],[68,26,74,19],[68,27,74,4],[68,29,74,29],[69,0,75,8],[69,13,75,15,"buildMatchResult"],[69,29,75,31],[69,30,75,32],[69,34,75,31],[69,36,75,38],[69,40,75,42,"Error"],[69,45,75,38],[69,46,75,48],[69,95,75,38],[69,96,75,31],[69,97,75,8],[70,0,76,5],[72,0,78,4],[72,8,78,8,"useCommon"],[72,17,78,4],[72,19,78,19],[73,0,79,8,"result"],[73,6,79,8,"result"],[73,12,79,14],[73,15,79,17],[73,69,79,29,"tokens"],[73,75,79,17],[73,77,79,37,"lexer"],[73,82,79,42],[73,83,79,43,"valueCommonSyntax"],[73,100,79,17],[73,102,79,62,"lexer"],[73,107,79,17],[73,108,79,8],[74,0,80,5],[76,0,82,4],[76,8,82,8],[76,9,82,9,"useCommon"],[76,18,82,8],[76,22,82,22],[76,23,82,23,"result"],[76,29,82,29],[76,30,82,30,"match"],[76,35,82,4],[76,37,82,37],[77,0,83,8,"result"],[77,6,83,8,"result"],[77,12,83,14],[77,15,83,17],[77,69,83,29,"tokens"],[77,75,83,17],[77,77,83,37,"syntax"],[77,83,83,43],[77,84,83,44,"match"],[77,89,83,17],[77,91,83,51,"lexer"],[77,96,83,17],[77,97,83,8],[79,0,84,8],[79,10,84,12],[79,11,84,13,"result"],[79,17,84,19],[79,18,84,20,"match"],[79,23,84,8],[79,25,84,27],[80,0,85,12],[80,15,85,19,"buildMatchResult"],[80,31,85,35],[80,32,86,16],[80,36,85,35],[80,38,87,16],[80,103,87,37,"result"],[80,109,87,43],[80,110,87,44,"reason"],[80,116,87,16],[80,118,87,52,"syntax"],[80,124,87,58],[80,125,87,59,"syntax"],[80,131,87,16],[80,133,87,67,"value"],[80,138,87,16],[80,140,87,74,"result"],[80,146,87,16],[80,147,85,35],[80,149,88,16,"result"],[80,155,88,22],[80,156,88,23,"iterations"],[80,166,85,35],[80,167,85,12],[81,0,90,9],[82,0,91,5],[84,0,93,4],[84,11,93,11,"buildMatchResult"],[84,27,93,27],[84,28,93,28,"result"],[84,34,93,34],[84,35,93,35,"match"],[84,40,93,27],[84,42,93,42],[84,46,93,27],[84,48,93,48,"result"],[84,54,93,54],[84,55,93,55,"iterations"],[84,65,93,27],[84,66,93,4],[85,0,94,1],[87,0,96,0],[87,6,96,4,"Lexer"],[87,11,96,9],[87,14,96,12],[87,23,96,4,"Lexer"],[87,28,96,12],[87,29,96,21,"config"],[87,35,96,12],[87,37,96,29,"syntax"],[87,43,96,12],[87,45,96,37,"structure"],[87,54,96,12],[87,56,96,48],[88,0,97,4],[88,9,97,9,"valueCommonSyntax"],[88,26,97,4],[88,29,97,29,"cssWideKeywords"],[88,44,97,4],[89,0,98,4],[89,9,98,9,"syntax"],[89,15,98,4],[89,18,98,18,"syntax"],[89,24,98,4],[90,0,99,4],[90,9,99,9,"generic"],[90,16,99,4],[90,19,99,19],[90,24,99,4],[91,0,100,4],[91,9,100,9,"atrules"],[91,16,100,4],[91,19,100,19],[91,21,100,4],[92,0,101,4],[92,9,101,9,"properties"],[92,19,101,4],[92,22,101,22],[92,24,101,4],[93,0,102,4],[93,9,102,9,"types"],[93,14,102,4],[93,17,102,17],[93,19,102,4],[94,0,103,4],[94,9,103,9,"structure"],[94,18,103,4],[94,21,103,21,"structure"],[94,30,103,30],[94,34,103,34],[94,103,103,57,"config"],[94,109,103,34],[94,110,103,4],[96,0,105,4],[96,8,105,8,"config"],[96,14,105,4],[96,16,105,16],[97,0,106,8],[97,10,106,12,"config"],[97,16,106,18],[97,17,106,19,"types"],[97,22,106,8],[97,24,106,26],[98,0,107,12],[98,13,107,17],[98,17,107,21,"name"],[98,21,107,12],[98,25,107,29,"config"],[98,31,107,35],[98,32,107,36,"types"],[98,37,107,12],[98,39,107,43],[99,0,108,16],[99,15,108,21,"addType_"],[99,23,108,16],[99,24,108,30,"name"],[99,28,108,16],[99,30,108,36,"config"],[99,36,108,42],[99,37,108,43,"types"],[99,42,108,36],[99,43,108,49,"name"],[99,47,108,36],[99,48,108,16],[100,0,109,13],[101,0,110,9],[103,0,112,8],[103,10,112,12,"config"],[103,16,112,18],[103,17,112,19,"generic"],[103,24,112,8],[103,26,112,28],[104,0,113,12],[104,13,113,17,"generic"],[104,20,113,12],[104,23,113,27],[104,27,113,12],[106,0,114,12],[106,13,114,17],[106,17,114,21,"name"],[106,21,114,12],[106,70,114,38],[107,0,115,16],[107,15,115,21,"addType_"],[107,23,115,16],[107,24,115,30,"name"],[107,28,115,16],[107,30,115,36],[107,74,115,44,"name"],[107,78,115,36],[107,79,115,16],[108,0,116,13],[109,0,117,9],[111,0,119,8],[111,10,119,12,"config"],[111,16,119,18],[111,17,119,19,"atrules"],[111,24,119,8],[111,26,119,28],[112,0,120,12],[112,13,120,17],[112,17,120,21,"name"],[112,21,120,12],[112,25,120,29,"config"],[112,31,120,35],[112,32,120,36,"atrules"],[112,39,120,12],[112,41,120,45],[113,0,121,16],[113,15,121,21,"addAtrule_"],[113,25,121,16],[113,26,121,32,"name"],[113,30,121,16],[113,32,121,38,"config"],[113,38,121,44],[113,39,121,45,"atrules"],[113,46,121,38],[113,47,121,53,"name"],[113,51,121,38],[113,52,121,16],[114,0,122,13],[115,0,123,9],[117,0,125,8],[117,10,125,12,"config"],[117,16,125,18],[117,17,125,19,"properties"],[117,27,125,8],[117,29,125,31],[118,0,126,12],[118,13,126,17],[118,17,126,21,"name"],[118,21,126,12],[118,25,126,29,"config"],[118,31,126,35],[118,32,126,36,"properties"],[118,42,126,12],[118,44,126,48],[119,0,127,16],[119,15,127,21,"addProperty_"],[119,27,127,16],[119,28,127,34,"name"],[119,32,127,16],[119,34,127,40,"config"],[119,40,127,46],[119,41,127,47,"properties"],[119,51,127,40],[119,52,127,58,"name"],[119,56,127,40],[119,57,127,16],[120,0,128,13],[121,0,129,9],[122,0,130,5],[123,0,131,1],[123,3,96,0],[125,0,133,0,"Lexer"],[125,2,133,0,"Lexer"],[125,7,133,5],[125,8,133,6,"prototype"],[125,17,133,0],[125,20,133,18],[126,0,134,4,"structure"],[126,4,134,4,"structure"],[126,13,134,13],[126,15,134,15],[126,17,133,18],[127,0,135,4,"checkStructure"],[127,4,135,4,"checkStructure"],[127,18,135,18],[127,20,135,20],[127,44,135,29,"ast"],[127,47,135,20],[127,49,135,34],[128,0,136,8],[128,15,136,17,"collectWarning"],[128,29,136,8],[128,30,136,32,"node"],[128,34,136,8],[128,36,136,38,"message"],[128,43,136,8],[128,45,136,47],[129,0,137,12,"warns"],[129,8,137,12,"warns"],[129,13,137,17],[129,14,137,18,"push"],[129,18,137,12],[129,19,137,23],[130,0,138,16,"node"],[130,10,138,16,"node"],[130,14,138,20],[130,16,138,22,"node"],[130,20,137,23],[131,0,139,16,"message"],[131,10,139,16,"message"],[131,17,139,23],[131,19,139,25,"message"],[132,0,137,23],[132,9,137,12],[133,0,141,9],[135,0,143,8],[135,10,143,12,"structure"],[135,19,143,21],[135,22,143,24],[135,27,143,29,"structure"],[135,36,143,8],[136,0,144,8],[136,10,144,12,"warns"],[136,15,144,17],[136,18,144,20],[136,20,144,8],[137,0,146,8],[137,11,146,13,"syntax"],[137,17,146,8],[137,18,146,20,"walk"],[137,22,146,8],[137,23,146,25,"ast"],[137,26,146,8],[137,28,146,30],[137,38,146,39,"node"],[137,42,146,30],[137,44,146,45],[138,0,147,12],[138,12,147,16,"structure"],[138,21,147,25],[138,22,147,26,"hasOwnProperty"],[138,36,147,16],[138,37,147,41,"node"],[138,41,147,45],[138,42,147,46,"type"],[138,46,147,16],[138,47,147,12],[138,49,147,53],[139,0,148,16,"structure"],[139,10,148,16,"structure"],[139,19,148,25],[139,20,148,26,"node"],[139,24,148,30],[139,25,148,31,"type"],[139,29,148,25],[139,30,148,16],[139,31,148,37,"check"],[139,36,148,16],[139,37,148,43,"node"],[139,41,148,16],[139,43,148,49,"collectWarning"],[139,57,148,16],[140,0,149,13],[140,9,147,12],[140,15,149,19],[141,0,150,16,"collectWarning"],[141,10,150,16,"collectWarning"],[141,24,150,30],[141,25,150,31,"node"],[141,29,150,30],[141,31,150,37],[141,55,150,61,"node"],[141,59,150,65],[141,60,150,66,"type"],[141,64,150,37],[141,67,150,73],[141,70,150,30],[141,71,150,16],[142,0,151,13],[143,0,152,9],[143,7,146,8],[144,0,154,8],[144,13,154,15,"warns"],[144,18,154,20],[144,19,154,21,"length"],[144,25,154,15],[144,28,154,30,"warns"],[144,33,154,15],[144,36,154,38],[144,41,154,8],[145,0,155,5],[145,5,133,18],[146,0,157,4,"createDescriptor"],[146,4,157,4,"createDescriptor"],[146,20,157,20],[146,22,157,22],[146,48,157,31,"syntax"],[146,54,157,22],[146,56,157,39,"type"],[146,60,157,22],[146,62,157,45,"name"],[146,66,157,22],[146,68,157,66],[147,0,157,66],[147,10,157,51,"parent"],[147,16,157,66],[147,87,157,60],[147,91,157,66],[148,0,158,8],[148,10,158,12,"ref"],[148,13,158,15],[148,16,158,18],[149,0,159,12,"type"],[149,8,159,12,"type"],[149,12,159,16],[149,14,159,18,"type"],[149,18,158,18],[150,0,160,12,"name"],[150,8,160,12,"name"],[150,12,160,16],[150,14,160,18,"name"],[151,0,158,18],[151,7,158,8],[152,0,162,8],[152,10,162,12,"descriptor"],[152,20,162,22],[152,23,162,25],[153,0,163,12,"type"],[153,8,163,12,"type"],[153,12,163,16],[153,14,163,18,"type"],[153,18,162,25],[154,0,164,12,"name"],[154,8,164,12,"name"],[154,12,164,16],[154,14,164,18,"name"],[154,18,162,25],[155,0,165,12,"parent"],[155,8,165,12,"parent"],[155,14,165,18],[155,16,165,20,"parent"],[155,22,162,25],[156,0,166,12,"syntax"],[156,8,166,12,"syntax"],[156,14,166,18],[156,16,166,20],[156,20,162,25],[157,0,167,12,"match"],[157,8,167,12,"match"],[157,13,167,17],[157,15,167,19],[158,0,162,25],[158,7,162,8],[160,0,170,8],[160,10,170,12],[160,17,170,19,"syntax"],[160,23,170,12],[160,28,170,30],[160,38,170,8],[160,40,170,42],[161,0,171,12,"descriptor"],[161,8,171,12,"descriptor"],[161,18,171,22],[161,19,171,23,"match"],[161,24,171,12],[161,27,171,31],[161,91,171,47,"syntax"],[161,97,171,31],[161,99,171,55,"ref"],[161,102,171,31],[161,103,171,12],[162,0,172,9],[162,7,170,8],[162,13,172,15],[163,0,173,12],[163,12,173,16],[163,19,173,23,"syntax"],[163,25,173,16],[163,30,173,34],[163,38,173,12],[163,40,173,44],[164,0,175,16,"Object"],[164,10,175,16,"Object"],[164,16,175,22],[164,17,175,23,"defineProperty"],[164,31,175,16],[164,32,175,38,"descriptor"],[164,42,175,16],[164,44,175,50],[164,52,175,16],[164,54,175,60],[165,0,176,20,"get"],[165,12,176,20,"get"],[165,15,176,23],[165,17,176,25],[165,32,176,36],[166,0,177,24,"Object"],[166,14,177,24,"Object"],[166,20,177,30],[166,21,177,31,"defineProperty"],[166,35,177,24],[166,36,177,46,"descriptor"],[166,46,177,24],[166,48,177,58],[166,56,177,24],[166,58,177,68],[167,0,178,28,"value"],[167,16,178,28,"value"],[167,21,178,33],[167,23,178,35],[167,84,178,41,"syntax"],[167,90,178,35],[168,0,177,68],[168,15,177,24],[169,0,181,24],[169,21,181,31,"descriptor"],[169,31,181,41],[169,32,181,42,"syntax"],[169,38,181,24],[170,0,182,21],[171,0,175,60],[171,11,175,16],[172,0,184,13],[172,9,173,12],[172,15,184,19],[173,0,185,16,"descriptor"],[173,10,185,16,"descriptor"],[173,20,185,26],[173,21,185,27,"syntax"],[173,27,185,16],[173,30,185,36,"syntax"],[173,36,185,16],[174,0,186,13],[176,0,189,12,"Object"],[176,8,189,12,"Object"],[176,14,189,18],[176,15,189,19,"defineProperty"],[176,29,189,12],[176,30,189,34,"descriptor"],[176,40,189,12],[176,42,189,46],[176,49,189,12],[176,51,189,55],[177,0,190,16,"get"],[177,10,190,16,"get"],[177,13,190,19],[177,15,190,21],[177,30,190,32],[178,0,191,20,"Object"],[178,12,191,20,"Object"],[178,18,191,26],[178,19,191,27,"defineProperty"],[178,33,191,20],[178,34,191,42,"descriptor"],[178,44,191,20],[178,46,191,54],[178,53,191,20],[178,55,191,63],[179,0,192,24,"value"],[179,14,192,24,"value"],[179,19,192,29],[179,21,192,31],[179,85,192,47,"descriptor"],[179,95,192,57],[179,96,192,58,"syntax"],[179,102,192,31],[179,104,192,66,"ref"],[179,107,192,31],[180,0,191,63],[180,13,191,20],[181,0,195,20],[181,19,195,27,"descriptor"],[181,29,195,37],[181,30,195,38,"match"],[181,35,195,20],[182,0,196,17],[183,0,189,55],[183,9,189,12],[184,0,198,9],[186,0,200,8],[186,13,200,15,"descriptor"],[186,23,200,8],[187,0,201,5],[187,5,133,18],[188,0,202,4,"addAtrule_"],[188,4,202,4,"addAtrule_"],[188,14,202,14],[188,16,202,16],[188,36,202,25,"name"],[188,40,202,16],[188,42,202,31,"syntax"],[188,48,202,16],[188,50,202,39],[189,0,202,39],[191,0,203,8],[191,10,203,12],[191,11,203,13,"syntax"],[191,17,203,8],[191,19,203,21],[192,0,204,12],[193,0,205,9],[195,0,207,8],[195,11,207,13,"atrules"],[195,18,207,8],[195,19,207,21,"name"],[195,23,207,8],[195,27,207,29],[196,0,208,12,"type"],[196,8,208,12,"type"],[196,12,208,16],[196,14,208,18],[196,22,207,29],[197,0,209,12,"name"],[197,8,209,12,"name"],[197,12,209,16],[197,14,209,18,"name"],[197,18,207,29],[198,0,210,12,"prelude"],[198,8,210,12,"prelude"],[198,15,210,19],[198,17,210,21,"syntax"],[198,23,210,27],[198,24,210,28,"prelude"],[198,31,210,21],[198,34,210,38],[198,39,210,43,"createDescriptor"],[198,55,210,38],[198,56,210,60,"syntax"],[198,62,210,66],[198,63,210,67,"prelude"],[198,70,210,38],[198,72,210,76],[198,87,210,38],[198,89,210,93,"name"],[198,93,210,38],[198,94,210,21],[198,97,210,101],[198,101,207,29],[199,0,211,12,"descriptors"],[199,8,211,12,"descriptors"],[199,19,211,23],[199,21,211,25,"syntax"],[199,27,211,31],[199,28,211,32,"descriptors"],[199,39,211,25],[199,42,212,18,"Object"],[199,48,212,24],[199,49,212,25,"keys"],[199,53,212,18],[199,54,212,30,"syntax"],[199,60,212,36],[199,61,212,37,"descriptors"],[199,72,212,18],[199,74,212,50,"reduce"],[199,80,212,18],[199,81,212,57],[199,91,212,58,"res"],[199,94,212,57],[199,96,212,63,"descName"],[199,104,212,57],[199,106,212,76],[200,0,213,20,"res"],[200,10,213,20,"res"],[200,13,213,23],[200,14,213,24,"descName"],[200,22,213,23],[200,23,213,20],[200,26,213,36],[200,31,213,40],[200,32,213,41,"createDescriptor"],[200,48,213,36],[200,49,213,58,"syntax"],[200,55,213,64],[200,56,213,65,"descriptors"],[200,67,213,58],[200,68,213,77,"descName"],[200,76,213,58],[200,77,213,36],[200,79,213,88],[200,97,213,36],[200,99,213,108,"descName"],[200,107,213,36],[200,109,213,118,"name"],[200,113,213,36],[200,114,213,20],[201,0,214,20],[201,17,214,27,"res"],[201,20,214,20],[202,0,215,17],[202,9,212,18],[202,11,215,19],[202,13,212,18],[202,14,211,25],[202,17,216,18],[203,0,207,29],[203,7,207,8],[204,0,218,5],[204,5,133,18],[205,0,219,4,"addProperty_"],[205,4,219,4,"addProperty_"],[205,16,219,16],[205,18,219,18],[205,40,219,27,"name"],[205,44,219,18],[205,46,219,33,"syntax"],[205,52,219,18],[205,54,219,41],[206,0,220,8],[206,10,220,12],[206,11,220,13,"syntax"],[206,17,220,8],[206,19,220,21],[207,0,221,12],[208,0,222,9],[210,0,224,8],[210,11,224,13,"properties"],[210,21,224,8],[210,22,224,24,"name"],[210,26,224,8],[210,30,224,32],[210,35,224,37,"createDescriptor"],[210,51,224,32],[210,52,224,54,"syntax"],[210,58,224,32],[210,60,224,62],[210,70,224,32],[210,72,224,74,"name"],[210,76,224,32],[210,77,224,8],[211,0,225,5],[211,5,133,18],[212,0,226,4,"addType_"],[212,4,226,4,"addType_"],[212,12,226,12],[212,14,226,14],[212,32,226,23,"name"],[212,36,226,14],[212,38,226,29,"syntax"],[212,44,226,14],[212,46,226,37],[213,0,227,8],[213,10,227,12],[213,11,227,13,"syntax"],[213,17,227,8],[213,19,227,21],[214,0,228,12],[215,0,229,9],[217,0,231,8],[217,11,231,13,"types"],[217,16,231,8],[217,17,231,19,"name"],[217,21,231,8],[217,25,231,27],[217,30,231,32,"createDescriptor"],[217,46,231,27],[217,47,231,49,"syntax"],[217,53,231,27],[217,55,231,57],[217,61,231,27],[217,63,231,65,"name"],[217,67,231,27],[217,68,231,8],[219,0,233,8],[219,10,233,12,"syntax"],[219,16,233,18],[219,21,233,23],[219,65,233,31],[219,88,233,23],[219,89,233,8],[219,91,233,57],[220,0,234,12],[220,13,234,17,"valueCommonSyntax"],[220,30,234,12],[220,33,234,37,"cssWideKeywordsWithExpression"],[220,62,234,12],[221,0,235,9],[222,0,236,5],[222,5,133,18],[223,0,238,4,"checkAtruleName"],[223,4,238,4,"checkAtruleName"],[223,19,238,19],[223,21,238,21],[223,46,238,30,"atruleName"],[223,56,238,21],[223,58,238,42],[224,0,239,8],[224,10,239,12],[224,11,239,13],[224,16,239,18,"getAtrule"],[224,25,239,13],[224,26,239,28,"atruleName"],[224,36,239,13],[224,37,239,8],[224,39,239,41],[225,0,240,12],[225,15,240,19],[225,84,240,44],[225,101,240,19],[225,103,240,63],[225,109,240,69,"atruleName"],[225,119,240,19],[225,120,240,12],[226,0,241,9],[227,0,242,5],[227,5,133,18],[228,0,243,4,"checkAtrulePrelude"],[228,4,243,4,"checkAtrulePrelude"],[228,22,243,22],[228,24,243,24],[228,52,243,33,"atruleName"],[228,62,243,24],[228,64,243,45,"prelude"],[228,71,243,24],[228,73,243,54],[229,0,244,8],[229,10,244,12,"error"],[229,15,244,17],[229,18,244,20],[229,23,244,25,"checkAtruleName"],[229,38,244,20],[229,39,244,41,"atruleName"],[229,49,244,20],[229,50,244,8],[231,0,246,8],[231,10,246,12,"error"],[231,15,246,8],[231,17,246,19],[232,0,247,12],[232,15,247,19,"error"],[232,20,247,12],[233,0,248,9],[235,0,250,8],[235,10,250,12,"atrule"],[235,16,250,18],[235,19,250,21],[235,24,250,26,"getAtrule"],[235,33,250,21],[235,34,250,36,"atruleName"],[235,44,250,21],[235,45,250,8],[237,0,252,8],[237,10,252,12],[237,11,252,13,"atrule"],[237,17,252,19],[237,18,252,20,"prelude"],[237,25,252,12],[237,29,252,31,"prelude"],[237,36,252,8],[237,38,252,40],[238,0,253,12],[238,15,253,19],[238,19,253,23,"SyntaxError"],[238,30,253,19],[238,31,253,35],[238,46,253,50,"atruleName"],[238,56,253,35],[238,59,253,63],[238,91,253,19],[238,92,253,12],[239,0,254,9],[241,0,256,8],[241,10,256,12,"atrule"],[241,16,256,18],[241,17,256,19,"prelude"],[241,24,256,12],[241,28,256,30],[241,29,256,31,"prelude"],[241,36,256,8],[241,38,256,40],[242,0,257,12],[242,15,257,19],[242,19,257,23,"SyntaxError"],[242,30,257,19],[242,31,257,35],[242,46,257,50,"atruleName"],[242,56,257,35],[242,59,257,63],[242,87,257,19],[242,88,257,12],[243,0,258,9],[244,0,259,5],[244,5,133,18],[245,0,260,4,"checkAtruleDescriptorName"],[245,4,260,4,"checkAtruleDescriptorName"],[245,29,260,29],[245,31,260,31],[245,66,260,40,"atruleName"],[245,76,260,31],[245,78,260,52,"descriptorName"],[245,92,260,31],[245,94,260,68],[246,0,261,8],[246,10,261,12,"error"],[246,15,261,17],[246,18,261,20],[246,23,261,25,"checkAtruleName"],[246,38,261,20],[246,39,261,41,"atruleName"],[246,49,261,20],[246,50,261,8],[248,0,263,8],[248,10,263,12,"error"],[248,15,263,8],[248,17,263,19],[249,0,264,12],[249,15,264,19,"error"],[249,20,264,12],[250,0,265,9],[252,0,267,8],[252,10,267,12,"atrule"],[252,16,267,18],[252,19,267,21],[252,24,267,26,"getAtrule"],[252,33,267,21],[252,34,267,36,"atruleName"],[252,44,267,21],[252,45,267,8],[254,0,268,8],[254,10,268,12,"descriptor"],[254,20,268,22],[254,23,268,25],[254,73,268,31,"keyword"],[254,80,268,25],[254,81,268,39,"descriptorName"],[254,95,268,25],[254,96,268,8],[256,0,270,8],[256,10,270,12],[256,11,270,13,"atrule"],[256,17,270,19],[256,18,270,20,"descriptors"],[256,29,270,8],[256,31,270,33],[257,0,271,12],[257,15,271,19],[257,19,271,23,"SyntaxError"],[257,30,271,19],[257,31,271,35],[257,46,271,50,"atruleName"],[257,56,271,35],[257,59,271,63],[257,87,271,19],[257,88,271,12],[258,0,272,9],[260,0,274,8],[260,10,274,12],[260,11,274,13,"atrule"],[260,17,274,19],[260,18,274,20,"descriptors"],[260,29,274,13],[260,30,274,32,"descriptor"],[260,40,274,42],[260,41,274,43,"name"],[260,45,274,13],[260,46,274,12],[260,50,275,12],[260,51,275,13,"atrule"],[260,57,275,19],[260,58,275,20,"descriptors"],[260,69,275,13],[260,70,275,32,"descriptor"],[260,80,275,42],[260,81,275,43,"basename"],[260,89,275,13],[260,90,274,8],[260,92,275,54],[261,0,276,12],[261,15,276,19],[261,84,276,44],[261,112,276,19],[261,114,276,74,"descriptorName"],[261,128,276,19],[261,129,276,12],[262,0,277,9],[263,0,278,5],[263,5,133,18],[264,0,279,4,"checkPropertyName"],[264,4,279,4,"checkPropertyName"],[264,21,279,21],[264,23,279,23],[264,50,279,32,"propertyName"],[264,62,279,23],[264,64,279,46],[265,0,280,8],[265,10,280,12,"property"],[265,18,280,20],[265,21,280,23],[265,71,280,29,"property"],[265,79,280,23],[265,80,280,38,"propertyName"],[265,92,280,23],[265,93,280,8],[267,0,283,8],[267,10,283,12,"property"],[267,18,283,20],[267,19,283,21,"custom"],[267,25,283,8],[267,27,283,29],[268,0,284,12],[268,15,284,19],[268,19,284,23,"Error"],[268,24,284,19],[268,25,284,29],[268,83,284,19],[268,84,284,12],[269,0,285,9],[271,0,287,8],[271,10,287,12],[271,11,287,13],[271,16,287,18,"getProperty"],[271,27,287,13],[271,28,287,30,"propertyName"],[271,40,287,13],[271,41,287,8],[271,43,287,45],[272,0,288,12],[272,15,288,19],[272,84,288,44],[272,102,288,19],[272,104,288,64,"propertyName"],[272,116,288,19],[272,117,288,12],[273,0,289,9],[274,0,290,5],[274,5,133,18],[275,0,292,4,"matchAtrulePrelude"],[275,4,292,4,"matchAtrulePrelude"],[275,22,292,22],[275,24,292,24],[275,52,292,33,"atruleName"],[275,62,292,24],[275,64,292,45,"prelude"],[275,71,292,24],[275,73,292,54],[276,0,293,8],[276,10,293,12,"error"],[276,15,293,17],[276,18,293,20],[276,23,293,25,"checkAtrulePrelude"],[276,41,293,20],[276,42,293,44,"atruleName"],[276,52,293,20],[276,54,293,56,"prelude"],[276,61,293,20],[276,62,293,8],[278,0,295,8],[278,10,295,12,"error"],[278,15,295,8],[278,17,295,19],[279,0,296,12],[279,15,296,19,"buildMatchResult"],[279,31,296,35],[279,32,296,36],[279,36,296,35],[279,38,296,42,"error"],[279,43,296,35],[279,44,296,12],[280,0,297,9],[282,0,299,8],[282,10,299,12],[282,11,299,13,"prelude"],[282,18,299,8],[282,20,299,22],[283,0,300,12],[283,15,300,19,"buildMatchResult"],[283,31,300,35],[283,32,300,36],[283,36,300,35],[283,38,300,42],[283,42,300,35],[283,43,300,12],[284,0,301,9],[286,0,303,8],[286,13,303,15,"matchSyntax"],[286,24,303,26],[286,25,303,27],[286,29,303,26],[286,31,303,33],[286,36,303,38,"getAtrule"],[286,45,303,33],[286,46,303,48,"atruleName"],[286,56,303,33],[286,58,303,60,"prelude"],[286,65,303,26],[286,67,303,69,"prelude"],[286,74,303,26],[286,76,303,78],[286,81,303,26],[286,82,303,8],[287,0,304,5],[287,5,133,18],[288,0,305,4,"matchAtruleDescriptor"],[288,4,305,4,"matchAtruleDescriptor"],[288,25,305,25],[288,27,305,27],[288,58,305,36,"atruleName"],[288,68,305,27],[288,70,305,48,"descriptorName"],[288,84,305,27],[288,86,305,64,"value"],[288,91,305,27],[288,93,305,71],[289,0,306,8],[289,10,306,12,"error"],[289,15,306,17],[289,18,306,20],[289,23,306,25,"checkAtruleDescriptorName"],[289,48,306,20],[289,49,306,51,"atruleName"],[289,59,306,20],[289,61,306,63,"descriptorName"],[289,75,306,20],[289,76,306,8],[291,0,308,8],[291,10,308,12,"error"],[291,15,308,8],[291,17,308,19],[292,0,309,12],[292,15,309,19,"buildMatchResult"],[292,31,309,35],[292,32,309,36],[292,36,309,35],[292,38,309,42,"error"],[292,43,309,35],[292,44,309,12],[293,0,310,9],[295,0,312,8],[295,10,312,12,"atrule"],[295,16,312,18],[295,19,312,21],[295,24,312,26,"getAtrule"],[295,33,312,21],[295,34,312,36,"atruleName"],[295,44,312,21],[295,45,312,8],[297,0,313,8],[297,10,313,12,"descriptor"],[297,20,313,22],[297,23,313,25],[297,73,313,31,"keyword"],[297,80,313,25],[297,81,313,39,"descriptorName"],[297,95,313,25],[297,96,313,8],[299,0,315,8],[299,13,315,15,"matchSyntax"],[299,24,315,26],[299,25,315,27],[299,29,315,26],[299,31,315,33,"atrule"],[299,37,315,39],[299,38,315,40,"descriptors"],[299,49,315,33],[299,50,315,52,"descriptor"],[299,60,315,62],[299,61,315,63,"name"],[299,65,315,33],[299,70,315,72,"atrule"],[299,76,315,78],[299,77,315,79,"descriptors"],[299,88,315,72],[299,89,315,91,"descriptor"],[299,99,315,101],[299,100,315,102,"basename"],[299,108,315,72],[299,109,315,26],[299,111,315,113,"value"],[299,116,315,26],[299,118,315,120],[299,123,315,26],[299,124,315,8],[300,0,316,5],[300,5,133,18],[301,0,317,4,"matchDeclaration"],[301,4,317,4,"matchDeclaration"],[301,20,317,20],[301,22,317,22],[301,48,317,31,"node"],[301,52,317,22],[301,54,317,37],[302,0,318,8],[302,10,318,12,"node"],[302,14,318,16],[302,15,318,17,"type"],[302,19,318,12],[302,24,318,26],[302,37,318,8],[302,39,318,41],[303,0,319,12],[303,15,319,19,"buildMatchResult"],[303,31,319,35],[303,32,319,36],[303,36,319,35],[303,38,319,42],[303,42,319,46,"Error"],[303,47,319,42],[303,48,319,52],[303,72,319,42],[303,73,319,35],[303,74,319,12],[304,0,320,9],[306,0,322,8],[306,13,322,15],[306,18,322,20,"matchProperty"],[306,31,322,15],[306,32,322,34,"node"],[306,36,322,38],[306,37,322,39,"property"],[306,45,322,15],[306,47,322,49,"node"],[306,51,322,53],[306,52,322,54,"value"],[306,57,322,15],[306,58,322,8],[307,0,323,5],[307,5,133,18],[308,0,324,4,"matchProperty"],[308,4,324,4,"matchProperty"],[308,17,324,17],[308,19,324,19],[308,42,324,28,"propertyName"],[308,54,324,19],[308,56,324,42,"value"],[308,61,324,19],[308,63,324,49],[309,0,325,8],[309,10,325,12,"error"],[309,15,325,17],[309,18,325,20],[309,23,325,25,"checkPropertyName"],[309,40,325,20],[309,41,325,43,"propertyName"],[309,53,325,20],[309,54,325,8],[311,0,327,8],[311,10,327,12,"error"],[311,15,327,8],[311,17,327,19],[312,0,328,12],[312,15,328,19,"buildMatchResult"],[312,31,328,35],[312,32,328,36],[312,36,328,35],[312,38,328,42,"error"],[312,43,328,35],[312,44,328,12],[313,0,329,9],[315,0,331,8],[315,13,331,15,"matchSyntax"],[315,24,331,26],[315,25,331,27],[315,29,331,26],[315,31,331,33],[315,36,331,38,"getProperty"],[315,47,331,33],[315,48,331,50,"propertyName"],[315,60,331,33],[315,61,331,26],[315,63,331,65,"value"],[315,68,331,26],[315,70,331,72],[315,74,331,26],[315,75,331,8],[316,0,332,5],[316,5,133,18],[317,0,333,4,"matchType"],[317,4,333,4,"matchType"],[317,13,333,13],[317,15,333,15],[317,34,333,24,"typeName"],[317,42,333,15],[317,44,333,34,"value"],[317,49,333,15],[317,51,333,41],[318,0,334,8],[318,10,334,12,"typeSyntax"],[318,20,334,22],[318,23,334,25],[318,28,334,30,"getType"],[318,35,334,25],[318,36,334,38,"typeName"],[318,44,334,25],[318,45,334,8],[320,0,336,8],[320,10,336,12],[320,11,336,13,"typeSyntax"],[320,21,336,8],[320,23,336,25],[321,0,337,12],[321,15,337,19,"buildMatchResult"],[321,31,337,35],[321,32,337,36],[321,36,337,35],[321,38,337,42],[321,107,337,67],[321,121,337,42],[321,123,337,83,"typeName"],[321,131,337,42],[321,132,337,35],[321,133,337,12],[322,0,338,9],[324,0,340,8],[324,13,340,15,"matchSyntax"],[324,24,340,26],[324,25,340,27],[324,29,340,26],[324,31,340,33,"typeSyntax"],[324,41,340,26],[324,43,340,45,"value"],[324,48,340,26],[324,50,340,52],[324,55,340,26],[324,56,340,8],[325,0,341,5],[325,5,133,18],[326,0,342,4,"match"],[326,4,342,4,"match"],[326,9,342,9],[326,11,342,11],[326,26,342,20,"syntax"],[326,32,342,11],[326,34,342,28,"value"],[326,39,342,11],[326,41,342,35],[327,0,343,8],[327,10,343,12],[327,17,343,19,"syntax"],[327,23,343,12],[327,28,343,30],[327,36,343,12],[327,41,343,43],[327,42,343,44,"syntax"],[327,48,343,43],[327,52,343,54],[327,53,343,55,"syntax"],[327,59,343,61],[327,60,343,62,"type"],[327,64,343,12],[327,65,343,8],[327,67,343,69],[328,0,344,12],[328,15,344,19,"buildMatchResult"],[328,31,344,35],[328,32,344,36],[328,36,344,35],[328,38,344,42],[328,107,344,67],[328,119,344,42],[328,120,344,35],[328,121,344,12],[329,0,345,9],[331,0,347,8],[331,10,347,12],[331,17,347,19,"syntax"],[331,23,347,12],[331,28,347,30],[331,36,347,12],[331,40,347,42],[331,41,347,43,"syntax"],[331,47,347,49],[331,48,347,50,"match"],[331,53,347,8],[331,55,347,57],[332,0,348,12,"syntax"],[332,8,348,12,"syntax"],[332,14,348,18],[332,17,348,21],[332,22,348,26,"createDescriptor"],[332,38,348,21],[332,39,348,43,"syntax"],[332,45,348,21],[332,47,348,51],[332,53,348,21],[332,55,348,59],[332,66,348,21],[332,67,348,12],[333,0,349,9],[335,0,351,8],[335,13,351,15,"matchSyntax"],[335,24,351,26],[335,25,351,27],[335,29,351,26],[335,31,351,33,"syntax"],[335,37,351,26],[335,39,351,41,"value"],[335,44,351,26],[335,46,351,48],[335,51,351,26],[335,52,351,8],[336,0,352,5],[336,5,133,18],[337,0,354,4,"findValueFragments"],[337,4,354,4,"findValueFragments"],[337,22,354,22],[337,24,354,24],[337,52,354,33,"propertyName"],[337,64,354,24],[337,66,354,47,"value"],[337,71,354,24],[337,73,354,54,"type"],[337,77,354,24],[337,79,354,60,"name"],[337,83,354,24],[337,85,354,66],[338,0,355,8],[338,13,355,15],[338,57,355,22,"matchFragments"],[338,71,355,15],[338,72,355,37],[338,76,355,15],[338,78,355,43,"value"],[338,83,355,15],[338,85,355,50],[338,90,355,55,"matchProperty"],[338,103,355,50],[338,104,355,69,"propertyName"],[338,116,355,50],[338,118,355,83,"value"],[338,123,355,50],[338,124,355,15],[338,126,355,91,"type"],[338,130,355,15],[338,132,355,97,"name"],[338,136,355,15],[338,137,355,8],[339,0,356,5],[339,5,133,18],[340,0,357,4,"findDeclarationValueFragments"],[340,4,357,4,"findDeclarationValueFragments"],[340,33,357,33],[340,35,357,35],[340,74,357,44,"declaration"],[340,85,357,35],[340,87,357,57,"type"],[340,91,357,35],[340,93,357,63,"name"],[340,97,357,35],[340,99,357,69],[341,0,358,8],[341,13,358,15],[341,57,358,22,"matchFragments"],[341,71,358,15],[341,72,358,37],[341,76,358,15],[341,78,358,43,"declaration"],[341,89,358,54],[341,90,358,55,"value"],[341,95,358,15],[341,97,358,62],[341,102,358,67,"matchDeclaration"],[341,118,358,62],[341,119,358,84,"declaration"],[341,130,358,62],[341,131,358,15],[341,133,358,98,"type"],[341,137,358,15],[341,139,358,104,"name"],[341,143,358,15],[341,144,358,8],[342,0,359,5],[342,5,133,18],[343,0,360,4,"findAllFragments"],[343,4,360,4,"findAllFragments"],[343,20,360,20],[343,22,360,22],[343,48,360,31,"ast"],[343,51,360,22],[343,53,360,36,"type"],[343,57,360,22],[343,59,360,42,"name"],[343,63,360,22],[343,65,360,48],[344,0,361,8],[344,10,361,12,"result"],[344,16,361,18],[344,19,361,21],[344,21,361,8],[345,0,363,8],[345,11,363,13,"syntax"],[345,17,363,8],[345,18,363,20,"walk"],[345,22,363,8],[345,23,363,25,"ast"],[345,26,363,8],[345,28,363,30],[346,0,364,12,"visit"],[346,8,364,12,"visit"],[346,13,364,17],[346,15,364,19],[346,28,363,30],[347,0,365,12,"enter"],[347,8,365,12,"enter"],[347,13,365,17],[347,15,365,19],[347,25,365,28,"declaration"],[347,36,365,19],[347,38,365,41],[348,0,366,16,"result"],[348,10,366,16,"result"],[348,16,366,22],[348,17,366,23,"push"],[348,21,366,16],[348,22,366,28,"apply"],[348,27,366,16],[348,28,366,34,"result"],[348,34,366,16],[348,36,366,42],[348,41,366,47,"findDeclarationValueFragments"],[348,70,366,42],[348,71,366,77,"declaration"],[348,82,366,42],[348,84,366,90,"type"],[348,88,366,42],[348,90,366,96,"name"],[348,94,366,42],[348,95,366,16],[349,0,367,13],[349,9,365,19],[349,10,367,14,"bind"],[349,14,365,19],[349,15,367,19],[349,19,365,19],[350,0,363,30],[350,7,363,8],[351,0,370,8],[351,13,370,15,"result"],[351,19,370,8],[352,0,371,5],[352,5,133,18],[353,0,373,4,"getAtrule"],[353,4,373,4,"getAtrule"],[353,13,373,13],[353,15,373,15],[353,34,373,24,"atruleName"],[353,44,373,15],[353,46,373,61],[354,0,373,61],[354,10,373,36,"fallbackBasename"],[354,26,373,61],[354,97,373,55],[354,101,373,61],[356,0,374,8],[356,10,374,12,"atrule"],[356,16,374,18],[356,19,374,21],[356,69,374,27,"keyword"],[356,76,374,21],[356,77,374,35,"atruleName"],[356,87,374,21],[356,88,374,8],[358,0,375,8],[358,10,375,12,"atruleEntry"],[358,21,375,23],[358,24,375,26,"atrule"],[358,30,375,32],[358,31,375,33,"vendor"],[358,37,375,26],[358,41,375,43,"fallbackBasename"],[358,57,375,26],[358,60,376,14],[358,65,376,19,"atrules"],[358,72,376,14],[358,73,376,27,"atrule"],[358,79,376,33],[358,80,376,34,"name"],[358,84,376,14],[358,89,376,43],[358,94,376,48,"atrules"],[358,101,376,43],[358,102,376,56,"atrule"],[358,108,376,62],[358,109,376,63,"basename"],[358,117,376,43],[358,118,375,26],[358,121,377,14],[358,126,377,19,"atrules"],[358,133,377,14],[358,134,377,27,"atrule"],[358,140,377,33],[358,141,377,34,"name"],[358,145,377,14],[358,146,375,8],[359,0,379,8],[359,13,379,15,"atruleEntry"],[359,24,379,26],[359,28,379,30],[359,32,379,8],[360,0,380,5],[360,5,133,18],[361,0,381,4,"getAtrulePrelude"],[361,4,381,4,"getAtrulePrelude"],[361,20,381,20],[361,22,381,22],[361,48,381,31,"atruleName"],[361,58,381,22],[361,60,381,68],[362,0,381,68],[362,10,381,43,"fallbackBasename"],[362,26,381,68],[362,97,381,62],[362,101,381,68],[363,0,382,8],[363,10,382,14,"atrule"],[363,16,382,20],[363,19,382,23],[363,24,382,28,"getAtrule"],[363,33,382,23],[363,34,382,38,"atruleName"],[363,44,382,23],[363,46,382,50,"fallbackBasename"],[363,62,382,23],[363,63,382,8],[364,0,384,8],[364,13,384,15,"atrule"],[364,19,384,21],[364,23,384,25,"atrule"],[364,29,384,31],[364,30,384,32,"prelude"],[364,37,384,15],[364,41,384,43],[364,45,384,8],[365,0,385,5],[365,5,133,18],[366,0,386,4,"getAtruleDescriptor"],[366,4,386,4,"getAtruleDescriptor"],[366,23,386,23],[366,25,386,25],[366,54,386,34,"atruleName"],[366,64,386,25],[366,66,386,46,"name"],[366,70,386,25],[366,72,386,52],[367,0,387,8],[367,13,387,15],[367,18,387,20,"atrules"],[367,25,387,15],[367,26,387,28,"hasOwnProperty"],[367,40,387,15],[367,41,387,43,"atruleName"],[367,51,387,15],[367,56,387,58],[367,61,387,63,"atrules"],[367,68,387,58],[367,69,387,71,"declarators"],[367,80,387,15],[367,83,388,14],[367,88,388,19,"atrules"],[367,95,388,14],[367,96,388,27,"atruleName"],[367,106,388,14],[367,108,388,39,"declarators"],[367,119,388,14],[367,120,388,51,"name"],[367,124,388,14],[367,129,388,60],[367,133,387,15],[367,136,389,14],[367,140,387,8],[368,0,390,5],[368,5,133,18],[369,0,391,4,"getProperty"],[369,4,391,4,"getProperty"],[369,15,391,15],[369,17,391,17],[369,38,391,26,"propertyName"],[369,50,391,17],[369,52,391,65],[370,0,391,65],[370,10,391,40,"fallbackBasename"],[370,26,391,65],[370,97,391,59],[370,101,391,65],[372,0,392,8],[372,10,392,12,"property"],[372,18,392,20],[372,21,392,23],[372,71,392,29,"property"],[372,79,392,23],[372,80,392,38,"propertyName"],[372,92,392,23],[372,93,392,8],[374,0,393,8],[374,10,393,12,"propertyEntry"],[374,23,393,25],[374,26,393,28,"property"],[374,34,393,36],[374,35,393,37,"vendor"],[374,41,393,28],[374,45,393,47,"fallbackBasename"],[374,61,393,28],[374,64,394,14],[374,69,394,19,"properties"],[374,79,394,14],[374,80,394,30,"property"],[374,88,394,38],[374,89,394,39,"name"],[374,93,394,14],[374,98,394,48],[374,103,394,53,"properties"],[374,113,394,48],[374,114,394,64,"property"],[374,122,394,72],[374,123,394,73,"basename"],[374,131,394,48],[374,132,393,28],[374,135,395,14],[374,140,395,19,"properties"],[374,150,395,14],[374,151,395,30,"property"],[374,159,395,38],[374,160,395,39,"name"],[374,164,395,14],[374,165,393,8],[375,0,397,8],[375,13,397,15,"propertyEntry"],[375,26,397,28],[375,30,397,32],[375,34,397,8],[376,0,398,5],[376,5,133,18],[377,0,399,4,"getType"],[377,4,399,4,"getType"],[377,11,399,11],[377,13,399,13],[377,30,399,22,"name"],[377,34,399,13],[377,36,399,28],[378,0,400,8],[378,13,400,15],[378,18,400,20,"types"],[378,23,400,15],[378,24,400,26,"hasOwnProperty"],[378,38,400,15],[378,39,400,41,"name"],[378,43,400,15],[378,47,400,49],[378,52,400,54,"types"],[378,57,400,49],[378,58,400,60,"name"],[378,62,400,49],[378,63,400,15],[378,66,400,68],[378,70,400,8],[379,0,401,5],[379,5,133,18],[380,0,403,4,"validate"],[380,4,403,4,"validate"],[380,12,403,12],[380,14,403,14],[380,34,403,25],[381,0,404,8],[381,15,404,17,"validate"],[381,23,404,8],[381,24,404,26,"syntax"],[381,30,404,8],[381,32,404,34,"name"],[381,36,404,8],[381,38,404,40,"broken"],[381,44,404,8],[381,46,404,48,"descriptor"],[381,56,404,8],[381,58,404,60],[382,0,405,12],[382,12,405,16,"broken"],[382,18,405,22],[382,19,405,23,"hasOwnProperty"],[382,33,405,16],[382,34,405,38,"name"],[382,38,405,16],[382,39,405,12],[382,41,405,45],[383,0,406,16],[383,17,406,23,"broken"],[383,23,406,29],[383,24,406,30,"name"],[383,28,406,29],[383,29,406,16],[384,0,407,13],[386,0,409,12,"broken"],[386,8,409,12,"broken"],[386,14,409,18],[386,15,409,19,"name"],[386,19,409,18],[386,20,409,12],[386,23,409,27],[386,28,409,12],[388,0,410,12],[388,12,410,16,"descriptor"],[388,22,410,26],[388,23,410,27,"syntax"],[388,29,410,16],[388,34,410,38],[388,38,410,12],[388,40,410,44],[389,0,411,16],[389,71,411,21,"descriptor"],[389,81,411,31],[389,82,411,32,"syntax"],[389,88,411,16],[389,90,411,40],[389,100,411,49,"node"],[389,104,411,40],[389,106,411,55],[390,0,412,20],[390,16,412,24,"node"],[390,20,412,28],[390,21,412,29,"type"],[390,25,412,24],[390,30,412,38],[390,36,412,24],[390,40,412,48,"node"],[390,44,412,52],[390,45,412,53,"type"],[390,49,412,48],[390,54,412,62],[390,64,412,20],[390,66,412,74],[391,0,413,24],[392,0,414,21],[394,0,416,20],[394,16,416,24,"map"],[394,19,416,27],[394,22,416,30,"node"],[394,26,416,34],[394,27,416,35,"type"],[394,31,416,30],[394,36,416,44],[394,42,416,30],[394,45,416,53,"syntax"],[394,51,416,59],[394,52,416,60,"types"],[394,57,416,30],[394,60,416,68,"syntax"],[394,66,416,74],[394,67,416,75,"properties"],[394,77,416,20],[395,0,417,20],[395,16,417,24,"brokenMap"],[395,25,417,33],[395,28,417,36,"node"],[395,32,417,40],[395,33,417,41,"type"],[395,37,417,36],[395,42,417,50],[395,48,417,36],[395,51,417,59,"brokenTypes"],[395,62,417,36],[395,65,417,73,"brokenProperties"],[395,81,417,20],[397,0,419,20],[397,16,419,24],[397,17,419,25,"map"],[397,20,419,28],[397,21,419,29,"hasOwnProperty"],[397,35,419,25],[397,36,419,44,"node"],[397,40,419,48],[397,41,419,49,"name"],[397,45,419,25],[397,46,419,24],[397,50,419,58,"validate"],[397,58,419,66],[397,59,419,67,"syntax"],[397,65,419,66],[397,67,419,75,"node"],[397,71,419,79],[397,72,419,80,"name"],[397,76,419,66],[397,78,419,86,"brokenMap"],[397,87,419,66],[397,89,419,97,"map"],[397,92,419,100],[397,93,419,101,"node"],[397,97,419,105],[397,98,419,106,"name"],[397,102,419,100],[397,103,419,66],[397,104,419,20],[397,106,419,114],[398,0,420,24,"broken"],[398,14,420,24,"broken"],[398,20,420,30],[398,21,420,31,"name"],[398,25,420,30],[398,26,420,24],[398,29,420,39],[398,33,420,24],[399,0,421,21],[400,0,422,17],[400,11,411,16],[400,13,422,19],[400,17,411,16],[401,0,423,13],[402,0,424,9],[404,0,426,8],[404,10,426,12,"brokenTypes"],[404,21,426,23],[404,24,426,26],[404,26,426,8],[405,0,427,8],[405,10,427,12,"brokenProperties"],[405,26,427,28],[405,29,427,31],[405,31,427,8],[407,0,429,8],[407,11,429,13],[407,15,429,17,"key"],[407,18,429,8],[407,22,429,24],[407,27,429,29,"types"],[407,32,429,8],[407,34,429,36],[408,0,430,12,"validate"],[408,8,430,12,"validate"],[408,16,430,20],[408,17,430,21],[408,21,430,20],[408,23,430,27,"key"],[408,26,430,20],[408,28,430,32,"brokenTypes"],[408,39,430,20],[408,41,430,45],[408,46,430,50,"types"],[408,51,430,45],[408,52,430,56,"key"],[408,55,430,45],[408,56,430,20],[408,57,430,12],[409,0,431,9],[411,0,433,8],[411,11,433,13],[411,15,433,17,"key"],[411,18,433,8],[411,22,433,24],[411,27,433,29,"properties"],[411,37,433,8],[411,39,433,41],[412,0,434,12,"validate"],[412,8,434,12,"validate"],[412,16,434,20],[412,17,434,21],[412,21,434,20],[412,23,434,27,"key"],[412,26,434,20],[412,28,434,32,"brokenProperties"],[412,44,434,20],[412,46,434,50],[412,51,434,55,"properties"],[412,61,434,50],[412,62,434,66,"key"],[412,65,434,50],[412,66,434,20],[412,67,434,12],[413,0,435,9],[415,0,437,8,"brokenTypes"],[415,6,437,8,"brokenTypes"],[415,17,437,19],[415,20,437,22,"Object"],[415,26,437,28],[415,27,437,29,"keys"],[415,31,437,22],[415,32,437,34,"brokenTypes"],[415,43,437,22],[415,45,437,47,"filter"],[415,51,437,22],[415,52,437,54],[415,62,437,63,"name"],[415,66,437,54],[415,68,437,69],[416,0,438,12],[416,15,438,19,"brokenTypes"],[416,26,438,30],[416,27,438,31,"name"],[416,31,438,30],[416,32,438,12],[417,0,439,9],[417,7,437,22],[417,8,437,8],[418,0,440,8,"brokenProperties"],[418,6,440,8,"brokenProperties"],[418,22,440,24],[418,25,440,27,"Object"],[418,31,440,33],[418,32,440,34,"keys"],[418,36,440,27],[418,37,440,39,"brokenProperties"],[418,53,440,27],[418,55,440,57,"filter"],[418,61,440,27],[418,62,440,64],[418,72,440,73,"name"],[418,76,440,64],[418,78,440,79],[419,0,441,12],[419,15,441,19,"brokenProperties"],[419,31,441,35],[419,32,441,36,"name"],[419,36,441,35],[419,37,441,12],[420,0,442,9],[420,7,440,27],[420,8,440,8],[422,0,444,8],[422,10,444,12,"brokenTypes"],[422,21,444,23],[422,22,444,24,"length"],[422,28,444,12],[422,32,444,34,"brokenProperties"],[422,48,444,50],[422,49,444,51,"length"],[422,55,444,8],[422,57,444,59],[423,0,445,12],[423,15,445,19],[424,0,446,16,"types"],[424,10,446,16,"types"],[424,15,446,21],[424,17,446,23,"brokenTypes"],[424,28,445,19],[425,0,447,16,"properties"],[425,10,447,16,"properties"],[425,20,447,26],[425,22,447,28,"brokenProperties"],[426,0,445,19],[426,9,445,12],[427,0,449,9],[429,0,451,8],[429,13,451,15],[429,17,451,8],[430,0,452,5],[430,5,133,18],[431,0,453,4,"dump"],[431,4,453,4,"dump"],[431,8,453,8],[431,10,453,10],[431,24,453,19,"syntaxAsAst"],[431,35,453,10],[431,37,453,32,"pretty"],[431,43,453,10],[431,45,453,40],[432,0,454,8],[432,13,454,15],[433,0,455,12,"generic"],[433,8,455,12,"generic"],[433,15,455,19],[433,17,455,21],[433,22,455,26,"generic"],[433,29,454,15],[434,0,456,12,"types"],[434,8,456,12,"types"],[434,13,456,17],[434,15,456,19,"dumpMapSyntax"],[434,28,456,32],[434,29,456,33],[434,34,456,38,"types"],[434,39,456,32],[434,41,456,45],[434,42,456,46,"pretty"],[434,48,456,32],[434,50,456,54,"syntaxAsAst"],[434,61,456,32],[434,62,454,15],[435,0,457,12,"properties"],[435,8,457,12,"properties"],[435,18,457,22],[435,20,457,24,"dumpMapSyntax"],[435,33,457,37],[435,34,457,38],[435,39,457,43,"properties"],[435,49,457,37],[435,51,457,55],[435,52,457,56,"pretty"],[435,58,457,37],[435,60,457,64,"syntaxAsAst"],[435,71,457,37],[435,72,454,15],[436,0,458,12,"atrules"],[436,8,458,12,"atrules"],[436,15,458,19],[436,17,458,21,"dumpAtruleMapSyntax"],[436,36,458,40],[436,37,458,41],[436,42,458,46,"atrules"],[436,49,458,40],[436,51,458,55],[436,52,458,56,"pretty"],[436,58,458,40],[436,60,458,64,"syntaxAsAst"],[436,71,458,40],[437,0,454,15],[437,7,454,8],[438,0,460,5],[438,5,133,18],[439,0,461,4,"toString"],[439,4,461,4,"toString"],[439,12,461,12],[439,14,461,14],[439,34,461,25],[440,0,462,8],[440,13,462,15,"JSON"],[440,17,462,19],[440,18,462,20,"stringify"],[440,27,462,15],[440,28,462,30],[440,33,462,35,"dump"],[440,37,462,30],[440,39,462,15],[440,40,462,8],[441,0,463,5],[442,0,133,18],[442,3,133,0],[443,0,466,0,"module"],[443,2,466,0,"module"],[443,8,466,6],[443,9,466,7,"exports"],[443,16,466,0],[443,19,466,17,"Lexer"],[443,24,466,0]],"functionMap":{"names":["<global>","dumpMapSyntax","dumpAtruleMapSyntax","valueHasVar","buildMatchResult","matchSyntax","Lexer","prototype.checkStructure","collectWarning","syntax.walk$argument_1","prototype.createDescriptor","Object.defineProperty$argument_2.get","prototype.addAtrule_","Object.keys.reduce$argument_0","prototype.addProperty_","prototype.addType_","prototype.checkAtruleName","prototype.checkAtrulePrelude","prototype.checkAtruleDescriptorName","prototype.checkPropertyName","prototype.matchAtrulePrelude","prototype.matchAtruleDescriptor","prototype.matchDeclaration","prototype.matchProperty","prototype.matchType","prototype.match","prototype.findValueFragments","prototype.findDeclarationValueFragments","prototype.findAllFragments","<anonymous>","prototype.getAtrule","prototype.getAtrulePrelude","prototype.getAtruleDescriptor","prototype.getProperty","prototype.getType","prototype.validate","validate","walk$argument_1","Object.keys.filter$argument_0","prototype.dump","prototype.toString"],"mappings":"AAA;ACgB;CDY;AEE;CFe;AGE;CHQ;AIE;CJU;AKE;CLwB;YME;CNmC;oBOI;QCC;SDK;8BEK;SFM;KPG;sBUE;yBCmB;qBDM;qBCQ;iBDM;KVK;gBYC;yDCU;iBDG;KZG;kBcC;KdM;ceC;KfU;qBgBE;KhBI;wBiBC;KjBgB;+BkBC;KlBkB;uBmBC;KnBW;wBoBE;KpBY;2BqBC;KrBW;sBsBC;KtBM;mBuBC;KvBQ;ewBC;KxBQ;WyBC;KzBU;wB0BE;K1BE;mC2BC;K3BE;sB4BC;mBCK;aDE;K5BI;e8BE;K9BO;sB+BC;K/BI;yBgCC;KhCI;iBiCC;KjCO;akCC;KlCE;cmCE;QCC;wCCO;iBDW;SDE;sDGa;SHE;gEGC;SHE;KnCU;UuCC;KvCO;cwCC;KxCE"}},"type":"js/module"}]}