{"dependencies":[{"name":"../common/TokenStream","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":18},"end":{"line":3,"column":35}}]}},{"name":"../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":43,"column":4},"end":{"line":43,"column":30}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var tokenStream = new (_$$_REQUIRE(_dependencyMap[0], \"../common/TokenStream\"))();\n  var astToTokens = {\n    decorator: function decorator(handlers) {\n      var curNode = null;\n      var prev = {\n        len: 0,\n        node: null\n      };\n      var nodes = [prev];\n      var buffer = '';\n      return {\n        children: handlers.children,\n        node: function node(_node) {\n          var tmp = curNode;\n          curNode = _node;\n          handlers.node.call(this, _node);\n          curNode = tmp;\n        },\n        chunk: function chunk(_chunk) {\n          buffer += _chunk;\n\n          if (prev.node !== curNode) {\n            nodes.push({\n              len: _chunk.length,\n              node: curNode\n            });\n          } else {\n            prev.len += _chunk.length;\n          }\n        },\n        result: function result() {\n          return prepareTokens(buffer, nodes);\n        }\n      };\n    }\n  };\n\n  function prepareTokens(str, nodes) {\n    var tokens = [];\n    var nodesOffset = 0;\n    var nodesIndex = 0;\n    var currentNode = nodes ? nodes[nodesIndex].node : null;\n\n    _$$_REQUIRE(_dependencyMap[1], \"../tokenizer\")(str, tokenStream);\n\n    while (!tokenStream.eof) {\n      if (nodes) {\n        while (nodesIndex < nodes.length && nodesOffset + nodes[nodesIndex].len <= tokenStream.tokenStart) {\n          nodesOffset += nodes[nodesIndex++].len;\n          currentNode = nodes[nodesIndex].node;\n        }\n      }\n\n      tokens.push({\n        type: tokenStream.tokenType,\n        value: tokenStream.getTokenValue(),\n        index: tokenStream.tokenIndex,\n        balance: tokenStream.balance[tokenStream.tokenIndex],\n        node: currentNode\n      });\n      tokenStream.next();\n    }\n\n    return tokens;\n  }\n\n  module.exports = function (value, syntax) {\n    if (typeof value === 'string') {\n      return prepareTokens(value, null);\n    }\n\n    return syntax.generate(value, astToTokens);\n  };\n});","lineCount":75,"map":[[2,0,3,0],[2,6,3,4,"tokenStream"],[2,17,3,15],[2,20,3,18],[2,83,3,0],[3,0,4,0],[3,6,4,4,"astToTokens"],[3,17,4,15],[3,20,4,18],[4,0,5,4,"decorator"],[4,4,5,4,"decorator"],[4,13,5,13],[4,15,5,15],[4,34,5,24,"handlers"],[4,42,5,15],[4,44,5,34],[5,0,6,8],[5,10,6,12,"curNode"],[5,17,6,19],[5,20,6,22],[5,24,6,8],[6,0,7,8],[6,10,7,12,"prev"],[6,14,7,16],[6,17,7,19],[7,0,7,21,"len"],[7,8,7,21,"len"],[7,11,7,24],[7,13,7,26],[7,14,7,19],[8,0,7,29,"node"],[8,8,7,29,"node"],[8,12,7,33],[8,14,7,35],[9,0,7,19],[9,7,7,8],[10,0,8,8],[10,10,8,12,"nodes"],[10,15,8,17],[10,18,8,20],[10,19,8,21,"prev"],[10,23,8,20],[10,24,8,8],[11,0,9,8],[11,10,9,12,"buffer"],[11,16,9,18],[11,19,9,21],[11,21,9,8],[12,0,11,8],[12,13,11,15],[13,0,12,12,"children"],[13,8,12,12,"children"],[13,16,12,20],[13,18,12,22,"handlers"],[13,26,12,30],[13,27,12,31,"children"],[13,35,11,15],[14,0,13,12,"node"],[14,8,13,12,"node"],[14,12,13,16],[14,14,13,18],[14,28,13,27,"node"],[14,33,13,18],[14,35,13,33],[15,0,14,16],[15,14,14,20,"tmp"],[15,17,14,23],[15,20,14,26,"curNode"],[15,27,14,16],[16,0,15,16,"curNode"],[16,10,15,16,"curNode"],[16,17,15,23],[16,20,15,26,"node"],[16,25,15,16],[17,0,16,16,"handlers"],[17,10,16,16,"handlers"],[17,18,16,24],[17,19,16,25,"node"],[17,23,16,16],[17,24,16,30,"call"],[17,28,16,16],[17,29,16,35],[17,33,16,16],[17,35,16,41,"node"],[17,40,16,16],[18,0,17,16,"curNode"],[18,10,17,16,"curNode"],[18,17,17,23],[18,20,17,26,"tmp"],[18,23,17,16],[19,0,18,13],[19,9,11,15],[20,0,19,12,"chunk"],[20,8,19,12,"chunk"],[20,13,19,17],[20,15,19,19],[20,30,19,28,"chunk"],[20,36,19,19],[20,38,19,35],[21,0,20,16,"buffer"],[21,10,20,16,"buffer"],[21,16,20,22],[21,20,20,26,"chunk"],[21,26,20,16],[23,0,21,16],[23,14,21,20,"prev"],[23,18,21,24],[23,19,21,25,"node"],[23,23,21,20],[23,28,21,34,"curNode"],[23,35,21,16],[23,37,21,43],[24,0,22,20,"nodes"],[24,12,22,20,"nodes"],[24,17,22,25],[24,18,22,26,"push"],[24,22,22,20],[24,23,22,31],[25,0,23,24,"len"],[25,14,23,24,"len"],[25,17,23,27],[25,19,23,29,"chunk"],[25,25,23,34],[25,26,23,35,"length"],[25,32,22,31],[26,0,24,24,"node"],[26,14,24,24,"node"],[26,18,24,28],[26,20,24,30,"curNode"],[27,0,22,31],[27,13,22,20],[28,0,26,17],[28,11,21,16],[28,17,26,23],[29,0,27,20,"prev"],[29,12,27,20,"prev"],[29,16,27,24],[29,17,27,25,"len"],[29,20,27,20],[29,24,27,32,"chunk"],[29,30,27,37],[29,31,27,38,"length"],[29,37,27,20],[30,0,28,17],[31,0,29,13],[31,9,11,15],[32,0,30,12,"result"],[32,8,30,12,"result"],[32,14,30,18],[32,16,30,20],[32,34,30,31],[33,0,31,16],[33,17,31,23,"prepareTokens"],[33,30,31,36],[33,31,31,37,"buffer"],[33,37,31,36],[33,39,31,45,"nodes"],[33,44,31,36],[33,45,31,16],[34,0,32,13],[35,0,11,15],[35,7,11,8],[36,0,34,5],[37,0,4,18],[37,3,4,0],[39,0,37,0],[39,11,37,9,"prepareTokens"],[39,24,37,0],[39,25,37,23,"str"],[39,28,37,0],[39,30,37,28,"nodes"],[39,35,37,0],[39,37,37,35],[40,0,38,4],[40,8,38,8,"tokens"],[40,14,38,14],[40,17,38,17],[40,19,38,4],[41,0,39,4],[41,8,39,8,"nodesOffset"],[41,19,39,19],[41,22,39,22],[41,23,39,4],[42,0,40,4],[42,8,40,8,"nodesIndex"],[42,18,40,18],[42,21,40,21],[42,22,40,4],[43,0,41,4],[43,8,41,8,"currentNode"],[43,19,41,19],[43,22,41,22,"nodes"],[43,27,41,27],[43,30,41,30,"nodes"],[43,35,41,35],[43,36,41,36,"nodesIndex"],[43,46,41,35],[43,47,41,30],[43,48,41,48,"node"],[43,52,41,27],[43,55,41,55],[43,59,41,4],[45,0,43,4],[45,51,43,13,"str"],[45,54,43,4],[45,56,43,18,"tokenStream"],[45,67,43,4],[47,0,45,4],[47,11,45,11],[47,12,45,12,"tokenStream"],[47,23,45,23],[47,24,45,24,"eof"],[47,27,45,4],[47,29,45,29],[48,0,46,8],[48,10,46,12,"nodes"],[48,15,46,8],[48,17,46,19],[49,0,47,12],[49,15,47,19,"nodesIndex"],[49,25,47,29],[49,28,47,32,"nodes"],[49,33,47,37],[49,34,47,38,"length"],[49,40,47,19],[49,44,47,48,"nodesOffset"],[49,55,47,59],[49,58,47,62,"nodes"],[49,63,47,67],[49,64,47,68,"nodesIndex"],[49,74,47,67],[49,75,47,62],[49,76,47,80,"len"],[49,79,47,48],[49,83,47,87,"tokenStream"],[49,94,47,98],[49,95,47,99,"tokenStart"],[49,105,47,12],[49,107,47,111],[50,0,48,16,"nodesOffset"],[50,10,48,16,"nodesOffset"],[50,21,48,27],[50,25,48,31,"nodes"],[50,30,48,36],[50,31,48,37,"nodesIndex"],[50,41,48,47],[50,43,48,36],[50,44,48,31],[50,45,48,51,"len"],[50,48,48,16],[51,0,49,16,"currentNode"],[51,10,49,16,"currentNode"],[51,21,49,27],[51,24,49,30,"nodes"],[51,29,49,35],[51,30,49,36,"nodesIndex"],[51,40,49,35],[51,41,49,30],[51,42,49,48,"node"],[51,46,49,16],[52,0,50,13],[53,0,51,9],[55,0,53,8,"tokens"],[55,6,53,8,"tokens"],[55,12,53,14],[55,13,53,15,"push"],[55,17,53,8],[55,18,53,20],[56,0,54,12,"type"],[56,8,54,12,"type"],[56,12,54,16],[56,14,54,18,"tokenStream"],[56,25,54,29],[56,26,54,30,"tokenType"],[56,35,53,20],[57,0,55,12,"value"],[57,8,55,12,"value"],[57,13,55,17],[57,15,55,19,"tokenStream"],[57,26,55,30],[57,27,55,31,"getTokenValue"],[57,40,55,19],[57,42,53,20],[58,0,56,12,"index"],[58,8,56,12,"index"],[58,13,56,17],[58,15,56,19,"tokenStream"],[58,26,56,30],[58,27,56,31,"tokenIndex"],[58,37,53,20],[59,0,57,12,"balance"],[59,8,57,12,"balance"],[59,15,57,19],[59,17,57,21,"tokenStream"],[59,28,57,32],[59,29,57,33,"balance"],[59,36,57,21],[59,37,57,41,"tokenStream"],[59,48,57,52],[59,49,57,53,"tokenIndex"],[59,59,57,21],[59,60,53,20],[60,0,58,12,"node"],[60,8,58,12,"node"],[60,12,58,16],[60,14,58,18,"currentNode"],[61,0,53,20],[61,7,53,8],[62,0,60,8,"tokenStream"],[62,6,60,8,"tokenStream"],[62,17,60,19],[62,18,60,20,"next"],[62,22,60,8],[63,0,62,5],[65,0,64,4],[65,11,64,11,"tokens"],[65,17,64,4],[66,0,65,1],[68,0,67,0,"module"],[68,2,67,0,"module"],[68,8,67,6],[68,9,67,7,"exports"],[68,16,67,0],[68,19,67,17],[68,29,67,26,"value"],[68,34,67,17],[68,36,67,33,"syntax"],[68,42,67,17],[68,44,67,41],[69,0,68,4],[69,8,68,8],[69,15,68,15,"value"],[69,20,68,8],[69,25,68,25],[69,33,68,4],[69,35,68,35],[70,0,69,8],[70,13,69,15,"prepareTokens"],[70,26,69,28],[70,27,69,29,"value"],[70,32,69,28],[70,34,69,36],[70,38,69,28],[70,39,69,8],[71,0,70,5],[73,0,72,4],[73,11,72,11,"syntax"],[73,17,72,17],[73,18,72,18,"generate"],[73,26,72,11],[73,27,72,27,"value"],[73,32,72,11],[73,34,72,34,"astToTokens"],[73,45,72,11],[73,46,72,4],[74,0,73,1],[74,3,67,0]],"functionMap":{"names":["<global>","astToTokens.decorator","node","chunk","result","prepareTokens","module.exports"],"mappings":"AAA;eCI;kBCQ;aDK;mBEC;aFU;oBGC;aHE;KDE;AKG;CL4B;iBME;CNM"}},"type":"js/module"}]}