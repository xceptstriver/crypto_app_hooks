{"dependencies":[{"name":"../definition-syntax/parse","data":{"asyncType":null,"locs":[{"start":{"line":445,"column":25},"end":{"line":445,"column":42}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var MATCH = {\n    type: 'Match'\n  };\n  var MISMATCH = {\n    type: 'Mismatch'\n  };\n  var DISALLOW_EMPTY = {\n    type: 'DisallowEmpty'\n  };\n  var LEFTPARENTHESIS = 40;\n  var RIGHTPARENTHESIS = 41;\n\n  function createCondition(match, thenBranch, elseBranch) {\n    if (thenBranch === MATCH && elseBranch === MISMATCH) {\n      return match;\n    }\n\n    if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {\n      return match;\n    }\n\n    if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {\n      thenBranch = match.then;\n      match = match.match;\n    }\n\n    return {\n      type: 'If',\n      match: match,\n      then: thenBranch,\n      else: elseBranch\n    };\n  }\n\n  function isFunctionType(name) {\n    return name.length > 2 && name.charCodeAt(name.length - 2) === LEFTPARENTHESIS && name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS;\n  }\n\n  function isEnumCapatible(term) {\n    return term.type === 'Keyword' || term.type === 'AtKeyword' || term.type === 'Function' || term.type === 'Type' && isFunctionType(term.name);\n  }\n\n  function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {\n    switch (combinator) {\n      case ' ':\n        var result = MATCH;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          result = createCondition(term, result, MISMATCH);\n        }\n\n        ;\n        return result;\n\n      case '|':\n        var result = MISMATCH;\n        var map = null;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n\n          if (isEnumCapatible(term)) {\n            if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {\n              map = Object.create(null);\n              result = createCondition({\n                type: 'Enum',\n                map: map\n              }, MATCH, result);\n            }\n\n            if (map !== null) {\n              var key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();\n\n              if (key in map === false) {\n                map[key] = term;\n                continue;\n              }\n            }\n          }\n\n          map = null;\n          result = createCondition(term, MATCH, result);\n        }\n\n        ;\n        return result;\n\n      case '&&':\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: true\n          };\n        }\n\n        var result = MISMATCH;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), false);\n          } else {\n            thenClause = MATCH;\n          }\n\n          result = createCondition(term, thenClause, result);\n        }\n\n        ;\n        return result;\n\n      case '||':\n        if (terms.length > 5) {\n          return {\n            type: 'MatchOnce',\n            terms: terms,\n            all: false\n          };\n        }\n\n        var result = atLeastOneTermMatched ? MATCH : MISMATCH;\n\n        for (var i = terms.length - 1; i >= 0; i--) {\n          var term = terms[i];\n          var thenClause;\n\n          if (terms.length > 1) {\n            thenClause = buildGroupMatchGraph(combinator, terms.filter(function (newGroupTerm) {\n              return newGroupTerm !== term;\n            }), true);\n          } else {\n            thenClause = MATCH;\n          }\n\n          result = createCondition(term, thenClause, result);\n        }\n\n        ;\n        return result;\n    }\n  }\n\n  function buildMultiplierMatchGraph(node) {\n    var result = MATCH;\n\n    var matchTerm = _buildMatchGraph(node.term);\n\n    if (node.max === 0) {\n      matchTerm = createCondition(matchTerm, DISALLOW_EMPTY, MISMATCH);\n      result = createCondition(matchTerm, null, MISMATCH);\n      result.then = createCondition(MATCH, MATCH, result);\n\n      if (node.comma) {\n        result.then.else = createCondition({\n          type: 'Comma',\n          syntax: node\n        }, result, MISMATCH);\n      }\n    } else {\n      for (var i = node.min || 1; i <= node.max; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n\n        result = createCondition(matchTerm, createCondition(MATCH, MATCH, result), MISMATCH);\n      }\n    }\n\n    if (node.min === 0) {\n      result = createCondition(MATCH, MATCH, result);\n    } else {\n      for (var i = 0; i < node.min - 1; i++) {\n        if (node.comma && result !== MATCH) {\n          result = createCondition({\n            type: 'Comma',\n            syntax: node\n          }, result, MISMATCH);\n        }\n\n        result = createCondition(matchTerm, result, MISMATCH);\n      }\n    }\n\n    return result;\n  }\n\n  function _buildMatchGraph(node) {\n    if (typeof node === 'function') {\n      return {\n        type: 'Generic',\n        fn: node\n      };\n    }\n\n    switch (node.type) {\n      case 'Group':\n        var result = buildGroupMatchGraph(node.combinator, node.terms.map(_buildMatchGraph), false);\n\n        if (node.disallowEmpty) {\n          result = createCondition(result, DISALLOW_EMPTY, MISMATCH);\n        }\n\n        return result;\n\n      case 'Multiplier':\n        return buildMultiplierMatchGraph(node);\n\n      case 'Type':\n      case 'Property':\n        return {\n          type: node.type,\n          name: node.name,\n          syntax: node\n        };\n\n      case 'Keyword':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase(),\n          syntax: node\n        };\n\n      case 'AtKeyword':\n        return {\n          type: node.type,\n          name: '@' + node.name.toLowerCase(),\n          syntax: node\n        };\n\n      case 'Function':\n        return {\n          type: node.type,\n          name: node.name.toLowerCase() + '(',\n          syntax: node\n        };\n\n      case 'String':\n        if (node.value.length === 3) {\n          return {\n            type: 'Token',\n            value: node.value.charAt(1),\n            syntax: node\n          };\n        }\n\n        return {\n          type: node.type,\n          value: node.value.substr(1, node.value.length - 2).replace(/\\\\'/g, '\\''),\n          syntax: node\n        };\n\n      case 'Token':\n        return {\n          type: node.type,\n          value: node.value,\n          syntax: node\n        };\n\n      case 'Comma':\n        return {\n          type: node.type,\n          syntax: node\n        };\n\n      default:\n        throw new Error('Unknown node type:', node.type);\n    }\n  }\n\n  module.exports = {\n    MATCH: MATCH,\n    MISMATCH: MISMATCH,\n    DISALLOW_EMPTY: DISALLOW_EMPTY,\n    buildMatchGraph: function buildMatchGraph(syntaxTree, ref) {\n      if (typeof syntaxTree === 'string') {\n        syntaxTree = _$$_REQUIRE(_dependencyMap[0], \"../definition-syntax/parse\")(syntaxTree);\n      }\n\n      return {\n        type: 'MatchGraph',\n        match: _buildMatchGraph(syntaxTree),\n        syntax: ref || null,\n        source: syntaxTree\n      };\n    }\n  };\n});","lineCount":297,"map":[[2,0,3,0],[2,6,3,4,"MATCH"],[2,11,3,9],[2,14,3,12],[3,0,3,14,"type"],[3,4,3,14,"type"],[3,8,3,18],[3,10,3,20],[4,0,3,12],[4,3,3,0],[5,0,4,0],[5,6,4,4,"MISMATCH"],[5,14,4,12],[5,17,4,15],[6,0,4,17,"type"],[6,4,4,17,"type"],[6,8,4,21],[6,10,4,23],[7,0,4,15],[7,3,4,0],[8,0,5,0],[8,6,5,4,"DISALLOW_EMPTY"],[8,20,5,18],[8,23,5,21],[9,0,5,23,"type"],[9,4,5,23,"type"],[9,8,5,27],[9,10,5,29],[10,0,5,21],[10,3,5,0],[11,0,6,0],[11,6,6,4,"LEFTPARENTHESIS"],[11,21,6,19],[11,24,6,22],[11,26,6,0],[12,0,7,0],[12,6,7,4,"RIGHTPARENTHESIS"],[12,22,7,20],[12,25,7,23],[12,27,7,0],[14,0,9,0],[14,11,9,9,"createCondition"],[14,26,9,0],[14,27,9,25,"match"],[14,32,9,0],[14,34,9,32,"thenBranch"],[14,44,9,0],[14,46,9,44,"elseBranch"],[14,56,9,0],[14,58,9,56],[15,0,11,4],[15,8,11,8,"thenBranch"],[15,18,11,18],[15,23,11,23,"MATCH"],[15,28,11,8],[15,32,11,32,"elseBranch"],[15,42,11,42],[15,47,11,47,"MISMATCH"],[15,55,11,4],[15,57,11,57],[16,0,12,8],[16,13,12,15,"match"],[16,18,12,8],[17,0,13,5],[19,0,15,4],[19,8,15,8,"match"],[19,13,15,13],[19,18,15,18,"MATCH"],[19,23,15,8],[19,27,15,27,"thenBranch"],[19,37,15,37],[19,42,15,42,"MATCH"],[19,47,15,8],[19,51,15,51,"elseBranch"],[19,61,15,61],[19,66,15,66,"MATCH"],[19,71,15,4],[19,73,15,73],[20,0,16,8],[20,13,16,15,"match"],[20,18,16,8],[21,0,17,5],[23,0,19,4],[23,8,19,8,"match"],[23,13,19,13],[23,14,19,14,"type"],[23,18,19,8],[23,23,19,23],[23,27,19,8],[23,31,19,31,"match"],[23,36,19,36],[23,37,19,37,"else"],[23,41,19,31],[23,46,19,46,"MISMATCH"],[23,54,19,8],[23,58,19,58,"thenBranch"],[23,68,19,68],[23,73,19,73,"MATCH"],[23,78,19,4],[23,80,19,80],[24,0,20,8,"thenBranch"],[24,6,20,8,"thenBranch"],[24,16,20,18],[24,19,20,21,"match"],[24,24,20,26],[24,25,20,27,"then"],[24,29,20,8],[25,0,21,8,"match"],[25,6,21,8,"match"],[25,11,21,13],[25,14,21,16,"match"],[25,19,21,21],[25,20,21,22,"match"],[25,25,21,8],[26,0,22,5],[28,0,24,4],[28,11,24,11],[29,0,25,8,"type"],[29,6,25,8,"type"],[29,10,25,12],[29,12,25,14],[29,16,24,11],[30,0,26,8,"match"],[30,6,26,8,"match"],[30,11,26,13],[30,13,26,15,"match"],[30,18,24,11],[31,0,27,8,"then"],[31,6,27,8,"then"],[31,10,27,12],[31,12,27,14,"thenBranch"],[31,22,24,11],[32,0,28,8,"else"],[32,6,28,8,"else"],[32,10,28,12],[32,12,28,14,"elseBranch"],[33,0,24,11],[33,5,24,4],[34,0,30,1],[36,0,32,0],[36,11,32,9,"isFunctionType"],[36,25,32,0],[36,26,32,24,"name"],[36,30,32,0],[36,32,32,30],[37,0,33,4],[37,11,34,8,"name"],[37,15,34,12],[37,16,34,13,"length"],[37,22,34,8],[37,25,34,22],[37,26,34,8],[37,30,35,8,"name"],[37,34,35,12],[37,35,35,13,"charCodeAt"],[37,45,35,8],[37,46,35,24,"name"],[37,50,35,28],[37,51,35,29,"length"],[37,57,35,24],[37,60,35,38],[37,61,35,8],[37,67,35,45,"LEFTPARENTHESIS"],[37,82,34,8],[37,86,36,8,"name"],[37,90,36,12],[37,91,36,13,"charCodeAt"],[37,101,36,8],[37,102,36,24,"name"],[37,106,36,28],[37,107,36,29,"length"],[37,113,36,24],[37,116,36,38],[37,117,36,8],[37,123,36,45,"RIGHTPARENTHESIS"],[37,139,33,4],[38,0,38,1],[40,0,40,0],[40,11,40,9,"isEnumCapatible"],[40,26,40,0],[40,27,40,25,"term"],[40,31,40,0],[40,33,40,31],[41,0,41,4],[41,11,42,8,"term"],[41,15,42,12],[41,16,42,13,"type"],[41,20,42,8],[41,25,42,22],[41,34,42,8],[41,38,43,8,"term"],[41,42,43,12],[41,43,43,13,"type"],[41,47,43,8],[41,52,43,22],[41,63,42,8],[41,67,44,8,"term"],[41,71,44,12],[41,72,44,13,"type"],[41,76,44,8],[41,81,44,22],[41,91,42,8],[41,95,45,8,"term"],[41,99,45,12],[41,100,45,13,"type"],[41,104,45,8],[41,109,45,22],[41,115,45,8],[41,119,45,32,"isFunctionType"],[41,133,45,46],[41,134,45,47,"term"],[41,138,45,51],[41,139,45,52,"name"],[41,143,45,46],[41,144,41,4],[42,0,47,1],[44,0,49,0],[44,11,49,9,"buildGroupMatchGraph"],[44,31,49,0],[44,32,49,30,"combinator"],[44,42,49,0],[44,44,49,42,"terms"],[44,49,49,0],[44,51,49,49,"atLeastOneTermMatched"],[44,72,49,0],[44,74,49,72],[45,0,50,4],[45,12,50,12,"combinator"],[45,22,50,4],[46,0,51,8],[46,11,51,13],[46,14,51,8],[47,0,63,12],[47,12,63,16,"result"],[47,18,63,22],[47,21,63,25,"MATCH"],[47,26,63,12],[49,0,65,12],[49,13,65,17],[49,17,65,21,"i"],[49,18,65,22],[49,21,65,25,"terms"],[49,26,65,30],[49,27,65,31,"length"],[49,33,65,25],[49,36,65,40],[49,37,65,12],[49,39,65,43,"i"],[49,40,65,44],[49,44,65,48],[49,45,65,12],[49,47,65,51,"i"],[49,48,65,52],[49,50,65,12],[49,52,65,56],[50,0,66,16],[50,14,66,20,"term"],[50,18,66,24],[50,21,66,27,"terms"],[50,26,66,32],[50,27,66,33,"i"],[50,28,66,32],[50,29,66,16],[51,0,68,16,"result"],[51,10,68,16,"result"],[51,16,68,22],[51,19,68,25,"createCondition"],[51,34,68,40],[51,35,69,20,"term"],[51,39,68,40],[51,41,70,20,"result"],[51,47,68,40],[51,49,71,20,"MISMATCH"],[51,57,68,40],[51,58,68,16],[52,0,73,13],[54,0,73,13],[55,0,75,12],[55,15,75,19,"result"],[55,21,75,12],[57,0,77,8],[57,11,77,13],[57,14,77,8],[58,0,90,12],[58,12,90,16,"result"],[58,18,90,22],[58,21,90,25,"MISMATCH"],[58,29,90,12],[59,0,91,12],[59,12,91,16,"map"],[59,15,91,19],[59,18,91,22],[59,22,91,12],[61,0,93,12],[61,13,93,17],[61,17,93,21,"i"],[61,18,93,22],[61,21,93,25,"terms"],[61,26,93,30],[61,27,93,31,"length"],[61,33,93,25],[61,36,93,40],[61,37,93,12],[61,39,93,43,"i"],[61,40,93,44],[61,44,93,48],[61,45,93,12],[61,47,93,51,"i"],[61,48,93,52],[61,50,93,12],[61,52,93,56],[62,0,94,16],[62,14,94,20,"term"],[62,18,94,24],[62,21,94,27,"terms"],[62,26,94,32],[62,27,94,33,"i"],[62,28,94,32],[62,29,94,16],[64,0,97,16],[64,14,97,20,"isEnumCapatible"],[64,29,97,35],[64,30,97,36,"term"],[64,34,97,35],[64,35,97,16],[64,37,97,43],[65,0,98,20],[65,16,98,24,"map"],[65,19,98,27],[65,24,98,32],[65,28,98,24],[65,32,98,40,"i"],[65,33,98,41],[65,36,98,44],[65,37,98,24],[65,41,98,49,"isEnumCapatible"],[65,56,98,64],[65,57,98,65,"terms"],[65,62,98,70],[65,63,98,71,"i"],[65,64,98,72],[65,67,98,75],[65,68,98,70],[65,69,98,64],[65,70,98,20],[65,72,98,80],[66,0,99,24,"map"],[66,14,99,24,"map"],[66,17,99,27],[66,20,99,30,"Object"],[66,26,99,36],[66,27,99,37,"create"],[66,33,99,30],[66,34,99,44],[66,38,99,30],[66,39,99,24],[67,0,100,24,"result"],[67,14,100,24,"result"],[67,20,100,30],[67,23,100,33,"createCondition"],[67,38,100,48],[67,39,101,28],[68,0,102,32,"type"],[68,16,102,32,"type"],[68,20,102,36],[68,22,102,38],[68,28,101,28],[69,0,103,32,"map"],[69,16,103,32,"map"],[69,19,103,35],[69,21,103,37,"map"],[70,0,101,28],[70,15,100,48],[70,17,105,28,"MATCH"],[70,22,100,48],[70,24,106,28,"result"],[70,30,100,48],[70,31,100,24],[71,0,108,21],[73,0,110,20],[73,16,110,24,"map"],[73,19,110,27],[73,24,110,32],[73,28,110,20],[73,30,110,38],[74,0,111,24],[74,18,111,28,"key"],[74,21,111,31],[74,24,111,34],[74,25,111,35,"isFunctionType"],[74,39,111,49],[74,40,111,50,"term"],[74,44,111,54],[74,45,111,55,"name"],[74,49,111,49],[74,50,111,35],[74,53,111,63,"term"],[74,57,111,67],[74,58,111,68,"name"],[74,62,111,63],[74,63,111,73,"slice"],[74,68,111,63],[74,69,111,79],[74,70,111,63],[74,72,111,82],[74,73,111,83],[74,74,111,63],[74,75,111,35],[74,78,111,88,"term"],[74,82,111,92],[74,83,111,93,"name"],[74,87,111,34],[74,89,111,99,"toLowerCase"],[74,100,111,34],[74,102,111,24],[76,0,112,24],[76,18,112,28,"key"],[76,21,112,31],[76,25,112,35,"map"],[76,28,112,28],[76,33,112,43],[76,38,112,24],[76,40,112,50],[77,0,113,28,"map"],[77,16,113,28,"map"],[77,19,113,31],[77,20,113,32,"key"],[77,23,113,31],[77,24,113,28],[77,27,113,39,"term"],[77,31,113,28],[78,0,114,28],[79,0,115,25],[80,0,116,21],[81,0,117,17],[83,0,119,16,"map"],[83,10,119,16,"map"],[83,13,119,19],[83,16,119,22],[83,20,119,16],[84,0,122,16,"result"],[84,10,122,16,"result"],[84,16,122,22],[84,19,122,25,"createCondition"],[84,34,122,40],[84,35,123,20,"term"],[84,39,122,40],[84,41,124,20,"MATCH"],[84,46,122,40],[84,48,125,20,"result"],[84,54,122,40],[84,55,122,16],[85,0,127,13],[87,0,127,13],[88,0,129,12],[88,15,129,19,"result"],[88,21,129,12],[90,0,131,8],[90,11,131,13],[90,15,131,8],[91,0,137,12],[91,12,137,16,"terms"],[91,17,137,21],[91,18,137,22,"length"],[91,24,137,16],[91,27,137,31],[91,28,137,12],[91,30,137,34],[92,0,138,16],[92,17,138,23],[93,0,139,20,"type"],[93,12,139,20,"type"],[93,16,139,24],[93,18,139,26],[93,29,138,23],[94,0,140,20,"terms"],[94,12,140,20,"terms"],[94,17,140,25],[94,19,140,27,"terms"],[94,24,138,23],[95,0,141,20,"all"],[95,12,141,20,"all"],[95,15,141,23],[95,17,141,25],[96,0,138,23],[96,11,138,16],[97,0,143,13],[99,0,168,12],[99,12,168,16,"result"],[99,18,168,22],[99,21,168,25,"MISMATCH"],[99,29,168,12],[101,0,170,12],[101,13,170,17],[101,17,170,21,"i"],[101,18,170,22],[101,21,170,25,"terms"],[101,26,170,30],[101,27,170,31,"length"],[101,33,170,25],[101,36,170,40],[101,37,170,12],[101,39,170,43,"i"],[101,40,170,44],[101,44,170,48],[101,45,170,12],[101,47,170,51,"i"],[101,48,170,52],[101,50,170,12],[101,52,170,56],[102,0,171,16],[102,14,171,20,"term"],[102,18,171,24],[102,21,171,27,"terms"],[102,26,171,32],[102,27,171,33,"i"],[102,28,171,32],[102,29,171,16],[103,0,172,16],[103,14,172,20,"thenClause"],[103,24,172,16],[105,0,174,16],[105,14,174,20,"terms"],[105,19,174,25],[105,20,174,26,"length"],[105,26,174,20],[105,29,174,35],[105,30,174,16],[105,32,174,38],[106,0,175,20,"thenClause"],[106,12,175,20,"thenClause"],[106,22,175,30],[106,25,175,33,"buildGroupMatchGraph"],[106,45,175,53],[106,46,176,24,"combinator"],[106,56,175,53],[106,58,177,24,"terms"],[106,63,177,29],[106,64,177,30,"filter"],[106,70,177,24],[106,71,177,37],[106,81,177,46,"newGroupTerm"],[106,93,177,37],[106,95,177,60],[107,0,178,28],[107,21,178,35,"newGroupTerm"],[107,33,178,47],[107,38,178,52,"term"],[107,42,178,28],[108,0,179,25],[108,13,177,24],[108,14,175,53],[108,16,180,24],[108,21,175,53],[108,22,175,20],[109,0,182,17],[109,11,174,16],[109,17,182,23],[110,0,183,20,"thenClause"],[110,12,183,20,"thenClause"],[110,22,183,30],[110,25,183,33,"MATCH"],[110,30,183,20],[111,0,184,17],[113,0,186,16,"result"],[113,10,186,16,"result"],[113,16,186,22],[113,19,186,25,"createCondition"],[113,34,186,40],[113,35,187,20,"term"],[113,39,186,40],[113,41,188,20,"thenClause"],[113,51,186,40],[113,53,189,20,"result"],[113,59,186,40],[113,60,186,16],[114,0,191,13],[116,0,191,13],[117,0,193,12],[117,15,193,19,"result"],[117,21,193,12],[119,0,195,8],[119,11,195,13],[119,15,195,8],[120,0,201,12],[120,12,201,16,"terms"],[120,17,201,21],[120,18,201,22,"length"],[120,24,201,16],[120,27,201,31],[120,28,201,12],[120,30,201,34],[121,0,202,16],[121,17,202,23],[122,0,203,20,"type"],[122,12,203,20,"type"],[122,16,203,24],[122,18,203,26],[122,29,202,23],[123,0,204,20,"terms"],[123,12,204,20,"terms"],[123,17,204,25],[123,19,204,27,"terms"],[123,24,202,23],[124,0,205,20,"all"],[124,12,205,20,"all"],[124,15,205,23],[124,17,205,25],[125,0,202,23],[125,11,202,16],[126,0,207,13],[128,0,232,12],[128,12,232,16,"result"],[128,18,232,22],[128,21,232,25,"atLeastOneTermMatched"],[128,42,232,46],[128,45,232,49,"MATCH"],[128,50,232,46],[128,53,232,57,"MISMATCH"],[128,61,232,12],[130,0,234,12],[130,13,234,17],[130,17,234,21,"i"],[130,18,234,22],[130,21,234,25,"terms"],[130,26,234,30],[130,27,234,31,"length"],[130,33,234,25],[130,36,234,40],[130,37,234,12],[130,39,234,43,"i"],[130,40,234,44],[130,44,234,48],[130,45,234,12],[130,47,234,51,"i"],[130,48,234,52],[130,50,234,12],[130,52,234,56],[131,0,235,16],[131,14,235,20,"term"],[131,18,235,24],[131,21,235,27,"terms"],[131,26,235,32],[131,27,235,33,"i"],[131,28,235,32],[131,29,235,16],[132,0,236,16],[132,14,236,20,"thenClause"],[132,24,236,16],[134,0,238,16],[134,14,238,20,"terms"],[134,19,238,25],[134,20,238,26,"length"],[134,26,238,20],[134,29,238,35],[134,30,238,16],[134,32,238,38],[135,0,239,20,"thenClause"],[135,12,239,20,"thenClause"],[135,22,239,30],[135,25,239,33,"buildGroupMatchGraph"],[135,45,239,53],[135,46,240,24,"combinator"],[135,56,239,53],[135,58,241,24,"terms"],[135,63,241,29],[135,64,241,30,"filter"],[135,70,241,24],[135,71,241,37],[135,81,241,46,"newGroupTerm"],[135,93,241,37],[135,95,241,60],[136,0,242,28],[136,21,242,35,"newGroupTerm"],[136,33,242,47],[136,38,242,52,"term"],[136,42,242,28],[137,0,243,25],[137,13,241,24],[137,14,239,53],[137,16,244,24],[137,20,239,53],[137,21,239,20],[138,0,246,17],[138,11,238,16],[138,17,246,23],[139,0,247,20,"thenClause"],[139,12,247,20,"thenClause"],[139,22,247,30],[139,25,247,33,"MATCH"],[139,30,247,20],[140,0,248,17],[142,0,250,16,"result"],[142,10,250,16,"result"],[142,16,250,22],[142,19,250,25,"createCondition"],[142,34,250,40],[142,35,251,20,"term"],[142,39,250,40],[142,41,252,20,"thenClause"],[142,51,250,40],[142,53,253,20,"result"],[142,59,250,40],[142,60,250,16],[143,0,255,13],[145,0,255,13],[146,0,257,12],[146,15,257,19,"result"],[146,21,257,12],[147,0,50,4],[148,0,259,1],[150,0,261,0],[150,11,261,9,"buildMultiplierMatchGraph"],[150,36,261,0],[150,37,261,35,"node"],[150,41,261,0],[150,43,261,41],[151,0,262,4],[151,8,262,8,"result"],[151,14,262,14],[151,17,262,17,"MATCH"],[151,22,262,4],[153,0,263,4],[153,8,263,8,"matchTerm"],[153,17,263,17],[153,20,263,20,"buildMatchGraph"],[153,36,263,35],[153,37,263,36,"node"],[153,41,263,40],[153,42,263,41,"term"],[153,46,263,35],[153,47,263,4],[155,0,265,4],[155,8,265,8,"node"],[155,12,265,12],[155,13,265,13,"max"],[155,16,265,8],[155,21,265,21],[155,22,265,4],[155,24,265,24],[156,0,267,8,"matchTerm"],[156,6,267,8,"matchTerm"],[156,15,267,17],[156,18,267,20,"createCondition"],[156,33,267,35],[156,34,268,12,"matchTerm"],[156,43,267,35],[156,45,269,12,"DISALLOW_EMPTY"],[156,59,267,35],[156,61,270,12,"MISMATCH"],[156,69,267,35],[156,70,267,8],[157,0,275,8,"result"],[157,6,275,8,"result"],[157,12,275,14],[157,15,275,17,"createCondition"],[157,30,275,32],[157,31,276,12,"matchTerm"],[157,40,275,32],[157,42,277,12],[157,46,275,32],[157,48,278,12,"MISMATCH"],[157,56,275,32],[157,57,275,8],[158,0,281,8,"result"],[158,6,281,8,"result"],[158,12,281,14],[158,13,281,15,"then"],[158,17,281,8],[158,20,281,22,"createCondition"],[158,35,281,37],[158,36,282,12,"MATCH"],[158,41,281,37],[158,43,283,12,"MATCH"],[158,48,281,37],[158,50,284,12,"result"],[158,56,281,37],[158,57,281,8],[160,0,287,8],[160,10,287,12,"node"],[160,14,287,16],[160,15,287,17,"comma"],[160,20,287,8],[160,22,287,24],[161,0,288,12,"result"],[161,8,288,12,"result"],[161,14,288,18],[161,15,288,19,"then"],[161,19,288,12],[161,20,288,24,"else"],[161,24,288,12],[161,27,288,31,"createCondition"],[161,42,288,46],[161,43,289,16],[162,0,289,18,"type"],[162,10,289,18,"type"],[162,14,289,22],[162,16,289,24],[162,23,289,16],[163,0,289,33,"syntax"],[163,10,289,33,"syntax"],[163,16,289,39],[163,18,289,41,"node"],[164,0,289,16],[164,9,288,46],[164,11,290,16,"result"],[164,17,288,46],[164,19,291,16,"MISMATCH"],[164,27,288,46],[164,28,288,12],[165,0,293,9],[166,0,294,5],[166,5,265,4],[166,11,294,11],[167,0,296,8],[167,11,296,13],[167,15,296,17,"i"],[167,16,296,18],[167,19,296,21,"node"],[167,23,296,25],[167,24,296,26,"min"],[167,27,296,21],[167,31,296,33],[167,32,296,8],[167,34,296,36,"i"],[167,35,296,37],[167,39,296,41,"node"],[167,43,296,45],[167,44,296,46,"max"],[167,47,296,8],[167,49,296,51,"i"],[167,50,296,52],[167,52,296,8],[167,54,296,56],[168,0,297,12],[168,12,297,16,"node"],[168,16,297,20],[168,17,297,21,"comma"],[168,22,297,16],[168,26,297,30,"result"],[168,32,297,36],[168,37,297,41,"MATCH"],[168,42,297,12],[168,44,297,48],[169,0,298,16,"result"],[169,10,298,16,"result"],[169,16,298,22],[169,19,298,25,"createCondition"],[169,34,298,40],[169,35,299,20],[170,0,299,22,"type"],[170,12,299,22,"type"],[170,16,299,26],[170,18,299,28],[170,25,299,20],[171,0,299,37,"syntax"],[171,12,299,37,"syntax"],[171,18,299,43],[171,20,299,45,"node"],[172,0,299,20],[172,11,298,40],[172,13,300,20,"result"],[172,19,298,40],[172,21,301,20,"MISMATCH"],[172,29,298,40],[172,30,298,16],[173,0,303,13],[175,0,305,12,"result"],[175,8,305,12,"result"],[175,14,305,18],[175,17,305,21,"createCondition"],[175,32,305,36],[175,33,306,16,"matchTerm"],[175,42,305,36],[175,44,307,16,"createCondition"],[175,59,307,31],[175,60,308,20,"MATCH"],[175,65,307,31],[175,67,309,20,"MATCH"],[175,72,307,31],[175,74,310,20,"result"],[175,80,307,31],[175,81,305,36],[175,83,312,16,"MISMATCH"],[175,91,305,36],[175,92,305,12],[176,0,314,9],[177,0,315,5],[179,0,317,4],[179,8,317,8,"node"],[179,12,317,12],[179,13,317,13,"min"],[179,16,317,8],[179,21,317,21],[179,22,317,4],[179,24,317,24],[180,0,319,8,"result"],[180,6,319,8,"result"],[180,12,319,14],[180,15,319,17,"createCondition"],[180,30,319,32],[180,31,320,12,"MATCH"],[180,36,319,32],[180,38,321,12,"MATCH"],[180,43,319,32],[180,45,322,12,"result"],[180,51,319,32],[180,52,319,8],[181,0,324,5],[181,5,317,4],[181,11,324,11],[182,0,326,8],[182,11,326,13],[182,15,326,17,"i"],[182,16,326,18],[182,19,326,21],[182,20,326,8],[182,22,326,24,"i"],[182,23,326,25],[182,26,326,28,"node"],[182,30,326,32],[182,31,326,33,"min"],[182,34,326,28],[182,37,326,39],[182,38,326,8],[182,40,326,42,"i"],[182,41,326,43],[182,43,326,8],[182,45,326,47],[183,0,327,12],[183,12,327,16,"node"],[183,16,327,20],[183,17,327,21,"comma"],[183,22,327,16],[183,26,327,30,"result"],[183,32,327,36],[183,37,327,41,"MATCH"],[183,42,327,12],[183,44,327,48],[184,0,328,16,"result"],[184,10,328,16,"result"],[184,16,328,22],[184,19,328,25,"createCondition"],[184,34,328,40],[184,35,329,20],[185,0,329,22,"type"],[185,12,329,22,"type"],[185,16,329,26],[185,18,329,28],[185,25,329,20],[186,0,329,37,"syntax"],[186,12,329,37,"syntax"],[186,18,329,43],[186,20,329,45,"node"],[187,0,329,20],[187,11,328,40],[187,13,330,20,"result"],[187,19,328,40],[187,21,331,20,"MISMATCH"],[187,29,328,40],[187,30,328,16],[188,0,333,13],[190,0,335,12,"result"],[190,8,335,12,"result"],[190,14,335,18],[190,17,335,21,"createCondition"],[190,32,335,36],[190,33,336,16,"matchTerm"],[190,42,335,36],[190,44,337,16,"result"],[190,50,335,36],[190,52,338,16,"MISMATCH"],[190,60,335,36],[190,61,335,12],[191,0,340,9],[192,0,341,5],[194,0,343,4],[194,11,343,11,"result"],[194,17,343,4],[195,0,344,1],[197,0,346,0],[197,11,346,9,"buildMatchGraph"],[197,27,346,0],[197,28,346,25,"node"],[197,32,346,0],[197,34,346,31],[198,0,347,4],[198,8,347,8],[198,15,347,15,"node"],[198,19,347,8],[198,24,347,24],[198,34,347,4],[198,36,347,36],[199,0,348,8],[199,13,348,15],[200,0,349,12,"type"],[200,8,349,12,"type"],[200,12,349,16],[200,14,349,18],[200,23,348,15],[201,0,350,12,"fn"],[201,8,350,12,"fn"],[201,10,350,14],[201,12,350,16,"node"],[202,0,348,15],[202,7,348,8],[203,0,352,5],[205,0,354,4],[205,12,354,12,"node"],[205,16,354,16],[205,17,354,17,"type"],[205,21,354,4],[206,0,355,8],[206,11,355,13],[206,18,355,8],[207,0,356,12],[207,12,356,16,"result"],[207,18,356,22],[207,21,356,25,"buildGroupMatchGraph"],[207,41,356,45],[207,42,357,16,"node"],[207,46,357,20],[207,47,357,21,"combinator"],[207,57,356,45],[207,59,358,16,"node"],[207,63,358,20],[207,64,358,21,"terms"],[207,69,358,16],[207,70,358,27,"map"],[207,73,358,16],[207,74,358,31,"buildMatchGraph"],[207,90,358,16],[207,91,356,45],[207,93,359,16],[207,98,356,45],[207,99,356,12],[209,0,362,12],[209,12,362,16,"node"],[209,16,362,20],[209,17,362,21,"disallowEmpty"],[209,30,362,12],[209,32,362,36],[210,0,363,16,"result"],[210,10,363,16,"result"],[210,16,363,22],[210,19,363,25,"createCondition"],[210,34,363,40],[210,35,364,20,"result"],[210,41,363,40],[210,43,365,20,"DISALLOW_EMPTY"],[210,57,363,40],[210,59,366,20,"MISMATCH"],[210,67,363,40],[210,68,363,16],[211,0,368,13],[213,0,370,12],[213,15,370,19,"result"],[213,21,370,12],[215,0,372,8],[215,11,372,13],[215,23,372,8],[216,0,373,12],[216,15,373,19,"buildMultiplierMatchGraph"],[216,40,373,44],[216,41,373,45,"node"],[216,45,373,44],[216,46,373,12],[218,0,375,8],[218,11,375,13],[218,17,375,8],[219,0,376,8],[219,11,376,13],[219,21,376,8],[220,0,377,12],[220,15,377,19],[221,0,378,16,"type"],[221,10,378,16,"type"],[221,14,378,20],[221,16,378,22,"node"],[221,20,378,26],[221,21,378,27,"type"],[221,25,377,19],[222,0,379,16,"name"],[222,10,379,16,"name"],[222,14,379,20],[222,16,379,22,"node"],[222,20,379,26],[222,21,379,27,"name"],[222,25,377,19],[223,0,380,16,"syntax"],[223,10,380,16,"syntax"],[223,16,380,22],[223,18,380,24,"node"],[224,0,377,19],[224,9,377,12],[226,0,383,8],[226,11,383,13],[226,20,383,8],[227,0,384,12],[227,15,384,19],[228,0,385,16,"type"],[228,10,385,16,"type"],[228,14,385,20],[228,16,385,22,"node"],[228,20,385,26],[228,21,385,27,"type"],[228,25,384,19],[229,0,386,16,"name"],[229,10,386,16,"name"],[229,14,386,20],[229,16,386,22,"node"],[229,20,386,26],[229,21,386,27,"name"],[229,25,386,22],[229,26,386,32,"toLowerCase"],[229,37,386,22],[229,39,384,19],[230,0,387,16,"syntax"],[230,10,387,16,"syntax"],[230,16,387,22],[230,18,387,24,"node"],[231,0,384,19],[231,9,384,12],[233,0,390,8],[233,11,390,13],[233,22,390,8],[234,0,391,12],[234,15,391,19],[235,0,392,16,"type"],[235,10,392,16,"type"],[235,14,392,20],[235,16,392,22,"node"],[235,20,392,26],[235,21,392,27,"type"],[235,25,391,19],[236,0,393,16,"name"],[236,10,393,16,"name"],[236,14,393,20],[236,16,393,22],[236,22,393,28,"node"],[236,26,393,32],[236,27,393,33,"name"],[236,31,393,28],[236,32,393,38,"toLowerCase"],[236,43,393,28],[236,45,391,19],[237,0,394,16,"syntax"],[237,10,394,16,"syntax"],[237,16,394,22],[237,18,394,24,"node"],[238,0,391,19],[238,9,391,12],[240,0,397,8],[240,11,397,13],[240,21,397,8],[241,0,398,12],[241,15,398,19],[242,0,399,16,"type"],[242,10,399,16,"type"],[242,14,399,20],[242,16,399,22,"node"],[242,20,399,26],[242,21,399,27,"type"],[242,25,398,19],[243,0,400,16,"name"],[243,10,400,16,"name"],[243,14,400,20],[243,16,400,22,"node"],[243,20,400,26],[243,21,400,27,"name"],[243,25,400,22],[243,26,400,32,"toLowerCase"],[243,37,400,22],[243,42,400,48],[243,45,398,19],[244,0,401,16,"syntax"],[244,10,401,16,"syntax"],[244,16,401,22],[244,18,401,24,"node"],[245,0,398,19],[245,9,398,12],[247,0,404,8],[247,11,404,13],[247,19,404,8],[248,0,406,12],[248,12,406,16,"node"],[248,16,406,20],[248,17,406,21,"value"],[248,22,406,16],[248,23,406,27,"length"],[248,29,406,16],[248,34,406,38],[248,35,406,12],[248,37,406,41],[249,0,407,16],[249,17,407,23],[250,0,408,20,"type"],[250,12,408,20,"type"],[250,16,408,24],[250,18,408,26],[250,25,407,23],[251,0,409,20,"value"],[251,12,409,20,"value"],[251,17,409,25],[251,19,409,27,"node"],[251,23,409,31],[251,24,409,32,"value"],[251,29,409,27],[251,30,409,38,"charAt"],[251,36,409,27],[251,37,409,45],[251,38,409,27],[251,39,407,23],[252,0,410,20,"syntax"],[252,12,410,20,"syntax"],[252,18,410,26],[252,20,410,28,"node"],[253,0,407,23],[253,11,407,16],[254,0,412,13],[256,0,415,12],[256,15,415,19],[257,0,416,16,"type"],[257,10,416,16,"type"],[257,14,416,20],[257,16,416,22,"node"],[257,20,416,26],[257,21,416,27,"type"],[257,25,415,19],[258,0,417,16,"value"],[258,10,417,16,"value"],[258,15,417,21],[258,17,417,23,"node"],[258,21,417,27],[258,22,417,28,"value"],[258,27,417,23],[258,28,417,34,"substr"],[258,34,417,23],[258,35,417,41],[258,36,417,23],[258,38,417,44,"node"],[258,42,417,48],[258,43,417,49,"value"],[258,48,417,44],[258,49,417,55,"length"],[258,55,417,44],[258,58,417,64],[258,59,417,23],[258,61,417,67,"replace"],[258,68,417,23],[258,69,417,75],[258,75,417,23],[258,77,417,83],[258,81,417,23],[258,82,415,19],[259,0,418,16,"syntax"],[259,10,418,16,"syntax"],[259,16,418,22],[259,18,418,24,"node"],[260,0,415,19],[260,9,415,12],[262,0,421,8],[262,11,421,13],[262,18,421,8],[263,0,422,12],[263,15,422,19],[264,0,423,16,"type"],[264,10,423,16,"type"],[264,14,423,20],[264,16,423,22,"node"],[264,20,423,26],[264,21,423,27,"type"],[264,25,422,19],[265,0,424,16,"value"],[265,10,424,16,"value"],[265,15,424,21],[265,17,424,23,"node"],[265,21,424,27],[265,22,424,28,"value"],[265,27,422,19],[266,0,425,16,"syntax"],[266,10,425,16,"syntax"],[266,16,425,22],[266,18,425,24,"node"],[267,0,422,19],[267,9,422,12],[269,0,428,8],[269,11,428,13],[269,18,428,8],[270,0,429,12],[270,15,429,19],[271,0,430,16,"type"],[271,10,430,16,"type"],[271,14,430,20],[271,16,430,22,"node"],[271,20,430,26],[271,21,430,27,"type"],[271,25,429,19],[272,0,431,16,"syntax"],[272,10,431,16,"syntax"],[272,16,431,22],[272,18,431,24,"node"],[273,0,429,19],[273,9,429,12],[275,0,434,8],[276,0,435,12],[276,14,435,18],[276,18,435,22,"Error"],[276,23,435,18],[276,24,435,28],[276,44,435,18],[276,46,435,50,"node"],[276,50,435,54],[276,51,435,55,"type"],[276,55,435,18],[276,56,435,12],[277,0,354,4],[278,0,437,1],[280,0,439,0,"module"],[280,2,439,0,"module"],[280,8,439,6],[280,9,439,7,"exports"],[280,16,439,0],[280,19,439,17],[281,0,440,4,"MATCH"],[281,4,440,4,"MATCH"],[281,9,440,9],[281,11,440,11,"MATCH"],[281,16,439,17],[282,0,441,4,"MISMATCH"],[282,4,441,4,"MISMATCH"],[282,12,441,12],[282,14,441,14,"MISMATCH"],[282,22,439,17],[283,0,442,4,"DISALLOW_EMPTY"],[283,4,442,4,"DISALLOW_EMPTY"],[283,18,442,18],[283,20,442,20,"DISALLOW_EMPTY"],[283,34,439,17],[284,0,443,4,"buildMatchGraph"],[284,4,443,4,"buildMatchGraph"],[284,19,443,19],[284,21,443,21],[284,46,443,30,"syntaxTree"],[284,56,443,21],[284,58,443,42,"ref"],[284,61,443,21],[284,63,443,47],[285,0,444,8],[285,10,444,12],[285,17,444,19,"syntaxTree"],[285,27,444,12],[285,32,444,34],[285,40,444,8],[285,42,444,44],[286,0,445,12,"syntaxTree"],[286,8,445,12,"syntaxTree"],[286,18,445,22],[286,21,445,25],[286,82,445,31,"syntaxTree"],[286,92,445,25],[286,93,445,12],[287,0,446,9],[289,0,448,8],[289,13,448,15],[290,0,449,12,"type"],[290,8,449,12,"type"],[290,12,449,16],[290,14,449,18],[290,26,448,15],[291,0,450,12,"match"],[291,8,450,12,"match"],[291,13,450,17],[291,15,450,19,"buildMatchGraph"],[291,31,450,34],[291,32,450,35,"syntaxTree"],[291,42,450,34],[291,43,448,15],[292,0,451,12,"syntax"],[292,8,451,12,"syntax"],[292,14,451,18],[292,16,451,20,"ref"],[292,19,451,23],[292,23,451,27],[292,27,448,15],[293,0,452,12,"source"],[293,8,452,12,"source"],[293,14,452,18],[293,16,452,20,"syntaxTree"],[294,0,448,15],[294,7,448,8],[295,0,454,5],[296,0,439,17],[296,3,439,0]],"functionMap":{"names":["<global>","createCondition","isFunctionType","isEnumCapatible","buildGroupMatchGraph","terms.filter$argument_0","buildMultiplierMatchGraph","buildMatchGraph","module.exports.buildMatchGraph"],"mappings":"AAA;ACQ;CDqB;AEE;CFM;AGE;CHO;AIE;qCCgI;yBDE;qCC8D;yBDE;CJgB;AME;CNmF;AOE;CP2F;qBQM;KRW"}},"type":"js/module"}]}