{"dependencies":[{"name":"../../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":17},"end":{"line":3,"column":32}},{"start":{"line":4,"column":14},"end":{"line":4,"column":26}},{"start":{"line":5,"column":12},"end":{"line":5,"column":22}},{"start":{"line":6,"column":15},"end":{"line":6,"column":28}},{"start":{"line":7,"column":12},"end":{"line":7,"column":22}},{"start":{"line":8,"column":22},"end":{"line":8,"column":42}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var WHITESPACE = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.WhiteSpace;\n\n  var COMMENT = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Comment;\n\n  var IDENT = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Ident;\n\n  var FUNCTION = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Function;\n\n  var COLON = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.Colon;\n\n  var LEFTPARENTHESIS = _$$_REQUIRE(_dependencyMap[0], \"../../tokenizer\").TYPE.LeftParenthesis;\n\n  function consumeRaw() {\n    return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, false));\n  }\n\n  function parentheses() {\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === IDENT && this.lookupNonWSType(1) === COLON) {\n      return this.createSingleNodeList(this.Declaration());\n    }\n\n    return readSequence.call(this);\n  }\n\n  function readSequence() {\n    var children = this.createList();\n    var space = null;\n    var child;\n    this.scanner.skipSC();\n\n    scan: while (!this.scanner.eof) {\n      switch (this.scanner.tokenType) {\n        case WHITESPACE:\n          space = this.WhiteSpace();\n          continue;\n\n        case COMMENT:\n          this.scanner.next();\n          continue;\n\n        case FUNCTION:\n          child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n          break;\n\n        case IDENT:\n          child = this.Identifier();\n          break;\n\n        case LEFTPARENTHESIS:\n          child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n          break;\n\n        default:\n          break scan;\n      }\n\n      if (space !== null) {\n        children.push(space);\n        space = null;\n      }\n\n      children.push(child);\n    }\n\n    return children;\n  }\n\n  module.exports = {\n    parse: {\n      prelude: function prelude() {\n        var children = readSequence.call(this);\n\n        if (this.getFirstListNode(children) === null) {\n          this.error('Condition is expected');\n        }\n\n        return children;\n      },\n      block: function block() {\n        return this.Block(false);\n      }\n    }\n  };\n});","lineCount":87,"map":[[2,0,3,0],[2,6,3,4,"WHITESPACE"],[2,16,3,14],[2,19,3,17],[2,74,3,22,"WhiteSpace"],[2,84,3,0],[4,0,4,0],[4,6,4,4,"COMMENT"],[4,13,4,11],[4,16,4,14],[4,71,4,19,"Comment"],[4,78,4,0],[6,0,5,0],[6,6,5,4,"IDENT"],[6,11,5,9],[6,14,5,12],[6,69,5,17,"Ident"],[6,74,5,0],[8,0,6,0],[8,6,6,4,"FUNCTION"],[8,14,6,12],[8,17,6,15],[8,72,6,20,"Function"],[8,80,6,0],[10,0,7,0],[10,6,7,4,"COLON"],[10,11,7,9],[10,14,7,12],[10,69,7,17,"Colon"],[10,74,7,0],[12,0,8,0],[12,6,8,4,"LEFTPARENTHESIS"],[12,21,8,19],[12,24,8,22],[12,79,8,27,"LeftParenthesis"],[12,94,8,0],[14,0,10,0],[14,11,10,9,"consumeRaw"],[14,21,10,0],[14,24,10,22],[15,0,11,4],[15,11,11,11],[15,16,11,16,"createSingleNodeList"],[15,36,11,11],[15,37,12,8],[15,42,12,13,"Raw"],[15,45,12,8],[15,46,12,17],[15,51,12,22,"scanner"],[15,58,12,17],[15,59,12,30,"tokenIndex"],[15,69,12,8],[15,71,12,42],[15,75,12,8],[15,77,12,48],[15,82,12,8],[15,83,11,11],[15,84,11,4],[16,0,14,1],[18,0,16,0],[18,11,16,9,"parentheses"],[18,22,16,0],[18,25,16,23],[19,0,17,4],[19,9,17,9,"scanner"],[19,16,17,4],[19,17,17,17,"skipSC"],[19,23,17,4],[21,0,19,4],[21,8,19,8],[21,13,19,13,"scanner"],[21,20,19,8],[21,21,19,21,"tokenType"],[21,30,19,8],[21,35,19,35,"IDENT"],[21,40,19,8],[21,44,20,8],[21,49,20,13,"lookupNonWSType"],[21,64,20,8],[21,65,20,29],[21,66,20,8],[21,72,20,36,"COLON"],[21,77,19,4],[21,79,20,43],[22,0,21,8],[22,13,21,15],[22,18,21,20,"createSingleNodeList"],[22,38,21,15],[22,39,22,12],[22,44,22,17,"Declaration"],[22,55,22,12],[22,57,21,15],[22,58,21,8],[23,0,24,5],[25,0,26,4],[25,11,26,11,"readSequence"],[25,23,26,23],[25,24,26,24,"call"],[25,28,26,11],[25,29,26,29],[25,33,26,11],[25,34,26,4],[26,0,27,1],[28,0,29,0],[28,11,29,9,"readSequence"],[28,23,29,0],[28,26,29,24],[29,0,30,4],[29,8,30,8,"children"],[29,16,30,16],[29,19,30,19],[29,24,30,24,"createList"],[29,34,30,19],[29,36,30,4],[30,0,31,4],[30,8,31,8,"space"],[30,13,31,13],[30,16,31,16],[30,20,31,4],[31,0,32,4],[31,8,32,8,"child"],[31,13,32,4],[32,0,34,4],[32,9,34,9,"scanner"],[32,16,34,4],[32,17,34,17,"skipSC"],[32,23,34,4],[34,0,36,4,"scan"],[34,4,36,4,"scan"],[34,8,36,8],[34,10,37,4],[34,17,37,11],[34,18,37,12],[34,23,37,17,"scanner"],[34,30,37,12],[34,31,37,25,"eof"],[34,34,37,4],[34,36,37,30],[35,0,38,8],[35,14,38,16],[35,19,38,21,"scanner"],[35,26,38,16],[35,27,38,29,"tokenType"],[35,36,38,8],[36,0,39,12],[36,13,39,17,"WHITESPACE"],[36,23,39,12],[37,0,40,16,"space"],[37,10,40,16,"space"],[37,15,40,21],[37,18,40,24],[37,23,40,29,"WhiteSpace"],[37,33,40,24],[37,35,40,16],[38,0,41,16],[40,0,43,12],[40,13,43,17,"COMMENT"],[40,20,43,12],[41,0,44,16],[41,15,44,21,"scanner"],[41,22,44,16],[41,23,44,29,"next"],[41,27,44,16],[42,0,45,16],[44,0,47,12],[44,13,47,17,"FUNCTION"],[44,21,47,12],[45,0,48,16,"child"],[45,10,48,16,"child"],[45,15,48,21],[45,18,48,24],[45,23,48,29,"Function"],[45,31,48,24],[45,32,48,38,"consumeRaw"],[45,42,48,24],[45,44,48,50],[45,49,48,55,"scope"],[45,54,48,50],[45,55,48,61,"AtrulePrelude"],[45,68,48,24],[45,69,48,16],[46,0,49,16],[48,0,51,12],[48,13,51,17,"IDENT"],[48,18,51,12],[49,0,52,16,"child"],[49,10,52,16,"child"],[49,15,52,21],[49,18,52,24],[49,23,52,29,"Identifier"],[49,33,52,24],[49,35,52,16],[50,0,53,16],[52,0,55,12],[52,13,55,17,"LEFTPARENTHESIS"],[52,28,55,12],[53,0,56,16,"child"],[53,10,56,16,"child"],[53,15,56,21],[53,18,56,24],[53,23,56,29,"Parentheses"],[53,34,56,24],[53,35,56,41,"parentheses"],[53,46,56,24],[53,48,56,54],[53,53,56,59,"scope"],[53,58,56,54],[53,59,56,65,"AtrulePrelude"],[53,72,56,24],[53,73,56,16],[54,0,57,16],[56,0,59,12],[57,0,60,16],[57,16,60,22,"scan"],[57,20,60,16],[58,0,38,8],[60,0,63,8],[60,10,63,12,"space"],[60,15,63,17],[60,20,63,22],[60,24,63,8],[60,26,63,28],[61,0,64,12,"children"],[61,8,64,12,"children"],[61,16,64,20],[61,17,64,21,"push"],[61,21,64,12],[61,22,64,26,"space"],[61,27,64,12],[62,0,65,12,"space"],[62,8,65,12,"space"],[62,13,65,17],[62,16,65,20],[62,20,65,12],[63,0,66,9],[65,0,68,8,"children"],[65,6,68,8,"children"],[65,14,68,16],[65,15,68,17,"push"],[65,19,68,8],[65,20,68,22,"child"],[65,25,68,8],[66,0,69,5],[68,0,71,4],[68,11,71,11,"children"],[68,19,71,4],[69,0,72,1],[71,0,74,0,"module"],[71,2,74,0,"module"],[71,8,74,6],[71,9,74,7,"exports"],[71,16,74,0],[71,19,74,17],[72,0,75,4,"parse"],[72,4,75,4,"parse"],[72,9,75,9],[72,11,75,11],[73,0,76,8,"prelude"],[73,6,76,8,"prelude"],[73,13,76,15],[73,15,76,17],[73,34,76,28],[74,0,77,12],[74,12,77,16,"children"],[74,20,77,24],[74,23,77,27,"readSequence"],[74,35,77,39],[74,36,77,40,"call"],[74,40,77,27],[74,41,77,45],[74,45,77,27],[74,46,77,12],[76,0,79,12],[76,12,79,16],[76,17,79,21,"getFirstListNode"],[76,33,79,16],[76,34,79,38,"children"],[76,42,79,16],[76,48,79,52],[76,52,79,12],[76,54,79,58],[77,0,80,16],[77,15,80,21,"error"],[77,20,80,16],[77,21,80,27],[77,44,80,16],[78,0,81,13],[80,0,83,12],[80,15,83,19,"children"],[80,23,83,12],[81,0,84,9],[81,7,75,11],[82,0,85,8,"block"],[82,6,85,8,"block"],[82,11,85,13],[82,13,85,15],[82,30,85,26],[83,0,86,12],[83,15,86,19],[83,20,86,24,"Block"],[83,25,86,19],[83,26,86,30],[83,31,86,19],[83,32,86,12],[84,0,87,9],[85,0,75,11],[86,0,74,17],[86,3,74,0]],"functionMap":{"names":["<global>","consumeRaw","parentheses","readSequence","module.exports.parse.prelude","module.exports.parse.block"],"mappings":"AAA;ACS;CDI;AEE;CFW;AGE;CH2C;iBII;SJQ;eKC;SLE"}},"type":"js/module"}]}