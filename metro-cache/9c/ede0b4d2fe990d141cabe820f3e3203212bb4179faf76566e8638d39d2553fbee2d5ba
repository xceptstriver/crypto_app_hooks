{"dependencies":[{"name":"../tokenizer/const","data":{"asyncType":null,"locs":[{"start":{"line":58,"column":23},"end":{"line":58,"column":33}},{"start":{"line":73,"column":23},"end":{"line":73,"column":33}},{"start":{"line":74,"column":23},"end":{"line":74,"column":36}},{"start":{"line":75,"column":23},"end":{"line":75,"column":43}},{"start":{"line":76,"column":23},"end":{"line":76,"column":45}},{"start":{"line":77,"column":23},"end":{"line":77,"column":44}},{"start":{"line":88,"column":23},"end":{"line":88,"column":44}},{"start":{"line":89,"column":23},"end":{"line":89,"column":46}},{"start":{"line":90,"column":23},"end":{"line":90,"column":45}},{"start":{"line":91,"column":23},"end":{"line":91,"column":33}},{"start":{"line":100,"column":51},"end":{"line":100,"column":66}},{"start":{"line":100,"column":85},"end":{"line":100,"column":97}},{"start":{"line":421,"column":73},"end":{"line":421,"column":83}},{"start":{"line":485,"column":53},"end":{"line":485,"column":63}}]}},{"name":"./match-graph","data":{"asyncType":null,"locs":[{"start":{"line":228,"column":28},"end":{"line":228,"column":44}},{"start":{"line":242,"column":20},"end":{"line":242,"column":44}},{"start":{"line":244,"column":24},"end":{"line":244,"column":40}},{"start":{"line":247,"column":24},"end":{"line":247,"column":37}},{"start":{"line":297,"column":20},"end":{"line":297,"column":43}},{"start":{"line":301,"column":20},"end":{"line":301,"column":40}},{"start":{"line":323,"column":24},"end":{"line":323,"column":40}},{"start":{"line":328,"column":20},"end":{"line":328,"column":33}},{"start":{"line":334,"column":20},"end":{"line":334,"column":33}},{"start":{"line":382,"column":16},"end":{"line":382,"column":32}},{"start":{"line":394,"column":20},"end":{"line":394,"column":33}},{"start":{"line":396,"column":20},"end":{"line":396,"column":36}},{"start":{"line":433,"column":24},"end":{"line":433,"column":40}},{"start":{"line":455,"column":24},"end":{"line":455,"column":37}},{"start":{"line":460,"column":16},"end":{"line":460,"column":32}},{"start":{"line":467,"column":20},"end":{"line":467,"column":33}},{"start":{"line":471,"column":16},"end":{"line":471,"column":32}},{"start":{"line":477,"column":20},"end":{"line":477,"column":33}},{"start":{"line":481,"column":16},"end":{"line":481,"column":32}},{"start":{"line":487,"column":24},"end":{"line":487,"column":40}},{"start":{"line":490,"column":32},"end":{"line":490,"column":75}},{"start":{"line":490,"column":32},"end":{"line":490,"column":75}},{"start":{"line":493,"column":28},"end":{"line":493,"column":112}},{"start":{"line":493,"column":28},"end":{"line":493,"column":112}},{"start":{"line":510,"column":20},"end":{"line":510,"column":33}},{"start":{"line":512,"column":20},"end":{"line":512,"column":36}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var STUB = 0;\n  var TOKEN = 1;\n  var OPEN_SYNTAX = 2;\n  var CLOSE_SYNTAX = 3;\n  var EXIT_REASON_MATCH = 'Match';\n  var EXIT_REASON_MISMATCH = 'Mismatch';\n  var EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';\n  var ITERATION_LIMIT = 15000;\n  var totalIterationCount = 0;\n\n  function reverseList(list) {\n    var prev = null;\n    var next = null;\n    var item = list;\n\n    while (item !== null) {\n      next = item.prev;\n      item.prev = prev;\n      prev = item;\n      item = next;\n    }\n\n    return prev;\n  }\n\n  function areStringsEqualCaseInsensitive(testStr, referenceStr) {\n    if (testStr.length !== referenceStr.length) {\n      return false;\n    }\n\n    for (var i = 0; i < testStr.length; i++) {\n      var testCode = testStr.charCodeAt(i);\n      var referenceCode = referenceStr.charCodeAt(i);\n\n      if (testCode >= 0x0041 && testCode <= 0x005A) {\n        testCode = testCode | 32;\n      }\n\n      if (testCode !== referenceCode) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function isContextEdgeDelim(token) {\n    if (token.type !== _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Delim) {\n      return false;\n    }\n\n    return token.value !== '?';\n  }\n\n  function isCommaContextStart(token) {\n    if (token === null) {\n      return true;\n    }\n\n    return token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Comma || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Function || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.LeftParenthesis || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.LeftSquareBracket || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.LeftCurlyBracket || isContextEdgeDelim(token);\n  }\n\n  function isCommaContextEnd(token) {\n    if (token === null) {\n      return true;\n    }\n\n    return token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.RightParenthesis || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.RightSquareBracket || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.RightCurlyBracket || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Delim;\n  }\n\n  function internalMatch(tokens, state, syntaxes) {\n    function moveToNextToken() {\n      do {\n        tokenIndex++;\n        token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n      } while (token !== null && (token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.WhiteSpace || token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Comment));\n    }\n\n    function getNextToken(offset) {\n      var nextIndex = tokenIndex + offset;\n      return nextIndex < tokens.length ? tokens[nextIndex] : null;\n    }\n\n    function stateSnapshotFromSyntax(nextState, prev) {\n      return {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        thenStack: thenStack,\n        tokenIndex: tokenIndex,\n        prev: prev\n      };\n    }\n\n    function pushThenStack(nextState) {\n      thenStack = {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        prev: thenStack\n      };\n    }\n\n    function pushElseStack(nextState) {\n      elseStack = stateSnapshotFromSyntax(nextState, elseStack);\n    }\n\n    function addTokenToMatch() {\n      matchStack = {\n        type: TOKEN,\n        syntax: state.syntax,\n        token: token,\n        prev: matchStack\n      };\n      moveToNextToken();\n      syntaxStash = null;\n\n      if (tokenIndex > longestMatch) {\n        longestMatch = tokenIndex;\n      }\n    }\n\n    function openSyntax() {\n      syntaxStack = {\n        syntax: state.syntax,\n        opts: state.syntax.opts || syntaxStack !== null && syntaxStack.opts || null,\n        prev: syntaxStack\n      };\n      matchStack = {\n        type: OPEN_SYNTAX,\n        syntax: state.syntax,\n        token: matchStack.token,\n        prev: matchStack\n      };\n    }\n\n    function closeSyntax() {\n      if (matchStack.type === OPEN_SYNTAX) {\n        matchStack = matchStack.prev;\n      } else {\n        matchStack = {\n          type: CLOSE_SYNTAX,\n          syntax: syntaxStack.syntax,\n          token: matchStack.token,\n          prev: matchStack\n        };\n      }\n\n      syntaxStack = syntaxStack.prev;\n    }\n\n    var syntaxStack = null;\n    var thenStack = null;\n    var elseStack = null;\n    var syntaxStash = null;\n    var iterationCount = 0;\n    var exitReason = null;\n    var token = null;\n    var tokenIndex = -1;\n    var longestMatch = 0;\n    var matchStack = {\n      type: STUB,\n      syntax: null,\n      token: null,\n      prev: null\n    };\n    moveToNextToken();\n\n    while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {\n      switch (state.type) {\n        case 'Match':\n          if (thenStack === null) {\n            if (token !== null) {\n              if (tokenIndex !== tokens.length - 1 || token.value !== '\\\\0' && token.value !== '\\\\9') {\n                state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n                break;\n              }\n            }\n\n            exitReason = EXIT_REASON_MATCH;\n            break;\n          }\n\n          state = thenStack.nextState;\n\n          if (state === _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").DISALLOW_EMPTY) {\n            if (thenStack.matchStack === matchStack) {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n              break;\n            } else {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            }\n          }\n\n          while (thenStack.syntaxStack !== syntaxStack) {\n            closeSyntax();\n          }\n\n          thenStack = thenStack.prev;\n          break;\n\n        case 'Mismatch':\n          if (syntaxStash !== null && syntaxStash !== false) {\n            if (elseStack === null || tokenIndex > elseStack.tokenIndex) {\n              elseStack = syntaxStash;\n              syntaxStash = false;\n            }\n          } else if (elseStack === null) {\n            exitReason = EXIT_REASON_MISMATCH;\n            break;\n          }\n\n          state = elseStack.nextState;\n          thenStack = elseStack.thenStack;\n          syntaxStack = elseStack.syntaxStack;\n          matchStack = elseStack.matchStack;\n          tokenIndex = elseStack.tokenIndex;\n          token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n          elseStack = elseStack.prev;\n          break;\n\n        case 'MatchGraph':\n          state = state.match;\n          break;\n\n        case 'If':\n          if (state.else !== _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH) {\n            pushElseStack(state.else);\n          }\n\n          if (state.then !== _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH) {\n            pushThenStack(state.then);\n          }\n\n          state = state.match;\n          break;\n\n        case 'MatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state,\n            index: 0,\n            mask: 0\n          };\n          break;\n\n        case 'MatchOnceBuffer':\n          var terms = state.syntax.terms;\n\n          if (state.index === terms.length) {\n            if (state.mask === 0 || state.syntax.all) {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n              break;\n            }\n\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n\n          if (state.mask === (1 << terms.length) - 1) {\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n\n          for (; state.index < terms.length; state.index++) {\n            var matchFlag = 1 << state.index;\n\n            if ((state.mask & matchFlag) === 0) {\n              pushElseStack(state);\n              pushThenStack({\n                type: 'AddMatchOnce',\n                syntax: state.syntax,\n                mask: state.mask | matchFlag\n              });\n              state = terms[state.index++];\n              break;\n            }\n          }\n\n          break;\n\n        case 'AddMatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state.syntax,\n            index: 0,\n            mask: state.mask\n          };\n          break;\n\n        case 'Enum':\n          if (token !== null) {\n            var name = token.value.toLowerCase();\n\n            if (name.indexOf('\\\\') !== -1) {\n              name = name.replace(/\\\\[09].*$/, '');\n            }\n\n            if (hasOwnProperty.call(state.map, name)) {\n              state = state.map[name];\n              break;\n            }\n          }\n\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n\n        case 'Generic':\n          var opts = syntaxStack !== null ? syntaxStack.opts : null;\n          var lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));\n\n          if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n          } else {\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          }\n\n          break;\n\n        case 'Type':\n        case 'Property':\n          var syntaxDict = state.type === 'Type' ? 'types' : 'properties';\n          var dictSyntax = hasOwnProperty.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;\n\n          if (!dictSyntax || !dictSyntax.match) {\n            throw new Error('Bad syntax reference: ' + (state.type === 'Type' ? '<' + state.name + '>' : '<\\'' + state.name + '\\'>'));\n          }\n\n          if (syntaxStash !== false && token !== null && state.type === 'Type') {\n            var lowPriorityMatching = state.name === 'custom-ident' && token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Ident || state.name === 'length' && token.value === '0';\n\n            if (lowPriorityMatching) {\n              if (syntaxStash === null) {\n                syntaxStash = stateSnapshotFromSyntax(state, elseStack);\n              }\n\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n              break;\n            }\n          }\n\n          openSyntax();\n          state = dictSyntax.match;\n          break;\n\n        case 'Keyword':\n          var name = state.name;\n\n          if (token !== null) {\n            var keywordName = token.value;\n\n            if (keywordName.indexOf('\\\\') !== -1) {\n              keywordName = keywordName.replace(/\\\\[09].*$/, '');\n            }\n\n            if (areStringsEqualCaseInsensitive(keywordName, name)) {\n              addTokenToMatch();\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n              break;\n            }\n          }\n\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n\n        case 'AtKeyword':\n        case 'Function':\n          if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {\n            addTokenToMatch();\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n\n        case 'Token':\n          if (token !== null && token.value === state.value) {\n            addTokenToMatch();\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            break;\n          }\n\n          state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          break;\n\n        case 'Comma':\n          if (token !== null && token.type === _$$_REQUIRE(_dependencyMap[0], \"../tokenizer/const\").TYPE.Comma) {\n            if (isCommaContextStart(matchStack.token)) {\n              state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n            } else {\n              addTokenToMatch();\n              state = isCommaContextEnd(token) ? _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH : _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n            }\n          } else {\n            state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH : _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          }\n\n          break;\n\n        case 'String':\n          var string = '';\n\n          for (var lastTokenIndex = tokenIndex; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {\n            string += tokens[lastTokenIndex].value;\n          }\n\n          if (areStringsEqualCaseInsensitive(string, state.value)) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MATCH;\n          } else {\n            state = _$$_REQUIRE(_dependencyMap[1], \"./match-graph\").MISMATCH;\n          }\n\n          break;\n\n        default:\n          throw new Error('Unknown node type: ' + state.type);\n      }\n    }\n\n    totalIterationCount += iterationCount;\n\n    switch (exitReason) {\n      case null:\n        console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');\n        exitReason = EXIT_REASON_ITERATION_LIMIT;\n        matchStack = null;\n        break;\n\n      case EXIT_REASON_MATCH:\n        while (syntaxStack !== null) {\n          closeSyntax();\n        }\n\n        break;\n\n      default:\n        matchStack = null;\n    }\n\n    return {\n      tokens: tokens,\n      reason: exitReason,\n      iterations: iterationCount,\n      match: matchStack,\n      longestMatch: longestMatch\n    };\n  }\n\n  function matchAsList(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match !== null) {\n      var item = reverseList(matchResult.match).prev;\n      matchResult.match = [];\n\n      while (item !== null) {\n        switch (item.type) {\n          case STUB:\n            break;\n\n          case OPEN_SYNTAX:\n          case CLOSE_SYNTAX:\n            matchResult.match.push({\n              type: item.type,\n              syntax: item.syntax\n            });\n            break;\n\n          default:\n            matchResult.match.push({\n              token: item.token.value,\n              node: item.token.node\n            });\n            break;\n        }\n\n        item = item.prev;\n      }\n    }\n\n    return matchResult;\n  }\n\n  function matchAsTree(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match === null) {\n      return matchResult;\n    }\n\n    var item = matchResult.match;\n    var host = matchResult.match = {\n      syntax: matchGraph.syntax || null,\n      match: []\n    };\n    var hostStack = [host];\n    item = reverseList(item).prev;\n\n    while (item !== null) {\n      switch (item.type) {\n        case OPEN_SYNTAX:\n          host.match.push(host = {\n            syntax: item.syntax,\n            match: []\n          });\n          hostStack.push(host);\n          break;\n\n        case CLOSE_SYNTAX:\n          hostStack.pop();\n          host = hostStack[hostStack.length - 1];\n          break;\n\n        default:\n          host.match.push({\n            syntax: item.syntax || null,\n            token: item.token.value,\n            node: item.token.node\n          });\n      }\n\n      item = item.prev;\n    }\n\n    return matchResult;\n  }\n\n  module.exports = {\n    matchAsList: matchAsList,\n    matchAsTree: matchAsTree,\n    getTotalIterationCount: function getTotalIterationCount() {\n      return totalIterationCount;\n    }\n  };\n});","lineCount":546,"map":[[2,0,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,21],[2,40,1,38,"hasOwnProperty"],[2,54,1,0],[3,0,8,0],[3,6,8,4,"STUB"],[3,10,8,8],[3,13,8,11],[3,14,8,0],[4,0,9,0],[4,6,9,4,"TOKEN"],[4,11,9,9],[4,14,9,12],[4,15,9,0],[5,0,10,0],[5,6,10,4,"OPEN_SYNTAX"],[5,17,10,15],[5,20,10,18],[5,21,10,0],[6,0,11,0],[6,6,11,4,"CLOSE_SYNTAX"],[6,18,11,16],[6,21,11,19],[6,22,11,0],[7,0,13,0],[7,6,13,4,"EXIT_REASON_MATCH"],[7,23,13,21],[7,26,13,24],[7,33,13,0],[8,0,14,0],[8,6,14,4,"EXIT_REASON_MISMATCH"],[8,26,14,24],[8,29,14,27],[8,39,14,0],[9,0,15,0],[9,6,15,4,"EXIT_REASON_ITERATION_LIMIT"],[9,33,15,31],[9,36,15,34],[9,139,15,0],[10,0,17,0],[10,6,17,4,"ITERATION_LIMIT"],[10,21,17,19],[10,24,17,22],[10,29,17,0],[11,0,18,0],[11,6,18,4,"totalIterationCount"],[11,25,18,23],[11,28,18,26],[11,29,18,0],[13,0,20,0],[13,11,20,9,"reverseList"],[13,22,20,0],[13,23,20,21,"list"],[13,27,20,0],[13,29,20,27],[14,0,21,4],[14,8,21,8,"prev"],[14,12,21,12],[14,15,21,15],[14,19,21,4],[15,0,22,4],[15,8,22,8,"next"],[15,12,22,12],[15,15,22,15],[15,19,22,4],[16,0,23,4],[16,8,23,8,"item"],[16,12,23,12],[16,15,23,15,"list"],[16,19,23,4],[18,0,25,4],[18,11,25,11,"item"],[18,15,25,15],[18,20,25,20],[18,24,25,4],[18,26,25,26],[19,0,26,8,"next"],[19,6,26,8,"next"],[19,10,26,12],[19,13,26,15,"item"],[19,17,26,19],[19,18,26,20,"prev"],[19,22,26,8],[20,0,27,8,"item"],[20,6,27,8,"item"],[20,10,27,12],[20,11,27,13,"prev"],[20,15,27,8],[20,18,27,20,"prev"],[20,22,27,8],[21,0,28,8,"prev"],[21,6,28,8,"prev"],[21,10,28,12],[21,13,28,15,"item"],[21,17,28,8],[22,0,29,8,"item"],[22,6,29,8,"item"],[22,10,29,12],[22,13,29,15,"next"],[22,17,29,8],[23,0,30,5],[25,0,32,4],[25,11,32,11,"prev"],[25,15,32,4],[26,0,33,1],[28,0,35,0],[28,11,35,9,"areStringsEqualCaseInsensitive"],[28,41,35,0],[28,42,35,40,"testStr"],[28,49,35,0],[28,51,35,49,"referenceStr"],[28,63,35,0],[28,65,35,63],[29,0,36,4],[29,8,36,8,"testStr"],[29,15,36,15],[29,16,36,16,"length"],[29,22,36,8],[29,27,36,27,"referenceStr"],[29,39,36,39],[29,40,36,40,"length"],[29,46,36,4],[29,48,36,48],[30,0,37,8],[30,13,37,15],[30,18,37,8],[31,0,38,5],[33,0,40,4],[33,9,40,9],[33,13,40,13,"i"],[33,14,40,14],[33,17,40,17],[33,18,40,4],[33,20,40,20,"i"],[33,21,40,21],[33,24,40,24,"testStr"],[33,31,40,31],[33,32,40,32,"length"],[33,38,40,4],[33,40,40,40,"i"],[33,41,40,41],[33,43,40,4],[33,45,40,45],[34,0,41,8],[34,10,41,12,"testCode"],[34,18,41,20],[34,21,41,23,"testStr"],[34,28,41,30],[34,29,41,31,"charCodeAt"],[34,39,41,23],[34,40,41,42,"i"],[34,41,41,23],[34,42,41,8],[35,0,42,8],[35,10,42,12,"referenceCode"],[35,23,42,25],[35,26,42,28,"referenceStr"],[35,38,42,40],[35,39,42,41,"charCodeAt"],[35,49,42,28],[35,50,42,52,"i"],[35,51,42,28],[35,52,42,8],[37,0,45,8],[37,10,45,12,"testCode"],[37,18,45,20],[37,22,45,24],[37,28,45,12],[37,32,45,34,"testCode"],[37,40,45,42],[37,44,45,46],[37,50,45,8],[37,52,45,54],[38,0,46,12,"testCode"],[38,8,46,12,"testCode"],[38,16,46,20],[38,19,46,23,"testCode"],[38,27,46,31],[38,30,46,34],[38,32,46,12],[39,0,47,9],[41,0,49,8],[41,10,49,12,"testCode"],[41,18,49,20],[41,23,49,25,"referenceCode"],[41,36,49,8],[41,38,49,40],[42,0,50,12],[42,15,50,19],[42,20,50,12],[43,0,51,9],[44,0,52,5],[46,0,54,4],[46,11,54,11],[46,15,54,4],[47,0,55,1],[49,0,57,0],[49,11,57,9,"isContextEdgeDelim"],[49,29,57,0],[49,30,57,28,"token"],[49,35,57,0],[49,37,57,35],[50,0,58,4],[50,8,58,8,"token"],[50,13,58,13],[50,14,58,14,"type"],[50,18,58,8],[50,23,58,23],[50,81,58,28,"Delim"],[50,86,58,4],[50,88,58,35],[51,0,59,8],[51,13,59,15],[51,18,59,8],[52,0,60,5],[54,0,64,4],[54,11,64,11,"token"],[54,16,64,16],[54,17,64,17,"value"],[54,22,64,11],[54,27,64,27],[54,30,64,4],[55,0,65,1],[57,0,67,0],[57,11,67,9,"isCommaContextStart"],[57,30,67,0],[57,31,67,29,"token"],[57,36,67,0],[57,38,67,36],[58,0,68,4],[58,8,68,8,"token"],[58,13,68,13],[58,18,68,18],[58,22,68,4],[58,24,68,24],[59,0,69,8],[59,13,69,15],[59,17,69,8],[60,0,70,5],[62,0,72,4],[62,11,73,8,"token"],[62,16,73,13],[62,17,73,14,"type"],[62,21,73,8],[62,26,73,23],[62,84,73,28,"Comma"],[62,89,73,8],[62,93,74,8,"token"],[62,98,74,13],[62,99,74,14,"type"],[62,103,74,8],[62,108,74,23],[62,166,74,28,"Function"],[62,174,73,8],[62,178,75,8,"token"],[62,183,75,13],[62,184,75,14,"type"],[62,188,75,8],[62,193,75,23],[62,251,75,28,"LeftParenthesis"],[62,266,73,8],[62,270,76,8,"token"],[62,275,76,13],[62,276,76,14,"type"],[62,280,76,8],[62,285,76,23],[62,343,76,28,"LeftSquareBracket"],[62,360,73,8],[62,364,77,8,"token"],[62,369,77,13],[62,370,77,14,"type"],[62,374,77,8],[62,379,77,23],[62,437,77,28,"LeftCurlyBracket"],[62,453,73,8],[62,457,78,8,"isContextEdgeDelim"],[62,475,78,26],[62,476,78,27,"token"],[62,481,78,26],[62,482,72,4],[63,0,80,1],[65,0,82,0],[65,11,82,9,"isCommaContextEnd"],[65,28,82,0],[65,29,82,27,"token"],[65,34,82,0],[65,36,82,34],[66,0,83,4],[66,8,83,8,"token"],[66,13,83,13],[66,18,83,18],[66,22,83,4],[66,24,83,24],[67,0,84,8],[67,13,84,15],[67,17,84,8],[68,0,85,5],[70,0,87,4],[70,11,88,8,"token"],[70,16,88,13],[70,17,88,14,"type"],[70,21,88,8],[70,26,88,23],[70,84,88,28,"RightParenthesis"],[70,100,88,8],[70,104,89,8,"token"],[70,109,89,13],[70,110,89,14,"type"],[70,114,89,8],[70,119,89,23],[70,177,89,28,"RightSquareBracket"],[70,195,88,8],[70,199,90,8,"token"],[70,204,90,13],[70,205,90,14,"type"],[70,209,90,8],[70,214,90,23],[70,272,90,28,"RightCurlyBracket"],[70,289,88,8],[70,293,91,8,"token"],[70,298,91,13],[70,299,91,14,"type"],[70,303,91,8],[70,308,91,23],[70,366,91,28,"Delim"],[70,371,87,4],[71,0,93,1],[73,0,95,0],[73,11,95,9,"internalMatch"],[73,24,95,0],[73,25,95,23,"tokens"],[73,31,95,0],[73,33,95,31,"state"],[73,38,95,0],[73,40,95,38,"syntaxes"],[73,48,95,0],[73,50,95,48],[74,0,96,4],[74,13,96,13,"moveToNextToken"],[74,28,96,4],[74,31,96,31],[75,0,97,8],[75,9,97,11],[76,0,98,12,"tokenIndex"],[76,8,98,12,"tokenIndex"],[76,18,98,22],[77,0,99,12,"token"],[77,8,99,12,"token"],[77,13,99,17],[77,16,99,20,"tokenIndex"],[77,26,99,30],[77,29,99,33,"tokens"],[77,35,99,39],[77,36,99,40,"length"],[77,42,99,20],[77,45,99,49,"tokens"],[77,51,99,55],[77,52,99,56,"tokenIndex"],[77,62,99,55],[77,63,99,20],[77,66,99,70],[77,70,99,12],[78,0,100,9],[78,7,97,8],[78,15,100,17,"token"],[78,20,100,22],[78,25,100,27],[78,29,100,17],[78,34,100,36,"token"],[78,39,100,41],[78,40,100,42,"type"],[78,44,100,36],[78,49,100,51],[78,107,100,56,"WhiteSpace"],[78,117,100,36],[78,121,100,70,"token"],[78,126,100,75],[78,127,100,76,"type"],[78,131,100,70],[78,136,100,85],[78,194,100,90,"Comment"],[78,201,100,17],[78,202,97,8],[79,0,101,5],[81,0,103,4],[81,13,103,13,"getNextToken"],[81,25,103,4],[81,26,103,26,"offset"],[81,32,103,4],[81,34,103,34],[82,0,104,8],[82,10,104,12,"nextIndex"],[82,19,104,21],[82,22,104,24,"tokenIndex"],[82,32,104,34],[82,35,104,37,"offset"],[82,41,104,8],[83,0,106,8],[83,13,106,15,"nextIndex"],[83,22,106,24],[83,25,106,27,"tokens"],[83,31,106,33],[83,32,106,34,"length"],[83,38,106,15],[83,41,106,43,"tokens"],[83,47,106,49],[83,48,106,50,"nextIndex"],[83,57,106,49],[83,58,106,15],[83,61,106,63],[83,65,106,8],[84,0,107,5],[86,0,109,4],[86,13,109,13,"stateSnapshotFromSyntax"],[86,36,109,4],[86,37,109,37,"nextState"],[86,46,109,4],[86,48,109,48,"prev"],[86,52,109,4],[86,54,109,54],[87,0,110,8],[87,13,110,15],[88,0,111,12,"nextState"],[88,8,111,12,"nextState"],[88,17,111,21],[88,19,111,23,"nextState"],[88,28,110,15],[89,0,112,12,"matchStack"],[89,8,112,12,"matchStack"],[89,18,112,22],[89,20,112,24,"matchStack"],[89,30,110,15],[90,0,113,12,"syntaxStack"],[90,8,113,12,"syntaxStack"],[90,19,113,23],[90,21,113,25,"syntaxStack"],[90,32,110,15],[91,0,114,12,"thenStack"],[91,8,114,12,"thenStack"],[91,17,114,21],[91,19,114,23,"thenStack"],[91,28,110,15],[92,0,115,12,"tokenIndex"],[92,8,115,12,"tokenIndex"],[92,18,115,22],[92,20,115,24,"tokenIndex"],[92,30,110,15],[93,0,116,12,"prev"],[93,8,116,12,"prev"],[93,12,116,16],[93,14,116,18,"prev"],[94,0,110,15],[94,7,110,8],[95,0,118,5],[97,0,120,4],[97,13,120,13,"pushThenStack"],[97,26,120,4],[97,27,120,27,"nextState"],[97,36,120,4],[97,38,120,38],[98,0,121,8,"thenStack"],[98,6,121,8,"thenStack"],[98,15,121,17],[98,18,121,20],[99,0,122,12,"nextState"],[99,8,122,12,"nextState"],[99,17,122,21],[99,19,122,23,"nextState"],[99,28,121,20],[100,0,123,12,"matchStack"],[100,8,123,12,"matchStack"],[100,18,123,22],[100,20,123,24,"matchStack"],[100,30,121,20],[101,0,124,12,"syntaxStack"],[101,8,124,12,"syntaxStack"],[101,19,124,23],[101,21,124,25,"syntaxStack"],[101,32,121,20],[102,0,125,12,"prev"],[102,8,125,12,"prev"],[102,12,125,16],[102,14,125,18,"thenStack"],[103,0,121,20],[103,7,121,8],[104,0,127,5],[106,0,129,4],[106,13,129,13,"pushElseStack"],[106,26,129,4],[106,27,129,27,"nextState"],[106,36,129,4],[106,38,129,38],[107,0,130,8,"elseStack"],[107,6,130,8,"elseStack"],[107,15,130,17],[107,18,130,20,"stateSnapshotFromSyntax"],[107,41,130,43],[107,42,130,44,"nextState"],[107,51,130,43],[107,53,130,55,"elseStack"],[107,62,130,43],[107,63,130,8],[108,0,131,5],[110,0,133,4],[110,13,133,13,"addTokenToMatch"],[110,28,133,4],[110,31,133,31],[111,0,134,8,"matchStack"],[111,6,134,8,"matchStack"],[111,16,134,18],[111,19,134,21],[112,0,135,12,"type"],[112,8,135,12,"type"],[112,12,135,16],[112,14,135,18,"TOKEN"],[112,19,134,21],[113,0,136,12,"syntax"],[113,8,136,12,"syntax"],[113,14,136,18],[113,16,136,20,"state"],[113,21,136,25],[113,22,136,26,"syntax"],[113,28,134,21],[114,0,137,12,"token"],[114,8,137,12,"token"],[114,13,137,17],[114,15,137,19,"token"],[114,20,134,21],[115,0,138,12,"prev"],[115,8,138,12,"prev"],[115,12,138,16],[115,14,138,18,"matchStack"],[116,0,134,21],[116,7,134,8],[117,0,141,8,"moveToNextToken"],[117,6,141,8,"moveToNextToken"],[117,21,141,23],[118,0,142,8,"syntaxStash"],[118,6,142,8,"syntaxStash"],[118,17,142,19],[118,20,142,22],[118,24,142,8],[120,0,144,8],[120,10,144,12,"tokenIndex"],[120,20,144,22],[120,23,144,25,"longestMatch"],[120,35,144,8],[120,37,144,39],[121,0,145,12,"longestMatch"],[121,8,145,12,"longestMatch"],[121,20,145,24],[121,23,145,27,"tokenIndex"],[121,33,145,12],[122,0,146,9],[123,0,147,5],[125,0,149,4],[125,13,149,13,"openSyntax"],[125,23,149,4],[125,26,149,26],[126,0,150,8,"syntaxStack"],[126,6,150,8,"syntaxStack"],[126,17,150,19],[126,20,150,22],[127,0,151,12,"syntax"],[127,8,151,12,"syntax"],[127,14,151,18],[127,16,151,20,"state"],[127,21,151,25],[127,22,151,26,"syntax"],[127,28,150,22],[128,0,152,12,"opts"],[128,8,152,12,"opts"],[128,12,152,16],[128,14,152,18,"state"],[128,19,152,23],[128,20,152,24,"syntax"],[128,26,152,18],[128,27,152,31,"opts"],[128,31,152,18],[128,35,152,40,"syntaxStack"],[128,46,152,51],[128,51,152,56],[128,55,152,40],[128,59,152,64,"syntaxStack"],[128,70,152,75],[128,71,152,76,"opts"],[128,75,152,18],[128,79,152,85],[128,83,150,22],[129,0,153,12,"prev"],[129,8,153,12,"prev"],[129,12,153,16],[129,14,153,18,"syntaxStack"],[130,0,150,22],[130,7,150,8],[131,0,156,8,"matchStack"],[131,6,156,8,"matchStack"],[131,16,156,18],[131,19,156,21],[132,0,157,12,"type"],[132,8,157,12,"type"],[132,12,157,16],[132,14,157,18,"OPEN_SYNTAX"],[132,25,156,21],[133,0,158,12,"syntax"],[133,8,158,12,"syntax"],[133,14,158,18],[133,16,158,20,"state"],[133,21,158,25],[133,22,158,26,"syntax"],[133,28,156,21],[134,0,159,12,"token"],[134,8,159,12,"token"],[134,13,159,17],[134,15,159,19,"matchStack"],[134,25,159,29],[134,26,159,30,"token"],[134,31,156,21],[135,0,160,12,"prev"],[135,8,160,12,"prev"],[135,12,160,16],[135,14,160,18,"matchStack"],[136,0,156,21],[136,7,156,8],[137,0,162,5],[139,0,164,4],[139,13,164,13,"closeSyntax"],[139,24,164,4],[139,27,164,27],[140,0,165,8],[140,10,165,12,"matchStack"],[140,20,165,22],[140,21,165,23,"type"],[140,25,165,12],[140,30,165,32,"OPEN_SYNTAX"],[140,41,165,8],[140,43,165,45],[141,0,166,12,"matchStack"],[141,8,166,12,"matchStack"],[141,18,166,22],[141,21,166,25,"matchStack"],[141,31,166,35],[141,32,166,36,"prev"],[141,36,166,12],[142,0,167,9],[142,7,165,8],[142,13,167,15],[143,0,168,12,"matchStack"],[143,8,168,12,"matchStack"],[143,18,168,22],[143,21,168,25],[144,0,169,16,"type"],[144,10,169,16,"type"],[144,14,169,20],[144,16,169,22,"CLOSE_SYNTAX"],[144,28,168,25],[145,0,170,16,"syntax"],[145,10,170,16,"syntax"],[145,16,170,22],[145,18,170,24,"syntaxStack"],[145,29,170,35],[145,30,170,36,"syntax"],[145,36,168,25],[146,0,171,16,"token"],[146,10,171,16,"token"],[146,15,171,21],[146,17,171,23,"matchStack"],[146,27,171,33],[146,28,171,34,"token"],[146,33,168,25],[147,0,172,16,"prev"],[147,10,172,16,"prev"],[147,14,172,20],[147,16,172,22,"matchStack"],[148,0,168,25],[148,9,168,12],[149,0,174,9],[151,0,176,8,"syntaxStack"],[151,6,176,8,"syntaxStack"],[151,17,176,19],[151,20,176,22,"syntaxStack"],[151,31,176,33],[151,32,176,34,"prev"],[151,36,176,8],[152,0,177,5],[154,0,179,4],[154,8,179,8,"syntaxStack"],[154,19,179,19],[154,22,179,22],[154,26,179,4],[155,0,180,4],[155,8,180,8,"thenStack"],[155,17,180,17],[155,20,180,20],[155,24,180,4],[156,0,181,4],[156,8,181,8,"elseStack"],[156,17,181,17],[156,20,181,20],[156,24,181,4],[157,0,186,4],[157,8,186,8,"syntaxStash"],[157,19,186,19],[157,22,186,22],[157,26,186,4],[158,0,188,4],[158,8,188,8,"iterationCount"],[158,22,188,22],[158,25,188,25],[158,26,188,4],[159,0,189,4],[159,8,189,8,"exitReason"],[159,18,189,18],[159,21,189,21],[159,25,189,4],[160,0,191,4],[160,8,191,8,"token"],[160,13,191,13],[160,16,191,16],[160,20,191,4],[161,0,192,4],[161,8,192,8,"tokenIndex"],[161,18,192,18],[161,21,192,21],[161,22,192,22],[161,23,192,4],[162,0,193,4],[162,8,193,8,"longestMatch"],[162,20,193,20],[162,23,193,23],[162,24,193,4],[163,0,194,4],[163,8,194,8,"matchStack"],[163,18,194,18],[163,21,194,21],[164,0,195,8,"type"],[164,6,195,8,"type"],[164,10,195,12],[164,12,195,14,"STUB"],[164,16,194,21],[165,0,196,8,"syntax"],[165,6,196,8,"syntax"],[165,12,196,14],[165,14,196,16],[165,18,194,21],[166,0,197,8,"token"],[166,6,197,8,"token"],[166,11,197,13],[166,13,197,15],[166,17,194,21],[167,0,198,8,"prev"],[167,6,198,8,"prev"],[167,10,198,12],[167,12,198,14],[168,0,194,21],[168,5,194,4],[169,0,201,4,"moveToNextToken"],[169,4,201,4,"moveToNextToken"],[169,19,201,19],[171,0,203,4],[171,11,203,11,"exitReason"],[171,21,203,21],[171,26,203,26],[171,30,203,11],[171,34,203,34],[171,36,203,36,"iterationCount"],[171,50,203,34],[171,53,203,53,"ITERATION_LIMIT"],[171,68,203,4],[171,70,203,70],[172,0,221,8],[172,14,221,16,"state"],[172,19,221,21],[172,20,221,22,"type"],[172,24,221,8],[173,0,222,12],[173,13,222,17],[173,20,222,12],[174,0,223,16],[174,14,223,20,"thenStack"],[174,23,223,29],[174,28,223,34],[174,32,223,16],[174,34,223,40],[175,0,225,20],[175,16,225,24,"token"],[175,21,225,29],[175,26,225,34],[175,30,225,20],[175,32,225,40],[176,0,227,24],[176,18,227,28,"tokenIndex"],[176,28,227,38],[176,33,227,43,"tokens"],[176,39,227,49],[176,40,227,50,"length"],[176,46,227,43],[176,49,227,59],[176,50,227,28],[176,54,227,65,"token"],[176,59,227,70],[176,60,227,71,"value"],[176,65,227,65],[176,70,227,81],[176,75,227,65],[176,79,227,90,"token"],[176,84,227,95],[176,85,227,96,"value"],[176,90,227,90],[176,95,227,106],[176,100,227,24],[176,102,227,114],[177,0,228,28,"state"],[177,16,228,28,"state"],[177,21,228,33],[177,80,228,28],[178,0,229,28],[179,0,230,25],[180,0,231,21],[182,0,234,20,"exitReason"],[182,12,234,20,"exitReason"],[182,22,234,30],[182,25,234,33,"EXIT_REASON_MATCH"],[182,42,234,20],[183,0,235,20],[184,0,236,17],[186,0,239,16,"state"],[186,10,239,16,"state"],[186,15,239,21],[186,18,239,24,"thenStack"],[186,27,239,33],[186,28,239,34,"nextState"],[186,37,239,16],[188,0,242,16],[188,14,242,20,"state"],[188,19,242,25],[188,86,242,16],[188,88,242,46],[189,0,243,20],[189,16,243,24,"thenStack"],[189,25,243,33],[189,26,243,34,"matchStack"],[189,36,243,24],[189,41,243,49,"matchStack"],[189,51,243,20],[189,53,243,61],[190,0,244,24,"state"],[190,14,244,24,"state"],[190,19,244,29],[190,78,244,24],[191,0,245,24],[192,0,246,21],[192,13,243,20],[192,19,246,27],[193,0,247,24,"state"],[193,14,247,24,"state"],[193,19,247,29],[193,75,247,24],[194,0,248,21],[195,0,249,17],[197,0,252,16],[197,17,252,23,"thenStack"],[197,26,252,32],[197,27,252,33,"syntaxStack"],[197,38,252,23],[197,43,252,49,"syntaxStack"],[197,54,252,16],[197,56,252,62],[198,0,253,20,"closeSyntax"],[198,12,253,20,"closeSyntax"],[198,23,253,31],[199,0,254,17],[201,0,257,16,"thenStack"],[201,10,257,16,"thenStack"],[201,19,257,25],[201,22,257,28,"thenStack"],[201,31,257,37],[201,32,257,38,"prev"],[201,36,257,16],[202,0,258,16],[204,0,260,12],[204,13,260,17],[204,23,260,12],[205,0,262,16],[205,14,262,20,"syntaxStash"],[205,25,262,31],[205,30,262,36],[205,34,262,20],[205,38,262,44,"syntaxStash"],[205,49,262,55],[205,54,262,60],[205,59,262,16],[205,61,262,67],[206,0,264,20],[206,16,264,24,"elseStack"],[206,25,264,33],[206,30,264,38],[206,34,264,24],[206,38,264,46,"tokenIndex"],[206,48,264,56],[206,51,264,59,"elseStack"],[206,60,264,68],[206,61,264,69,"tokenIndex"],[206,71,264,20],[206,73,264,81],[207,0,266,24,"elseStack"],[207,14,266,24,"elseStack"],[207,23,266,33],[207,26,266,36,"syntaxStash"],[207,37,266,24],[208,0,267,24,"syntaxStash"],[208,14,267,24,"syntaxStash"],[208,25,267,35],[208,28,267,38],[208,33,267,24],[209,0,268,21],[210,0,269,17],[210,11,262,16],[210,17,269,23],[210,21,269,27,"elseStack"],[210,30,269,36],[210,35,269,41],[210,39,269,23],[210,41,269,47],[211,0,272,20,"exitReason"],[211,12,272,20,"exitReason"],[211,22,272,30],[211,25,272,33,"EXIT_REASON_MISMATCH"],[211,45,272,20],[212,0,273,20],[213,0,274,17],[215,0,277,16,"state"],[215,10,277,16,"state"],[215,15,277,21],[215,18,277,24,"elseStack"],[215,27,277,33],[215,28,277,34,"nextState"],[215,37,277,16],[216,0,280,16,"thenStack"],[216,10,280,16,"thenStack"],[216,19,280,25],[216,22,280,28,"elseStack"],[216,31,280,37],[216,32,280,38,"thenStack"],[216,41,280,16],[217,0,281,16,"syntaxStack"],[217,10,281,16,"syntaxStack"],[217,21,281,27],[217,24,281,30,"elseStack"],[217,33,281,39],[217,34,281,40,"syntaxStack"],[217,45,281,16],[218,0,282,16,"matchStack"],[218,10,282,16,"matchStack"],[218,20,282,26],[218,23,282,29,"elseStack"],[218,32,282,38],[218,33,282,39,"matchStack"],[218,43,282,16],[219,0,283,16,"tokenIndex"],[219,10,283,16,"tokenIndex"],[219,20,283,26],[219,23,283,29,"elseStack"],[219,32,283,38],[219,33,283,39,"tokenIndex"],[219,43,283,16],[220,0,284,16,"token"],[220,10,284,16,"token"],[220,15,284,21],[220,18,284,24,"tokenIndex"],[220,28,284,34],[220,31,284,37,"tokens"],[220,37,284,43],[220,38,284,44,"length"],[220,44,284,24],[220,47,284,53,"tokens"],[220,53,284,59],[220,54,284,60,"tokenIndex"],[220,64,284,59],[220,65,284,24],[220,68,284,74],[220,72,284,16],[221,0,287,16,"elseStack"],[221,10,287,16,"elseStack"],[221,19,287,25],[221,22,287,28,"elseStack"],[221,31,287,37],[221,32,287,38,"prev"],[221,36,287,16],[222,0,288,16],[224,0,290,12],[224,13,290,17],[224,25,290,12],[225,0,291,16,"state"],[225,10,291,16,"state"],[225,15,291,21],[225,18,291,24,"state"],[225,23,291,29],[225,24,291,30,"match"],[225,29,291,16],[226,0,292,16],[228,0,294,12],[228,13,294,17],[228,17,294,12],[229,0,297,16],[229,14,297,20,"state"],[229,19,297,25],[229,20,297,26,"else"],[229,24,297,20],[229,85,297,16],[229,87,297,45],[230,0,298,20,"pushElseStack"],[230,12,298,20,"pushElseStack"],[230,25,298,33],[230,26,298,34,"state"],[230,31,298,39],[230,32,298,40,"else"],[230,36,298,33],[230,37,298,20],[231,0,299,17],[233,0,301,16],[233,14,301,20,"state"],[233,19,301,25],[233,20,301,26,"then"],[233,24,301,20],[233,82,301,16],[233,84,301,42],[234,0,302,20,"pushThenStack"],[234,12,302,20,"pushThenStack"],[234,25,302,33],[234,26,302,34,"state"],[234,31,302,39],[234,32,302,40,"then"],[234,36,302,33],[234,37,302,20],[235,0,303,17],[237,0,305,16,"state"],[237,10,305,16,"state"],[237,15,305,21],[237,18,305,24,"state"],[237,23,305,29],[237,24,305,30,"match"],[237,29,305,16],[238,0,306,16],[240,0,308,12],[240,13,308,17],[240,24,308,12],[241,0,309,16,"state"],[241,10,309,16,"state"],[241,15,309,21],[241,18,309,24],[242,0,310,20,"type"],[242,12,310,20,"type"],[242,16,310,24],[242,18,310,26],[242,35,309,24],[243,0,311,20,"syntax"],[243,12,311,20,"syntax"],[243,18,311,26],[243,20,311,28,"state"],[243,25,309,24],[244,0,312,20,"index"],[244,12,312,20,"index"],[244,17,312,25],[244,19,312,27],[244,20,309,24],[245,0,313,20,"mask"],[245,12,313,20,"mask"],[245,16,313,24],[245,18,313,26],[246,0,309,24],[246,11,309,16],[247,0,315,16],[249,0,317,12],[249,13,317,17],[249,30,317,12],[250,0,318,16],[250,14,318,20,"terms"],[250,19,318,25],[250,22,318,28,"state"],[250,27,318,33],[250,28,318,34,"syntax"],[250,34,318,28],[250,35,318,41,"terms"],[250,40,318,16],[252,0,320,16],[252,14,320,20,"state"],[252,19,320,25],[252,20,320,26,"index"],[252,25,320,20],[252,30,320,36,"terms"],[252,35,320,41],[252,36,320,42,"length"],[252,42,320,16],[252,44,320,50],[253,0,322,20],[253,16,322,24,"state"],[253,21,322,29],[253,22,322,30,"mask"],[253,26,322,24],[253,31,322,39],[253,32,322,24],[253,36,322,44,"state"],[253,41,322,49],[253,42,322,50,"syntax"],[253,48,322,44],[253,49,322,57,"all"],[253,52,322,20],[253,54,322,62],[254,0,323,24,"state"],[254,14,323,24,"state"],[254,19,323,29],[254,78,323,24],[255,0,324,24],[256,0,325,21],[258,0,328,20,"state"],[258,12,328,20,"state"],[258,17,328,25],[258,73,328,20],[259,0,329,20],[260,0,330,17],[262,0,333,16],[262,14,333,20,"state"],[262,19,333,25],[262,20,333,26,"mask"],[262,24,333,20],[262,29,333,35],[262,30,333,36],[262,35,333,41,"terms"],[262,40,333,46],[262,41,333,47,"length"],[262,47,333,35],[262,51,333,57],[262,52,333,16],[262,54,333,60],[263,0,334,20,"state"],[263,12,334,20,"state"],[263,17,334,25],[263,73,334,20],[264,0,335,20],[265,0,336,17],[267,0,338,16],[267,17,338,23,"state"],[267,22,338,28],[267,23,338,29,"index"],[267,28,338,23],[267,31,338,37,"terms"],[267,36,338,42],[267,37,338,43,"length"],[267,43,338,16],[267,45,338,51,"state"],[267,50,338,56],[267,51,338,57,"index"],[267,56,338,51],[267,58,338,16],[267,60,338,66],[268,0,339,20],[268,16,339,24,"matchFlag"],[268,25,339,33],[268,28,339,36],[268,33,339,41,"state"],[268,38,339,46],[268,39,339,47,"index"],[268,44,339,20],[270,0,341,20],[270,16,341,24],[270,17,341,25,"state"],[270,22,341,30],[270,23,341,31,"mask"],[270,27,341,25],[270,30,341,38,"matchFlag"],[270,39,341,24],[270,45,341,53],[270,46,341,20],[270,48,341,56],[271,0,344,24,"pushElseStack"],[271,14,344,24,"pushElseStack"],[271,27,344,37],[271,28,344,38,"state"],[271,33,344,37],[271,34,344,24],[272,0,345,24,"pushThenStack"],[272,14,345,24,"pushThenStack"],[272,27,345,37],[272,28,345,38],[273,0,346,28,"type"],[273,16,346,28,"type"],[273,20,346,32],[273,22,346,34],[273,36,345,38],[274,0,347,28,"syntax"],[274,16,347,28,"syntax"],[274,22,347,34],[274,24,347,36,"state"],[274,29,347,41],[274,30,347,42,"syntax"],[274,36,345,38],[275,0,348,28,"mask"],[275,16,348,28,"mask"],[275,20,348,32],[275,22,348,34,"state"],[275,27,348,39],[275,28,348,40,"mask"],[275,32,348,34],[275,35,348,47,"matchFlag"],[276,0,345,38],[276,15,345,37],[276,16,345,24],[277,0,352,24,"state"],[277,14,352,24,"state"],[277,19,352,29],[277,22,352,32,"terms"],[277,27,352,37],[277,28,352,38,"state"],[277,33,352,43],[277,34,352,44,"index"],[277,39,352,38],[277,41,352,37],[277,42,352,24],[278,0,353,24],[279,0,354,21],[280,0,355,17],[282,0,356,16],[284,0,358,12],[284,13,358,17],[284,27,358,12],[285,0,359,16,"state"],[285,10,359,16,"state"],[285,15,359,21],[285,18,359,24],[286,0,360,20,"type"],[286,12,360,20,"type"],[286,16,360,24],[286,18,360,26],[286,35,359,24],[287,0,361,20,"syntax"],[287,12,361,20,"syntax"],[287,18,361,26],[287,20,361,28,"state"],[287,25,361,33],[287,26,361,34,"syntax"],[287,32,359,24],[288,0,362,20,"index"],[288,12,362,20,"index"],[288,17,362,25],[288,19,362,27],[288,20,359,24],[289,0,363,20,"mask"],[289,12,363,20,"mask"],[289,16,363,24],[289,18,363,26,"state"],[289,23,363,31],[289,24,363,32,"mask"],[290,0,359,24],[290,11,359,16],[291,0,365,16],[293,0,367,12],[293,13,367,17],[293,19,367,12],[294,0,368,16],[294,14,368,20,"token"],[294,19,368,25],[294,24,368,30],[294,28,368,16],[294,30,368,36],[295,0,369,20],[295,16,369,24,"name"],[295,20,369,28],[295,23,369,31,"token"],[295,28,369,36],[295,29,369,37,"value"],[295,34,369,31],[295,35,369,43,"toLowerCase"],[295,46,369,31],[295,48,369,20],[297,0,372,20],[297,16,372,24,"name"],[297,20,372,28],[297,21,372,29,"indexOf"],[297,28,372,24],[297,29,372,37],[297,33,372,24],[297,39,372,47],[297,40,372,48],[297,41,372,20],[297,43,372,51],[298,0,373,24,"name"],[298,14,373,24,"name"],[298,18,373,28],[298,21,373,31,"name"],[298,25,373,35],[298,26,373,36,"replace"],[298,33,373,31],[298,34,373,44],[298,45,373,31],[298,47,373,57],[298,49,373,31],[298,50,373,24],[299,0,374,21],[301,0,376,20],[301,16,376,24,"hasOwnProperty"],[301,30,376,38],[301,31,376,39,"call"],[301,35,376,24],[301,36,376,44,"state"],[301,41,376,49],[301,42,376,50,"map"],[301,45,376,24],[301,47,376,55,"name"],[301,51,376,24],[301,52,376,20],[301,54,376,62],[302,0,377,24,"state"],[302,14,377,24,"state"],[302,19,377,29],[302,22,377,32,"state"],[302,27,377,37],[302,28,377,38,"map"],[302,31,377,32],[302,32,377,42,"name"],[302,36,377,32],[302,37,377,24],[303,0,378,24],[304,0,379,21],[305,0,380,17],[307,0,382,16,"state"],[307,10,382,16,"state"],[307,15,382,21],[307,74,382,16],[308,0,383,16],[310,0,385,12],[310,13,385,17],[310,22,385,12],[311,0,386,16],[311,14,386,20,"opts"],[311,18,386,24],[311,21,386,27,"syntaxStack"],[311,32,386,38],[311,37,386,43],[311,41,386,27],[311,44,386,50,"syntaxStack"],[311,55,386,61],[311,56,386,62,"opts"],[311,60,386,27],[311,63,386,69],[311,67,386,16],[312,0,387,16],[312,14,387,20,"lastTokenIndex"],[312,28,387,34],[312,31,387,37,"tokenIndex"],[312,41,387,47],[312,44,387,50,"Math"],[312,48,387,54],[312,49,387,55,"floor"],[312,54,387,50],[312,55,387,61,"state"],[312,60,387,66],[312,61,387,67,"fn"],[312,63,387,61],[312,64,387,70,"token"],[312,69,387,61],[312,71,387,77,"getNextToken"],[312,83,387,61],[312,85,387,91,"opts"],[312,89,387,61],[312,90,387,50],[312,91,387,16],[314,0,389,16],[314,14,389,20],[314,15,389,21,"isNaN"],[314,20,389,26],[314,21,389,27,"lastTokenIndex"],[314,35,389,26],[314,36,389,20],[314,40,389,46,"lastTokenIndex"],[314,54,389,60],[314,57,389,63,"tokenIndex"],[314,67,389,16],[314,69,389,75],[315,0,390,20],[315,19,390,27,"tokenIndex"],[315,29,390,37],[315,32,390,40,"lastTokenIndex"],[315,46,390,20],[315,48,390,56],[316,0,391,24,"addTokenToMatch"],[316,14,391,24,"addTokenToMatch"],[316,29,391,39],[317,0,392,21],[319,0,394,20,"state"],[319,12,394,20,"state"],[319,17,394,25],[319,73,394,20],[320,0,395,17],[320,11,389,16],[320,17,395,23],[321,0,396,20,"state"],[321,12,396,20,"state"],[321,17,396,25],[321,76,396,20],[322,0,397,17],[324,0,399,16],[326,0,401,12],[326,13,401,17],[326,19,401,12],[327,0,402,12],[327,13,402,17],[327,23,402,12],[328,0,403,16],[328,14,403,20,"syntaxDict"],[328,24,403,30],[328,27,403,33,"state"],[328,32,403,38],[328,33,403,39,"type"],[328,37,403,33],[328,42,403,48],[328,48,403,33],[328,51,403,57],[328,58,403,33],[328,61,403,67],[328,73,403,16],[329,0,404,16],[329,14,404,20,"dictSyntax"],[329,24,404,30],[329,27,404,33,"hasOwnProperty"],[329,41,404,47],[329,42,404,48,"call"],[329,46,404,33],[329,47,404,53,"syntaxes"],[329,55,404,33],[329,57,404,63,"syntaxDict"],[329,67,404,33],[329,71,404,77,"syntaxes"],[329,79,404,85],[329,80,404,86,"syntaxDict"],[329,90,404,85],[329,91,404,77],[329,92,404,98,"state"],[329,97,404,103],[329,98,404,104,"name"],[329,102,404,77],[329,103,404,33],[329,106,404,112],[329,110,404,16],[331,0,406,16],[331,14,406,20],[331,15,406,21,"dictSyntax"],[331,25,406,20],[331,29,406,35],[331,30,406,36,"dictSyntax"],[331,40,406,46],[331,41,406,47,"match"],[331,46,406,16],[331,48,406,54],[332,0,407,20],[332,18,407,26],[332,22,407,30,"Error"],[332,27,407,26],[332,28,408,24],[332,56,409,25,"state"],[332,61,409,30],[332,62,409,31,"type"],[332,66,409,25],[332,71,409,40],[332,77,409,25],[332,80,410,30],[332,86,410,36,"state"],[332,91,410,41],[332,92,410,42,"name"],[332,96,410,30],[332,99,410,49],[332,102,409,25],[332,105,411,30],[332,113,411,38,"state"],[332,118,411,43],[332,119,411,44,"name"],[332,123,411,30],[332,126,411,51],[332,131,408,24],[332,132,407,26],[332,133,407,20],[333,0,413,17],[335,0,416,16],[335,14,416,20,"syntaxStash"],[335,25,416,31],[335,30,416,36],[335,35,416,20],[335,39,416,45,"token"],[335,44,416,50],[335,49,416,55],[335,53,416,20],[335,57,416,63,"state"],[335,62,416,68],[335,63,416,69,"type"],[335,67,416,63],[335,72,416,78],[335,78,416,16],[335,80,416,86],[336,0,417,20],[336,16,417,24,"lowPriorityMatching"],[336,35,417,43],[336,38,421,25,"state"],[336,43,421,30],[336,44,421,31,"name"],[336,48,421,25],[336,53,421,40],[336,67,421,25],[336,71,421,58,"token"],[336,76,421,63],[336,77,421,64,"type"],[336,81,421,58],[336,86,421,73],[336,144,421,78,"Ident"],[336,149,421,24],[336,153,426,25,"state"],[336,158,426,30],[336,159,426,31,"name"],[336,163,426,25],[336,168,426,40],[336,176,426,25],[336,180,426,52,"token"],[336,185,426,57],[336,186,426,58,"value"],[336,191,426,52],[336,196,426,68],[336,199,417,20],[338,0,428,20],[338,16,428,24,"lowPriorityMatching"],[338,35,428,20],[338,37,428,45],[339,0,429,24],[339,18,429,28,"syntaxStash"],[339,29,429,39],[339,34,429,44],[339,38,429,24],[339,40,429,50],[340,0,430,28,"syntaxStash"],[340,16,430,28,"syntaxStash"],[340,27,430,39],[340,30,430,42,"stateSnapshotFromSyntax"],[340,53,430,65],[340,54,430,66,"state"],[340,59,430,65],[340,61,430,73,"elseStack"],[340,70,430,65],[340,71,430,28],[341,0,431,25],[343,0,433,24,"state"],[343,14,433,24,"state"],[343,19,433,29],[343,78,433,24],[344,0,434,24],[345,0,435,21],[346,0,436,17],[348,0,438,16,"openSyntax"],[348,10,438,16,"openSyntax"],[348,20,438,26],[349,0,439,16,"state"],[349,10,439,16,"state"],[349,15,439,21],[349,18,439,24,"dictSyntax"],[349,28,439,34],[349,29,439,35,"match"],[349,34,439,16],[350,0,440,16],[352,0,442,12],[352,13,442,17],[352,22,442,12],[353,0,443,16],[353,14,443,20,"name"],[353,18,443,24],[353,21,443,27,"state"],[353,26,443,32],[353,27,443,33,"name"],[353,31,443,16],[355,0,445,16],[355,14,445,20,"token"],[355,19,445,25],[355,24,445,30],[355,28,445,16],[355,30,445,36],[356,0,446,20],[356,16,446,24,"keywordName"],[356,27,446,35],[356,30,446,38,"token"],[356,35,446,43],[356,36,446,44,"value"],[356,41,446,20],[358,0,449,20],[358,16,449,24,"keywordName"],[358,27,449,35],[358,28,449,36,"indexOf"],[358,35,449,24],[358,36,449,44],[358,40,449,24],[358,46,449,54],[358,47,449,55],[358,48,449,20],[358,50,449,58],[359,0,450,24,"keywordName"],[359,14,450,24,"keywordName"],[359,25,450,35],[359,28,450,38,"keywordName"],[359,39,450,49],[359,40,450,50,"replace"],[359,47,450,38],[359,48,450,58],[359,59,450,38],[359,61,450,71],[359,63,450,38],[359,64,450,24],[360,0,451,21],[362,0,453,20],[362,16,453,24,"areStringsEqualCaseInsensitive"],[362,46,453,54],[362,47,453,55,"keywordName"],[362,58,453,54],[362,60,453,68,"name"],[362,64,453,54],[362,65,453,20],[362,67,453,75],[363,0,454,24,"addTokenToMatch"],[363,14,454,24,"addTokenToMatch"],[363,29,454,39],[364,0,455,24,"state"],[364,14,455,24,"state"],[364,19,455,29],[364,75,455,24],[365,0,456,24],[366,0,457,21],[367,0,458,17],[369,0,460,16,"state"],[369,10,460,16,"state"],[369,15,460,21],[369,74,460,16],[370,0,461,16],[372,0,463,12],[372,13,463,17],[372,24,463,12],[373,0,464,12],[373,13,464,17],[373,23,464,12],[374,0,465,16],[374,14,465,20,"token"],[374,19,465,25],[374,24,465,30],[374,28,465,20],[374,32,465,38,"areStringsEqualCaseInsensitive"],[374,62,465,68],[374,63,465,69,"token"],[374,68,465,74],[374,69,465,75,"value"],[374,74,465,68],[374,76,465,82,"state"],[374,81,465,87],[374,82,465,88,"name"],[374,86,465,68],[374,87,465,16],[374,89,465,95],[375,0,466,20,"addTokenToMatch"],[375,12,466,20,"addTokenToMatch"],[375,27,466,35],[376,0,467,20,"state"],[376,12,467,20,"state"],[376,17,467,25],[376,73,467,20],[377,0,468,20],[378,0,469,17],[380,0,471,16,"state"],[380,10,471,16,"state"],[380,15,471,21],[380,74,471,16],[381,0,472,16],[383,0,474,12],[383,13,474,17],[383,20,474,12],[384,0,475,16],[384,14,475,20,"token"],[384,19,475,25],[384,24,475,30],[384,28,475,20],[384,32,475,38,"token"],[384,37,475,43],[384,38,475,44,"value"],[384,43,475,38],[384,48,475,54,"state"],[384,53,475,59],[384,54,475,60,"value"],[384,59,475,16],[384,61,475,67],[385,0,476,20,"addTokenToMatch"],[385,12,476,20,"addTokenToMatch"],[385,27,476,35],[386,0,477,20,"state"],[386,12,477,20,"state"],[386,17,477,25],[386,73,477,20],[387,0,478,20],[388,0,479,17],[390,0,481,16,"state"],[390,10,481,16,"state"],[390,15,481,21],[390,74,481,16],[391,0,482,16],[393,0,484,12],[393,13,484,17],[393,20,484,12],[394,0,485,16],[394,14,485,20,"token"],[394,19,485,25],[394,24,485,30],[394,28,485,20],[394,32,485,38,"token"],[394,37,485,43],[394,38,485,44,"type"],[394,42,485,38],[394,47,485,53],[394,105,485,58,"Comma"],[394,110,485,16],[394,112,485,65],[395,0,486,20],[395,16,486,24,"isCommaContextStart"],[395,35,486,43],[395,36,486,44,"matchStack"],[395,46,486,54],[395,47,486,55,"token"],[395,52,486,43],[395,53,486,20],[395,55,486,63],[396,0,487,24,"state"],[396,14,487,24,"state"],[396,19,487,29],[396,78,487,24],[397,0,488,21],[397,13,486,20],[397,19,488,27],[398,0,489,24,"addTokenToMatch"],[398,14,489,24,"addTokenToMatch"],[398,29,489,39],[399,0,490,24,"state"],[399,14,490,24,"state"],[399,19,490,29],[399,22,490,32,"isCommaContextEnd"],[399,39,490,49],[399,40,490,50,"token"],[399,45,490,49],[399,46,490,32],[399,161,490,24],[400,0,491,21],[401,0,492,17],[401,11,485,16],[401,17,492,23],[402,0,493,20,"state"],[402,12,493,20,"state"],[402,17,493,25],[402,20,493,28,"isCommaContextStart"],[402,39,493,47],[402,40,493,48,"matchStack"],[402,50,493,58],[402,51,493,59,"token"],[402,56,493,47],[402,57,493,28],[402,61,493,69,"isCommaContextEnd"],[402,78,493,86],[402,79,493,87,"token"],[402,84,493,86],[402,85,493,28],[402,200,493,20],[403,0,494,17],[405,0,496,16],[407,0,498,12],[407,13,498,17],[407,21,498,12],[408,0,499,16],[408,14,499,20,"string"],[408,20,499,26],[408,23,499,29],[408,25,499,16],[410,0,501,16],[410,15,501,21],[410,19,501,25,"lastTokenIndex"],[410,33,501,39],[410,36,501,42,"tokenIndex"],[410,46,501,16],[410,48,501,54,"lastTokenIndex"],[410,62,501,68],[410,65,501,71,"tokens"],[410,71,501,77],[410,72,501,78,"length"],[410,78,501,54],[410,82,501,88,"string"],[410,88,501,94],[410,89,501,95,"length"],[410,95,501,88],[410,98,501,104,"state"],[410,103,501,109],[410,104,501,110,"value"],[410,109,501,104],[410,110,501,116,"length"],[410,116,501,16],[410,118,501,124,"lastTokenIndex"],[410,132,501,138],[410,134,501,16],[410,136,501,142],[411,0,502,20,"string"],[411,12,502,20,"string"],[411,18,502,26],[411,22,502,30,"tokens"],[411,28,502,36],[411,29,502,37,"lastTokenIndex"],[411,43,502,36],[411,44,502,30],[411,45,502,53,"value"],[411,50,502,20],[412,0,503,17],[414,0,505,16],[414,14,505,20,"areStringsEqualCaseInsensitive"],[414,44,505,50],[414,45,505,51,"string"],[414,51,505,50],[414,53,505,59,"state"],[414,58,505,64],[414,59,505,65,"value"],[414,64,505,50],[414,65,505,16],[414,67,505,73],[415,0,506,20],[415,19,506,27,"tokenIndex"],[415,29,506,37],[415,32,506,40,"lastTokenIndex"],[415,46,506,20],[415,48,506,56],[416,0,507,24,"addTokenToMatch"],[416,14,507,24,"addTokenToMatch"],[416,29,507,39],[417,0,508,21],[419,0,510,20,"state"],[419,12,510,20,"state"],[419,17,510,25],[419,73,510,20],[420,0,511,17],[420,11,505,16],[420,17,511,23],[421,0,512,20,"state"],[421,12,512,20,"state"],[421,17,512,25],[421,76,512,20],[422,0,513,17],[424,0,515,16],[426,0,517,12],[427,0,518,16],[427,16,518,22],[427,20,518,26,"Error"],[427,25,518,22],[427,26,518,32],[427,50,518,56,"state"],[427,55,518,61],[427,56,518,62,"type"],[427,60,518,22],[427,61,518,16],[428,0,221,8],[429,0,520,5],[431,0,522,4,"totalIterationCount"],[431,4,522,4,"totalIterationCount"],[431,23,522,23],[431,27,522,27,"iterationCount"],[431,41,522,4],[433,0,524,4],[433,12,524,12,"exitReason"],[433,22,524,4],[434,0,525,8],[434,11,525,13],[434,15,525,8],[435,0,526,12,"console"],[435,8,526,12,"console"],[435,15,526,19],[435,16,526,20,"warn"],[435,20,526,12],[435,21,526,25],[435,54,526,58,"ITERATION_LIMIT"],[435,69,526,25],[435,72,526,76],[435,85,526,12],[436,0,527,12,"exitReason"],[436,8,527,12,"exitReason"],[436,18,527,22],[436,21,527,25,"EXIT_REASON_ITERATION_LIMIT"],[436,48,527,12],[437,0,528,12,"matchStack"],[437,8,528,12,"matchStack"],[437,18,528,22],[437,21,528,25],[437,25,528,12],[438,0,529,12],[440,0,531,8],[440,11,531,13,"EXIT_REASON_MATCH"],[440,28,531,8],[441,0,532,12],[441,15,532,19,"syntaxStack"],[441,26,532,30],[441,31,532,35],[441,35,532,12],[441,37,532,41],[442,0,533,16,"closeSyntax"],[442,10,533,16,"closeSyntax"],[442,21,533,27],[443,0,534,13],[445,0,535,12],[447,0,537,8],[448,0,538,12,"matchStack"],[448,8,538,12,"matchStack"],[448,18,538,22],[448,21,538,25],[448,25,538,12],[449,0,524,4],[451,0,541,4],[451,11,541,11],[452,0,542,8,"tokens"],[452,6,542,8,"tokens"],[452,12,542,14],[452,14,542,16,"tokens"],[452,20,541,11],[453,0,543,8,"reason"],[453,6,543,8,"reason"],[453,12,543,14],[453,14,543,16,"exitReason"],[453,24,541,11],[454,0,544,8,"iterations"],[454,6,544,8,"iterations"],[454,16,544,18],[454,18,544,20,"iterationCount"],[454,32,541,11],[455,0,545,8,"match"],[455,6,545,8,"match"],[455,11,545,13],[455,13,545,15,"matchStack"],[455,23,541,11],[456,0,546,8,"longestMatch"],[456,6,546,8,"longestMatch"],[456,18,546,20],[456,20,546,22,"longestMatch"],[457,0,541,11],[457,5,541,4],[458,0,548,1],[460,0,550,0],[460,11,550,9,"matchAsList"],[460,22,550,0],[460,23,550,21,"tokens"],[460,29,550,0],[460,31,550,29,"matchGraph"],[460,41,550,0],[460,43,550,41,"syntaxes"],[460,51,550,0],[460,53,550,51],[461,0,551,4],[461,8,551,8,"matchResult"],[461,19,551,19],[461,22,551,22,"internalMatch"],[461,35,551,35],[461,36,551,36,"tokens"],[461,42,551,35],[461,44,551,44,"matchGraph"],[461,54,551,35],[461,56,551,56,"syntaxes"],[461,64,551,64],[461,68,551,68],[461,70,551,35],[461,71,551,4],[463,0,553,4],[463,8,553,8,"matchResult"],[463,19,553,19],[463,20,553,20,"match"],[463,25,553,8],[463,30,553,30],[463,34,553,4],[463,36,553,36],[464,0,554,8],[464,10,554,12,"item"],[464,14,554,16],[464,17,554,19,"reverseList"],[464,28,554,30],[464,29,554,31,"matchResult"],[464,40,554,42],[464,41,554,43,"match"],[464,46,554,30],[464,47,554,19],[464,48,554,50,"prev"],[464,52,554,8],[465,0,556,8,"matchResult"],[465,6,556,8,"matchResult"],[465,17,556,19],[465,18,556,20,"match"],[465,23,556,8],[465,26,556,28],[465,28,556,8],[467,0,558,8],[467,13,558,15,"item"],[467,17,558,19],[467,22,558,24],[467,26,558,8],[467,28,558,30],[468,0,559,12],[468,16,559,20,"item"],[468,20,559,24],[468,21,559,25,"type"],[468,25,559,12],[469,0,560,16],[469,15,560,21,"STUB"],[469,19,560,16],[470,0,561,20],[472,0,563,16],[472,15,563,21,"OPEN_SYNTAX"],[472,26,563,16],[473,0,564,16],[473,15,564,21,"CLOSE_SYNTAX"],[473,27,564,16],[474,0,565,20,"matchResult"],[474,12,565,20,"matchResult"],[474,23,565,31],[474,24,565,32,"match"],[474,29,565,20],[474,30,565,38,"push"],[474,34,565,20],[474,35,565,43],[475,0,566,24,"type"],[475,14,566,24,"type"],[475,18,566,28],[475,20,566,30,"item"],[475,24,566,34],[475,25,566,35,"type"],[475,29,565,43],[476,0,567,24,"syntax"],[476,14,567,24,"syntax"],[476,20,567,30],[476,22,567,32,"item"],[476,26,567,36],[476,27,567,37,"syntax"],[477,0,565,43],[477,13,565,20],[478,0,569,20],[480,0,571,16],[481,0,572,20,"matchResult"],[481,12,572,20,"matchResult"],[481,23,572,31],[481,24,572,32,"match"],[481,29,572,20],[481,30,572,38,"push"],[481,34,572,20],[481,35,572,43],[482,0,573,24,"token"],[482,14,573,24,"token"],[482,19,573,29],[482,21,573,31,"item"],[482,25,573,35],[482,26,573,36,"token"],[482,31,573,31],[482,32,573,42,"value"],[482,37,572,43],[483,0,574,24,"node"],[483,14,574,24,"node"],[483,18,574,28],[483,20,574,30,"item"],[483,24,574,34],[483,25,574,35,"token"],[483,30,574,30],[483,31,574,41,"node"],[484,0,572,43],[484,13,572,20],[485,0,576,20],[486,0,559,12],[488,0,579,12,"item"],[488,8,579,12,"item"],[488,12,579,16],[488,15,579,19,"item"],[488,19,579,23],[488,20,579,24,"prev"],[488,24,579,12],[489,0,580,9],[490,0,581,5],[492,0,583,4],[492,11,583,11,"matchResult"],[492,22,583,4],[493,0,584,1],[495,0,586,0],[495,11,586,9,"matchAsTree"],[495,22,586,0],[495,23,586,21,"tokens"],[495,29,586,0],[495,31,586,29,"matchGraph"],[495,41,586,0],[495,43,586,41,"syntaxes"],[495,51,586,0],[495,53,586,51],[496,0,587,4],[496,8,587,8,"matchResult"],[496,19,587,19],[496,22,587,22,"internalMatch"],[496,35,587,35],[496,36,587,36,"tokens"],[496,42,587,35],[496,44,587,44,"matchGraph"],[496,54,587,35],[496,56,587,56,"syntaxes"],[496,64,587,64],[496,68,587,68],[496,70,587,35],[496,71,587,4],[498,0,589,4],[498,8,589,8,"matchResult"],[498,19,589,19],[498,20,589,20,"match"],[498,25,589,8],[498,30,589,30],[498,34,589,4],[498,36,589,36],[499,0,590,8],[499,13,590,15,"matchResult"],[499,24,590,8],[500,0,591,5],[502,0,593,4],[502,8,593,8,"item"],[502,12,593,12],[502,15,593,15,"matchResult"],[502,26,593,26],[502,27,593,27,"match"],[502,32,593,4],[503,0,594,4],[503,8,594,8,"host"],[503,12,594,12],[503,15,594,15,"matchResult"],[503,26,594,26],[503,27,594,27,"match"],[503,32,594,15],[503,35,594,35],[504,0,595,8,"syntax"],[504,6,595,8,"syntax"],[504,12,595,14],[504,14,595,16,"matchGraph"],[504,24,595,26],[504,25,595,27,"syntax"],[504,31,595,16],[504,35,595,37],[504,39,594,35],[505,0,596,8,"match"],[505,6,596,8,"match"],[505,11,596,13],[505,13,596,15],[506,0,594,35],[506,5,594,4],[507,0,598,4],[507,8,598,8,"hostStack"],[507,17,598,17],[507,20,598,20],[507,21,598,21,"host"],[507,25,598,20],[507,26,598,4],[508,0,601,4,"item"],[508,4,601,4,"item"],[508,8,601,8],[508,11,601,11,"reverseList"],[508,22,601,22],[508,23,601,23,"item"],[508,27,601,22],[508,28,601,11],[508,29,601,29,"prev"],[508,33,601,4],[510,0,604,4],[510,11,604,11,"item"],[510,15,604,15],[510,20,604,20],[510,24,604,4],[510,26,604,26],[511,0,605,8],[511,14,605,16,"item"],[511,18,605,20],[511,19,605,21,"type"],[511,23,605,8],[512,0,606,12],[512,13,606,17,"OPEN_SYNTAX"],[512,24,606,12],[513,0,607,16,"host"],[513,10,607,16,"host"],[513,14,607,20],[513,15,607,21,"match"],[513,20,607,16],[513,21,607,27,"push"],[513,25,607,16],[513,26,607,32,"host"],[513,30,607,36],[513,33,607,39],[514,0,608,20,"syntax"],[514,12,608,20,"syntax"],[514,18,608,26],[514,20,608,28,"item"],[514,24,608,32],[514,25,608,33,"syntax"],[514,31,607,39],[515,0,609,20,"match"],[515,12,609,20,"match"],[515,17,609,25],[515,19,609,27],[516,0,607,39],[516,11,607,16],[517,0,611,16,"hostStack"],[517,10,611,16,"hostStack"],[517,19,611,25],[517,20,611,26,"push"],[517,24,611,16],[517,25,611,31,"host"],[517,29,611,16],[518,0,612,16],[520,0,614,12],[520,13,614,17,"CLOSE_SYNTAX"],[520,25,614,12],[521,0,615,16,"hostStack"],[521,10,615,16,"hostStack"],[521,19,615,25],[521,20,615,26,"pop"],[521,23,615,16],[522,0,616,16,"host"],[522,10,616,16,"host"],[522,14,616,20],[522,17,616,23,"hostStack"],[522,26,616,32],[522,27,616,33,"hostStack"],[522,36,616,42],[522,37,616,43,"length"],[522,43,616,33],[522,46,616,52],[522,47,616,32],[522,48,616,16],[523,0,617,16],[525,0,619,12],[526,0,620,16,"host"],[526,10,620,16,"host"],[526,14,620,20],[526,15,620,21,"match"],[526,20,620,16],[526,21,620,27,"push"],[526,25,620,16],[526,26,620,32],[527,0,621,20,"syntax"],[527,12,621,20,"syntax"],[527,18,621,26],[527,20,621,28,"item"],[527,24,621,32],[527,25,621,33,"syntax"],[527,31,621,28],[527,35,621,43],[527,39,620,32],[528,0,622,20,"token"],[528,12,622,20,"token"],[528,17,622,25],[528,19,622,27,"item"],[528,23,622,31],[528,24,622,32,"token"],[528,29,622,27],[528,30,622,38,"value"],[528,35,620,32],[529,0,623,20,"node"],[529,12,623,20,"node"],[529,16,623,24],[529,18,623,26,"item"],[529,22,623,30],[529,23,623,31,"token"],[529,28,623,26],[529,29,623,37,"node"],[530,0,620,32],[530,11,620,16],[531,0,605,8],[533,0,627,8,"item"],[533,6,627,8,"item"],[533,10,627,12],[533,13,627,15,"item"],[533,17,627,19],[533,18,627,20,"prev"],[533,22,627,8],[534,0,628,5],[536,0,630,4],[536,11,630,11,"matchResult"],[536,22,630,4],[537,0,631,1],[539,0,633,0,"module"],[539,2,633,0,"module"],[539,8,633,6],[539,9,633,7,"exports"],[539,16,633,0],[539,19,633,17],[540,0,634,4,"matchAsList"],[540,4,634,4,"matchAsList"],[540,15,634,15],[540,17,634,17,"matchAsList"],[540,28,633,17],[541,0,635,4,"matchAsTree"],[541,4,635,4,"matchAsTree"],[541,15,635,15],[541,17,635,17,"matchAsTree"],[541,28,633,17],[542,0,636,4,"getTotalIterationCount"],[542,4,636,4,"getTotalIterationCount"],[542,26,636,26],[542,28,636,28],[542,62,636,39],[543,0,637,8],[543,13,637,15,"totalIterationCount"],[543,32,637,8],[544,0,638,5],[545,0,633,17],[545,3,633,0]],"functionMap":{"names":["<global>","reverseList","areStringsEqualCaseInsensitive","isContextEdgeDelim","isCommaContextStart","isCommaContextEnd","internalMatch","moveToNextToken","getNextToken","stateSnapshotFromSyntax","pushThenStack","pushElseStack","addTokenToMatch","openSyntax","closeSyntax","matchAsList","matchAsTree","module.exports.getTotalIterationCount"],"mappings":"AAA;ACmB;CDa;AEE;CFoB;AGE;CHQ;AIE;CJa;AKE;CLW;AME;ICC;KDK;IEE;KFI;IGE;KHS;IIE;KJO;IKE;KLE;IME;KNc;IOE;KPa;IQE;KRa;CNmX;AeE;CfkC;AgBE;ChB6C;4BiBK;KjBE"}},"type":"js/module"}]}