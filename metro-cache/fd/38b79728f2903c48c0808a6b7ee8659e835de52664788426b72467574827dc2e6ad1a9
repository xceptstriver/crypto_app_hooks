{"dependencies":[{"name":"domelementtype","data":{"asyncType":null,"locs":[{"start":{"line":54,"column":6},"end":{"line":54,"column":21}},{"start":{"line":69,"column":3},"end":{"line":69,"column":18}},{"start":{"line":88,"column":6},"end":{"line":88,"column":17}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  module.exports = {\n    filter: filter,\n    find: find,\n    findOneChild: findOneChild,\n    findOne: findOne,\n    existsOne: existsOne,\n    findAll: findAll\n  };\n\n  function filter(test, element, recurse, limit) {\n    if (!Array.isArray(element)) element = [element];\n\n    if (typeof limit !== \"number\" || !isFinite(limit)) {\n      limit = Infinity;\n    }\n\n    return find(test, element, recurse !== false, limit);\n  }\n\n  function find(test, elems, recurse, limit) {\n    var result = [],\n        childs;\n\n    for (var i = 0, j = elems.length; i < j; i++) {\n      if (test(elems[i])) {\n        result.push(elems[i]);\n        if (--limit <= 0) break;\n      }\n\n      childs = elems[i].children;\n\n      if (recurse && childs && childs.length > 0) {\n        childs = find(test, childs, recurse, limit);\n        result = result.concat(childs);\n        limit -= childs.length;\n        if (limit <= 0) break;\n      }\n    }\n\n    return result;\n  }\n\n  function findOneChild(test, elems) {\n    for (var i = 0, l = elems.length; i < l; i++) {\n      if (test(elems[i])) return elems[i];\n    }\n\n    return null;\n  }\n\n  function findOne(test, elems) {\n    var elem = null;\n\n    for (var i = 0, l = elems.length; i < l && !elem; i++) {\n      if (!_$$_REQUIRE(_dependencyMap[0], \"domelementtype\").isTag(elems[i])) {\n        continue;\n      } else if (test(elems[i])) {\n        elem = elems[i];\n      } else if (elems[i].children.length > 0) {\n        elem = findOne(test, elems[i].children);\n      }\n    }\n\n    return elem;\n  }\n\n  function existsOne(test, elems) {\n    for (var i = 0, l = elems.length; i < l; i++) {\n      if (_$$_REQUIRE(_dependencyMap[0], \"domelementtype\").isTag(elems[i]) && (test(elems[i]) || elems[i].children.length > 0 && existsOne(test, elems[i].children))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function findAll(test, rootElems) {\n    var result = [];\n    var stack = rootElems.slice();\n\n    while (stack.length) {\n      var elem = stack.shift();\n      if (!_$$_REQUIRE(_dependencyMap[0], \"domelementtype\").isTag(elem)) continue;\n\n      if (elem.children && elem.children.length > 0) {\n        stack.unshift.apply(stack, elem.children);\n      }\n\n      if (test(elem)) result.push(elem);\n    }\n\n    return result;\n  }\n});","lineCount":95,"map":[[2,0,3,0,"module"],[2,2,3,0,"module"],[2,8,3,6],[2,9,3,7,"exports"],[2,16,3,0],[2,19,3,17],[3,0,4,1,"filter"],[3,4,4,1,"filter"],[3,10,4,7],[3,12,4,9,"filter"],[3,18,3,17],[4,0,5,1,"find"],[4,4,5,1,"find"],[4,8,5,5],[4,10,5,7,"find"],[4,14,3,17],[5,0,6,1,"findOneChild"],[5,4,6,1,"findOneChild"],[5,16,6,13],[5,18,6,15,"findOneChild"],[5,30,3,17],[6,0,7,1,"findOne"],[6,4,7,1,"findOne"],[6,11,7,8],[6,13,7,10,"findOne"],[6,20,3,17],[7,0,8,1,"existsOne"],[7,4,8,1,"existsOne"],[7,13,8,10],[7,15,8,12,"existsOne"],[7,24,3,17],[8,0,9,1,"findAll"],[8,4,9,1,"findAll"],[8,11,9,8],[8,13,9,10,"findAll"],[9,0,3,17],[9,3,3,0],[11,0,12,0],[11,11,12,9,"filter"],[11,17,12,0],[11,18,12,16,"test"],[11,22,12,0],[11,24,12,22,"element"],[11,31,12,0],[11,33,12,31,"recurse"],[11,40,12,0],[11,42,12,40,"limit"],[11,47,12,0],[11,49,12,46],[12,0,13,1],[12,8,13,4],[12,9,13,5,"Array"],[12,14,13,10],[12,15,13,11,"isArray"],[12,22,13,5],[12,23,13,19,"element"],[12,30,13,5],[12,31,13,1],[12,33,13,29,"element"],[12,40,13,36],[12,43,13,39],[12,44,13,40,"element"],[12,51,13,39],[12,52,13,29],[14,0,15,1],[14,8,15,4],[14,15,15,11,"limit"],[14,20,15,4],[14,25,15,21],[14,33,15,4],[14,37,15,33],[14,38,15,34,"isFinite"],[14,46,15,42],[14,47,15,43,"limit"],[14,52,15,42],[14,53,15,1],[14,55,15,50],[15,0,16,2,"limit"],[15,6,16,2,"limit"],[15,11,16,7],[15,14,16,10,"Infinity"],[15,22,16,2],[16,0,17,2],[18,0,18,1],[18,11,18,8,"find"],[18,15,18,12],[18,16,18,13,"test"],[18,20,18,12],[18,22,18,19,"element"],[18,29,18,12],[18,31,18,28,"recurse"],[18,38,18,35],[18,43,18,40],[18,48,18,12],[18,50,18,47,"limit"],[18,55,18,12],[18,56,18,1],[19,0,19,1],[21,0,21,0],[21,11,21,9,"find"],[21,15,21,0],[21,16,21,14,"test"],[21,20,21,0],[21,22,21,20,"elems"],[21,27,21,0],[21,29,21,27,"recurse"],[21,36,21,0],[21,38,21,36,"limit"],[21,43,21,0],[21,45,21,42],[22,0,22,1],[22,8,22,5,"result"],[22,14,22,11],[22,17,22,14],[22,19,22,1],[23,0,22,1],[23,8,22,18,"childs"],[23,14,22,1],[25,0,24,1],[25,9,24,5],[25,13,24,9,"i"],[25,14,24,10],[25,17,24,13],[25,18,24,5],[25,20,24,16,"j"],[25,21,24,17],[25,24,24,20,"elems"],[25,29,24,25],[25,30,24,26,"length"],[25,36,24,1],[25,38,24,34,"i"],[25,39,24,35],[25,42,24,38,"j"],[25,43,24,1],[25,45,24,41,"i"],[25,46,24,42],[25,48,24,1],[25,50,24,45],[26,0,25,2],[26,10,25,5,"test"],[26,14,25,9],[26,15,25,10,"elems"],[26,20,25,15],[26,21,25,16,"i"],[26,22,25,15],[26,23,25,9],[26,24,25,2],[26,26,25,20],[27,0,26,3,"result"],[27,8,26,3,"result"],[27,14,26,9],[27,15,26,10,"push"],[27,19,26,3],[27,20,26,15,"elems"],[27,25,26,20],[27,26,26,21,"i"],[27,27,26,20],[27,28,26,3],[28,0,27,3],[28,12,27,6],[28,14,27,8,"limit"],[28,19,27,6],[28,23,27,17],[28,24,27,3],[28,26,27,20],[29,0,28,3],[31,0,30,2,"childs"],[31,6,30,2,"childs"],[31,12,30,8],[31,15,30,11,"elems"],[31,20,30,16],[31,21,30,17,"i"],[31,22,30,16],[31,23,30,11],[31,24,30,20,"children"],[31,32,30,2],[33,0,31,2],[33,10,31,5,"recurse"],[33,17,31,12],[33,21,31,16,"childs"],[33,27,31,5],[33,31,31,26,"childs"],[33,37,31,32],[33,38,31,33,"length"],[33,44,31,26],[33,47,31,42],[33,48,31,2],[33,50,31,44],[34,0,32,3,"childs"],[34,8,32,3,"childs"],[34,14,32,9],[34,17,32,12,"find"],[34,21,32,16],[34,22,32,17,"test"],[34,26,32,16],[34,28,32,23,"childs"],[34,34,32,16],[34,36,32,31,"recurse"],[34,43,32,16],[34,45,32,40,"limit"],[34,50,32,16],[34,51,32,3],[35,0,33,3,"result"],[35,8,33,3,"result"],[35,14,33,9],[35,17,33,12,"result"],[35,23,33,18],[35,24,33,19,"concat"],[35,30,33,12],[35,31,33,26,"childs"],[35,37,33,12],[35,38,33,3],[36,0,34,3,"limit"],[36,8,34,3,"limit"],[36,13,34,8],[36,17,34,12,"childs"],[36,23,34,18],[36,24,34,19,"length"],[36,30,34,3],[37,0,35,3],[37,12,35,6,"limit"],[37,17,35,11],[37,21,35,15],[37,22,35,3],[37,24,35,18],[38,0,36,3],[39,0,37,2],[41,0,39,1],[41,11,39,8,"result"],[41,17,39,1],[42,0,40,1],[44,0,42,0],[44,11,42,9,"findOneChild"],[44,23,42,0],[44,24,42,22,"test"],[44,28,42,0],[44,30,42,28,"elems"],[44,35,42,0],[44,37,42,34],[45,0,43,1],[45,9,43,5],[45,13,43,9,"i"],[45,14,43,10],[45,17,43,13],[45,18,43,5],[45,20,43,16,"l"],[45,21,43,17],[45,24,43,20,"elems"],[45,29,43,25],[45,30,43,26,"length"],[45,36,43,1],[45,38,43,34,"i"],[45,39,43,35],[45,42,43,38,"l"],[45,43,43,1],[45,45,43,41,"i"],[45,46,43,42],[45,48,43,1],[45,50,43,45],[46,0,44,2],[46,10,44,5,"test"],[46,14,44,9],[46,15,44,10,"elems"],[46,20,44,15],[46,21,44,16,"i"],[46,22,44,15],[46,23,44,9],[46,24,44,2],[46,26,44,21],[46,33,44,28,"elems"],[46,38,44,33],[46,39,44,34,"i"],[46,40,44,33],[46,41,44,21],[47,0,45,2],[49,0,47,1],[49,11,47,8],[49,15,47,1],[50,0,48,1],[52,0,50,0],[52,11,50,9,"findOne"],[52,18,50,0],[52,19,50,17,"test"],[52,23,50,0],[52,25,50,23,"elems"],[52,30,50,0],[52,32,50,29],[53,0,51,1],[53,8,51,5,"elem"],[53,12,51,9],[53,15,51,12],[53,19,51,1],[55,0,53,1],[55,9,53,5],[55,13,53,9,"i"],[55,14,53,10],[55,17,53,13],[55,18,53,5],[55,20,53,16,"l"],[55,21,53,17],[55,24,53,20,"elems"],[55,29,53,25],[55,30,53,26,"length"],[55,36,53,1],[55,38,53,34,"i"],[55,39,53,35],[55,42,53,38,"l"],[55,43,53,34],[55,47,53,43],[55,48,53,44,"elem"],[55,52,53,1],[55,54,53,50,"i"],[55,55,53,51],[55,57,53,1],[55,59,53,54],[56,0,54,2],[56,10,54,5],[56,11,54,6],[56,66,54,12,"elems"],[56,71,54,17],[56,72,54,18,"i"],[56,73,54,17],[56,74,54,6],[56,75,54,2],[56,77,54,22],[57,0,55,3],[58,0,56,3],[58,7,54,2],[58,13,56,9],[58,17,56,12,"test"],[58,21,56,16],[58,22,56,17,"elems"],[58,27,56,22],[58,28,56,23,"i"],[58,29,56,22],[58,30,56,16],[58,31,56,9],[58,33,56,27],[59,0,57,3,"elem"],[59,8,57,3,"elem"],[59,12,57,7],[59,15,57,10,"elems"],[59,20,57,15],[59,21,57,16,"i"],[59,22,57,15],[59,23,57,3],[60,0,58,3],[60,7,56,9],[60,13,58,9],[60,17,58,12,"elems"],[60,22,58,17],[60,23,58,18,"i"],[60,24,58,17],[60,25,58,12],[60,26,58,21,"children"],[60,34,58,12],[60,35,58,30,"length"],[60,41,58,12],[60,44,58,39],[60,45,58,9],[60,47,58,41],[61,0,59,3,"elem"],[61,8,59,3,"elem"],[61,12,59,7],[61,15,59,10,"findOne"],[61,22,59,17],[61,23,59,18,"test"],[61,27,59,17],[61,29,59,24,"elems"],[61,34,59,29],[61,35,59,30,"i"],[61,36,59,29],[61,37,59,24],[61,38,59,33,"children"],[61,46,59,17],[61,47,59,3],[62,0,60,3],[63,0,61,2],[65,0,63,1],[65,11,63,8,"elem"],[65,15,63,1],[66,0,64,1],[68,0,66,0],[68,11,66,9,"existsOne"],[68,20,66,0],[68,21,66,19,"test"],[68,25,66,0],[68,27,66,25,"elems"],[68,32,66,0],[68,34,66,31],[69,0,67,1],[69,9,67,5],[69,13,67,9,"i"],[69,14,67,10],[69,17,67,13],[69,18,67,5],[69,20,67,16,"l"],[69,21,67,17],[69,24,67,20,"elems"],[69,29,67,25],[69,30,67,26,"length"],[69,36,67,1],[69,38,67,34,"i"],[69,39,67,35],[69,42,67,38,"l"],[69,43,67,1],[69,45,67,41,"i"],[69,46,67,42],[69,48,67,1],[69,50,67,45],[70,0,68,2],[70,10,69,3],[70,65,69,9,"elems"],[70,70,69,14],[70,71,69,15,"i"],[70,72,69,14],[70,73,69,3],[70,79,70,4,"test"],[70,83,70,8],[70,84,70,9,"elems"],[70,89,70,14],[70,90,70,15,"i"],[70,91,70,14],[70,92,70,8],[70,93,70,4],[70,97,71,5,"elems"],[70,102,71,10],[70,103,71,11,"i"],[70,104,71,10],[70,105,71,5],[70,106,71,14,"children"],[70,114,71,5],[70,115,71,23,"length"],[70,121,71,5],[70,124,71,32],[70,125,71,5],[70,129,72,5,"existsOne"],[70,138,72,14],[70,139,72,15,"test"],[70,143,72,14],[70,145,72,21,"elems"],[70,150,72,26],[70,151,72,27,"i"],[70,152,72,26],[70,153,72,21],[70,154,72,30,"children"],[70,162,72,14],[70,163,69,3],[70,164,68,2],[70,166,75,3],[71,0,76,3],[71,15,76,10],[71,19,76,3],[72,0,77,3],[73,0,78,2],[75,0,80,1],[75,11,80,8],[75,16,80,1],[76,0,81,1],[78,0,83,0],[78,11,83,9,"findAll"],[78,18,83,0],[78,19,83,17,"test"],[78,23,83,0],[78,25,83,23,"rootElems"],[78,34,83,0],[78,36,83,33],[79,0,84,1],[79,8,84,5,"result"],[79,14,84,11],[79,17,84,14],[79,19,84,1],[80,0,85,1],[80,8,85,5,"stack"],[80,13,85,10],[80,16,85,13,"rootElems"],[80,25,85,22],[80,26,85,23,"slice"],[80,31,85,13],[80,33,85,1],[82,0,86,1],[82,11,86,7,"stack"],[82,16,86,12],[82,17,86,13,"length"],[82,23,86,1],[82,25,86,20],[83,0,87,2],[83,10,87,6,"elem"],[83,14,87,10],[83,17,87,13,"stack"],[83,22,87,18],[83,23,87,19,"shift"],[83,28,87,13],[83,30,87,2],[84,0,88,2],[84,10,88,5],[84,11,88,6],[84,66,88,12,"elem"],[84,70,88,6],[84,71,88,2],[84,73,88,19],[86,0,89,2],[86,10,89,6,"elem"],[86,14,89,10],[86,15,89,11,"children"],[86,23,89,6],[86,27,89,23,"elem"],[86,31,89,27],[86,32,89,28,"children"],[86,40,89,23],[86,41,89,37,"length"],[86,47,89,23],[86,50,89,46],[86,51,89,2],[86,53,89,49],[87,0,90,3,"stack"],[87,8,90,3,"stack"],[87,13,90,8],[87,14,90,9,"unshift"],[87,21,90,3],[87,22,90,17,"apply"],[87,27,90,3],[87,28,90,23,"stack"],[87,33,90,3],[87,35,90,30,"elem"],[87,39,90,34],[87,40,90,35,"children"],[87,48,90,3],[88,0,91,3],[90,0,92,2],[90,10,92,5,"test"],[90,14,92,9],[90,15,92,10,"elem"],[90,19,92,9],[90,20,92,2],[90,22,92,17,"result"],[90,28,92,23],[90,29,92,24,"push"],[90,33,92,17],[90,34,92,29,"elem"],[90,38,92,17],[91,0,93,2],[93,0,94,1],[93,11,94,8,"result"],[93,17,94,1],[94,0,95,1]],"functionMap":{"names":["<global>","filter","find","findOneChild","findOne","existsOne","findAll"],"mappings":"AAA;ACW;CDO;AEE;CFmB;AGE;CHM;AIE;CJc;AKE;CLe;AME;CNY"}},"type":"js/module"}]}