{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var noop = function noop() {};\n\n  function ensureFunction(value) {\n    return typeof value === 'function' ? value : noop;\n  }\n\n  function invokeForType(fn, type) {\n    return function (node, item, list) {\n      if (node.type === type) {\n        fn.call(this, node, item, list);\n      }\n    };\n  }\n\n  function getWalkersFromStructure(name, nodeType) {\n    var structure = nodeType.structure;\n    var walkers = [];\n\n    for (var key in structure) {\n      if (hasOwnProperty.call(structure, key) === false) {\n        continue;\n      }\n\n      var fieldTypes = structure[key];\n      var walker = {\n        name: key,\n        type: false,\n        nullable: false\n      };\n\n      if (!Array.isArray(structure[key])) {\n        fieldTypes = [structure[key]];\n      }\n\n      for (var i = 0; i < fieldTypes.length; i++) {\n        var fieldType = fieldTypes[i];\n\n        if (fieldType === null) {\n          walker.nullable = true;\n        } else if (typeof fieldType === 'string') {\n          walker.type = 'node';\n        } else if (Array.isArray(fieldType)) {\n          walker.type = 'list';\n        }\n      }\n\n      if (walker.type) {\n        walkers.push(walker);\n      }\n    }\n\n    if (walkers.length) {\n      return {\n        context: nodeType.walkContext,\n        fields: walkers\n      };\n    }\n\n    return null;\n  }\n\n  function getTypesFromConfig(config) {\n    var types = {};\n\n    for (var name in config.node) {\n      if (hasOwnProperty.call(config.node, name)) {\n        var nodeType = config.node[name];\n\n        if (!nodeType.structure) {\n          throw new Error('Missed `structure` field in `' + name + '` node type definition');\n        }\n\n        types[name] = getWalkersFromStructure(name, nodeType);\n      }\n    }\n\n    return types;\n  }\n\n  function createTypeIterator(config, reverse) {\n    var fields = config.fields.slice();\n    var contextName = config.context;\n    var useContext = typeof contextName === 'string';\n\n    if (reverse) {\n      fields.reverse();\n    }\n\n    return function (node, context, walk, walkReducer) {\n      var prevContextValue;\n\n      if (useContext) {\n        prevContextValue = context[contextName];\n        context[contextName] = node;\n      }\n\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        var ref = node[field.name];\n\n        if (!field.nullable || ref) {\n          if (field.type === 'list') {\n            var breakWalk = reverse ? ref.reduceRight(walkReducer, false) : ref.reduce(walkReducer, false);\n\n            if (breakWalk) {\n              return true;\n            }\n          } else if (walk(ref)) {\n            return true;\n          }\n        }\n      }\n\n      if (useContext) {\n        context[contextName] = prevContextValue;\n      }\n    };\n  }\n\n  function createFastTraveralMap(iterators) {\n    return {\n      Atrule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Rule: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block\n      },\n      Declaration: {\n        StyleSheet: iterators.StyleSheet,\n        Atrule: iterators.Atrule,\n        Rule: iterators.Rule,\n        Block: iterators.Block,\n        DeclarationList: iterators.DeclarationList\n      }\n    };\n  }\n\n  module.exports = function createWalker(config) {\n    var types = getTypesFromConfig(config);\n    var iteratorsNatural = {};\n    var iteratorsReverse = {};\n    var breakWalk = Symbol('break-walk');\n    var skipNode = Symbol('skip-node');\n\n    for (var name in types) {\n      if (hasOwnProperty.call(types, name) && types[name] !== null) {\n        iteratorsNatural[name] = createTypeIterator(types[name], false);\n        iteratorsReverse[name] = createTypeIterator(types[name], true);\n      }\n    }\n\n    var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);\n    var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);\n\n    var walk = function walk(root, options) {\n      function walkNode(node, item, list) {\n        var enterRet = enter.call(context, node, item, list);\n\n        if (enterRet === breakWalk) {\n          debugger;\n          return true;\n        }\n\n        if (enterRet === skipNode) {\n          return false;\n        }\n\n        if (iterators.hasOwnProperty(node.type)) {\n          if (iterators[node.type](node, context, walkNode, walkReducer)) {\n            return true;\n          }\n        }\n\n        if (leave.call(context, node, item, list) === breakWalk) {\n          return true;\n        }\n\n        return false;\n      }\n\n      var walkReducer = function walkReducer(ret, data, item, list) {\n        return ret || walkNode(data, item, list);\n      };\n\n      var enter = noop;\n      var leave = noop;\n      var iterators = iteratorsNatural;\n      var context = {\n        break: breakWalk,\n        skip: skipNode,\n        root: root,\n        stylesheet: null,\n        atrule: null,\n        atrulePrelude: null,\n        rule: null,\n        selector: null,\n        block: null,\n        declaration: null,\n        function: null\n      };\n\n      if (typeof options === 'function') {\n        enter = options;\n      } else if (options) {\n        enter = ensureFunction(options.enter);\n        leave = ensureFunction(options.leave);\n\n        if (options.reverse) {\n          iterators = iteratorsReverse;\n        }\n\n        if (options.visit) {\n          if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {\n            iterators = options.reverse ? fastTraversalIteratorsReverse[options.visit] : fastTraversalIteratorsNatural[options.visit];\n          } else if (!types.hasOwnProperty(options.visit)) {\n            throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).join(', ') + ')');\n          }\n\n          enter = invokeForType(enter, options.visit);\n          leave = invokeForType(leave, options.visit);\n        }\n      }\n\n      if (enter === noop && leave === noop) {\n        throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\\'t a function');\n      }\n\n      walkNode(root);\n    };\n\n    walk.break = breakWalk;\n    walk.skip = skipNode;\n\n    walk.find = function (ast, fn) {\n      var found = null;\n      walk(ast, function (node, item, list) {\n        if (fn.call(this, node, item, list)) {\n          found = node;\n          return breakWalk;\n        }\n      });\n      return found;\n    };\n\n    walk.findLast = function (ast, fn) {\n      var found = null;\n      walk(ast, {\n        reverse: true,\n        enter: function enter(node, item, list) {\n          if (fn.call(this, node, item, list)) {\n            found = node;\n            return breakWalk;\n          }\n        }\n      });\n      return found;\n    };\n\n    walk.findAll = function (ast, fn) {\n      var found = [];\n      walk(ast, function (node, item, list) {\n        if (fn.call(this, node, item, list)) {\n          found.push(node);\n        }\n      });\n      return found;\n    };\n\n    return walk;\n  };\n});","lineCount":280,"map":[[2,0,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,21],[2,40,1,38,"hasOwnProperty"],[2,54,1,0],[4,0,2,0],[4,6,2,4,"noop"],[4,10,2,8],[4,13,2,11],[4,22,2,4,"noop"],[4,26,2,11],[4,29,2,22],[4,30,2,24],[4,31,2,0],[6,0,4,0],[6,11,4,9,"ensureFunction"],[6,25,4,0],[6,26,4,24,"value"],[6,31,4,0],[6,33,4,31],[7,0,5,4],[7,11,5,11],[7,18,5,18,"value"],[7,23,5,11],[7,28,5,28],[7,38,5,11],[7,41,5,41,"value"],[7,46,5,11],[7,49,5,49,"noop"],[7,53,5,4],[8,0,6,1],[10,0,8,0],[10,11,8,9,"invokeForType"],[10,24,8,0],[10,25,8,23,"fn"],[10,27,8,0],[10,29,8,27,"type"],[10,33,8,0],[10,35,8,33],[11,0,9,4],[11,11,9,11],[11,21,9,20,"node"],[11,25,9,11],[11,27,9,26,"item"],[11,31,9,11],[11,33,9,32,"list"],[11,37,9,11],[11,39,9,38],[12,0,10,8],[12,10,10,12,"node"],[12,14,10,16],[12,15,10,17,"type"],[12,19,10,12],[12,24,10,26,"type"],[12,28,10,8],[12,30,10,32],[13,0,11,12,"fn"],[13,8,11,12,"fn"],[13,10,11,14],[13,11,11,15,"call"],[13,15,11,12],[13,16,11,20],[13,20,11,12],[13,22,11,26,"node"],[13,26,11,12],[13,28,11,32,"item"],[13,32,11,12],[13,34,11,38,"list"],[13,38,11,12],[14,0,12,9],[15,0,13,5],[15,5,9,4],[16,0,14,1],[18,0,16,0],[18,11,16,9,"getWalkersFromStructure"],[18,34,16,0],[18,35,16,33,"name"],[18,39,16,0],[18,41,16,39,"nodeType"],[18,49,16,0],[18,51,16,49],[19,0,17,4],[19,8,17,8,"structure"],[19,17,17,17],[19,20,17,20,"nodeType"],[19,28,17,28],[19,29,17,29,"structure"],[19,38,17,4],[20,0,18,4],[20,8,18,8,"walkers"],[20,15,18,15],[20,18,18,18],[20,20,18,4],[22,0,20,4],[22,9,20,9],[22,13,20,13,"key"],[22,16,20,4],[22,20,20,20,"structure"],[22,29,20,4],[22,31,20,31],[23,0,21,8],[23,10,21,12,"hasOwnProperty"],[23,24,21,26],[23,25,21,27,"call"],[23,29,21,12],[23,30,21,32,"structure"],[23,39,21,12],[23,41,21,43,"key"],[23,44,21,12],[23,50,21,52],[23,55,21,8],[23,57,21,59],[24,0,22,12],[25,0,23,9],[27,0,25,8],[27,10,25,12,"fieldTypes"],[27,20,25,22],[27,23,25,25,"structure"],[27,32,25,34],[27,33,25,35,"key"],[27,36,25,34],[27,37,25,8],[28,0,26,8],[28,10,26,12,"walker"],[28,16,26,18],[28,19,26,21],[29,0,27,12,"name"],[29,8,27,12,"name"],[29,12,27,16],[29,14,27,18,"key"],[29,17,26,21],[30,0,28,12,"type"],[30,8,28,12,"type"],[30,12,28,16],[30,14,28,18],[30,19,26,21],[31,0,29,12,"nullable"],[31,8,29,12,"nullable"],[31,16,29,20],[31,18,29,22],[32,0,26,21],[32,7,26,8],[34,0,32,8],[34,10,32,12],[34,11,32,13,"Array"],[34,16,32,18],[34,17,32,19,"isArray"],[34,24,32,13],[34,25,32,27,"structure"],[34,34,32,36],[34,35,32,37,"key"],[34,38,32,36],[34,39,32,13],[34,40,32,8],[34,42,32,44],[35,0,33,12,"fieldTypes"],[35,8,33,12,"fieldTypes"],[35,18,33,22],[35,21,33,25],[35,22,33,26,"structure"],[35,31,33,35],[35,32,33,36,"key"],[35,35,33,35],[35,36,33,25],[35,37,33,12],[36,0,34,9],[38,0,36,8],[38,11,36,13],[38,15,36,17,"i"],[38,16,36,18],[38,19,36,21],[38,20,36,8],[38,22,36,24,"i"],[38,23,36,25],[38,26,36,28,"fieldTypes"],[38,36,36,38],[38,37,36,39,"length"],[38,43,36,8],[38,45,36,47,"i"],[38,46,36,48],[38,48,36,8],[38,50,36,52],[39,0,37,12],[39,12,37,16,"fieldType"],[39,21,37,25],[39,24,37,28,"fieldTypes"],[39,34,37,38],[39,35,37,39,"i"],[39,36,37,38],[39,37,37,12],[41,0,38,12],[41,12,38,16,"fieldType"],[41,21,38,25],[41,26,38,30],[41,30,38,12],[41,32,38,36],[42,0,39,16,"walker"],[42,10,39,16,"walker"],[42,16,39,22],[42,17,39,23,"nullable"],[42,25,39,16],[42,28,39,34],[42,32,39,16],[43,0,40,13],[43,9,38,12],[43,15,40,19],[43,19,40,23],[43,26,40,30,"fieldType"],[43,35,40,23],[43,40,40,44],[43,48,40,19],[43,50,40,54],[44,0,41,16,"walker"],[44,10,41,16,"walker"],[44,16,41,22],[44,17,41,23,"type"],[44,21,41,16],[44,24,41,30],[44,30,41,16],[45,0,42,13],[45,9,40,19],[45,15,42,19],[45,19,42,23,"Array"],[45,24,42,28],[45,25,42,29,"isArray"],[45,32,42,23],[45,33,42,37,"fieldType"],[45,42,42,23],[45,43,42,19],[45,45,42,49],[46,0,43,16,"walker"],[46,10,43,16,"walker"],[46,16,43,22],[46,17,43,23,"type"],[46,21,43,16],[46,24,43,30],[46,30,43,16],[47,0,44,13],[48,0,45,9],[50,0,47,8],[50,10,47,12,"walker"],[50,16,47,18],[50,17,47,19,"type"],[50,21,47,8],[50,23,47,25],[51,0,48,12,"walkers"],[51,8,48,12,"walkers"],[51,15,48,19],[51,16,48,20,"push"],[51,20,48,12],[51,21,48,25,"walker"],[51,27,48,12],[52,0,49,9],[53,0,50,5],[55,0,52,4],[55,8,52,8,"walkers"],[55,15,52,15],[55,16,52,16,"length"],[55,22,52,4],[55,24,52,24],[56,0,53,8],[56,13,53,15],[57,0,54,12,"context"],[57,8,54,12,"context"],[57,15,54,19],[57,17,54,21,"nodeType"],[57,25,54,29],[57,26,54,30,"walkContext"],[57,37,53,15],[58,0,55,12,"fields"],[58,8,55,12,"fields"],[58,14,55,18],[58,16,55,20,"walkers"],[59,0,53,15],[59,7,53,8],[60,0,57,5],[62,0,59,4],[62,11,59,11],[62,15,59,4],[63,0,60,1],[65,0,62,0],[65,11,62,9,"getTypesFromConfig"],[65,29,62,0],[65,30,62,28,"config"],[65,36,62,0],[65,38,62,36],[66,0,63,4],[66,8,63,8,"types"],[66,13,63,13],[66,16,63,16],[66,18,63,4],[68,0,65,4],[68,9,65,9],[68,13,65,13,"name"],[68,17,65,4],[68,21,65,21,"config"],[68,27,65,27],[68,28,65,28,"node"],[68,32,65,4],[68,34,65,34],[69,0,66,8],[69,10,66,12,"hasOwnProperty"],[69,24,66,26],[69,25,66,27,"call"],[69,29,66,12],[69,30,66,32,"config"],[69,36,66,38],[69,37,66,39,"node"],[69,41,66,12],[69,43,66,45,"name"],[69,47,66,12],[69,48,66,8],[69,50,66,52],[70,0,67,12],[70,12,67,16,"nodeType"],[70,20,67,24],[70,23,67,27,"config"],[70,29,67,33],[70,30,67,34,"node"],[70,34,67,27],[70,35,67,39,"name"],[70,39,67,27],[70,40,67,12],[72,0,69,12],[72,12,69,16],[72,13,69,17,"nodeType"],[72,21,69,25],[72,22,69,26,"structure"],[72,31,69,12],[72,33,69,37],[73,0,70,16],[73,16,70,22],[73,20,70,26,"Error"],[73,25,70,22],[73,26,70,32],[73,60,70,66,"name"],[73,64,70,32],[73,67,70,73],[73,91,70,22],[73,92,70,16],[74,0,71,13],[76,0,73,12,"types"],[76,8,73,12,"types"],[76,13,73,17],[76,14,73,18,"name"],[76,18,73,17],[76,19,73,12],[76,22,73,26,"getWalkersFromStructure"],[76,45,73,49],[76,46,73,50,"name"],[76,50,73,49],[76,52,73,56,"nodeType"],[76,60,73,49],[76,61,73,12],[77,0,74,9],[78,0,75,5],[80,0,77,4],[80,11,77,11,"types"],[80,16,77,4],[81,0,78,1],[83,0,80,0],[83,11,80,9,"createTypeIterator"],[83,29,80,0],[83,30,80,28,"config"],[83,36,80,0],[83,38,80,36,"reverse"],[83,45,80,0],[83,47,80,45],[84,0,81,4],[84,8,81,8,"fields"],[84,14,81,14],[84,17,81,17,"config"],[84,23,81,23],[84,24,81,24,"fields"],[84,30,81,17],[84,31,81,31,"slice"],[84,36,81,17],[84,38,81,4],[85,0,82,4],[85,8,82,8,"contextName"],[85,19,82,19],[85,22,82,22,"config"],[85,28,82,28],[85,29,82,29,"context"],[85,36,82,4],[86,0,83,4],[86,8,83,8,"useContext"],[86,18,83,18],[86,21,83,21],[86,28,83,28,"contextName"],[86,39,83,21],[86,44,83,44],[86,52,83,4],[88,0,85,4],[88,8,85,8,"reverse"],[88,15,85,4],[88,17,85,17],[89,0,86,8,"fields"],[89,6,86,8,"fields"],[89,12,86,14],[89,13,86,15,"reverse"],[89,20,86,8],[90,0,87,5],[92,0,89,4],[92,11,89,11],[92,21,89,20,"node"],[92,25,89,11],[92,27,89,26,"context"],[92,34,89,11],[92,36,89,35,"walk"],[92,40,89,11],[92,42,89,41,"walkReducer"],[92,53,89,11],[92,55,89,54],[93,0,90,8],[93,10,90,12,"prevContextValue"],[93,26,90,8],[95,0,92,8],[95,10,92,12,"useContext"],[95,20,92,8],[95,22,92,24],[96,0,93,12,"prevContextValue"],[96,8,93,12,"prevContextValue"],[96,24,93,28],[96,27,93,31,"context"],[96,34,93,38],[96,35,93,39,"contextName"],[96,46,93,38],[96,47,93,12],[97,0,94,12,"context"],[97,8,94,12,"context"],[97,15,94,19],[97,16,94,20,"contextName"],[97,27,94,19],[97,28,94,12],[97,31,94,35,"node"],[97,35,94,12],[98,0,95,9],[100,0,97,8],[100,11,97,13],[100,15,97,17,"i"],[100,16,97,18],[100,19,97,21],[100,20,97,8],[100,22,97,24,"i"],[100,23,97,25],[100,26,97,28,"fields"],[100,32,97,34],[100,33,97,35,"length"],[100,39,97,8],[100,41,97,43,"i"],[100,42,97,44],[100,44,97,8],[100,46,97,48],[101,0,98,12],[101,12,98,16,"field"],[101,17,98,21],[101,20,98,24,"fields"],[101,26,98,30],[101,27,98,31,"i"],[101,28,98,30],[101,29,98,12],[102,0,99,12],[102,12,99,16,"ref"],[102,15,99,19],[102,18,99,22,"node"],[102,22,99,26],[102,23,99,27,"field"],[102,28,99,32],[102,29,99,33,"name"],[102,33,99,26],[102,34,99,12],[104,0,101,12],[104,12,101,16],[104,13,101,17,"field"],[104,18,101,22],[104,19,101,23,"nullable"],[104,27,101,16],[104,31,101,35,"ref"],[104,34,101,12],[104,36,101,40],[105,0,102,16],[105,14,102,20,"field"],[105,19,102,25],[105,20,102,26,"type"],[105,24,102,20],[105,29,102,35],[105,35,102,16],[105,37,102,43],[106,0,103,20],[106,16,103,24,"breakWalk"],[106,25,103,33],[106,28,103,36,"reverse"],[106,35,103,43],[106,38,104,26,"ref"],[106,41,104,29],[106,42,104,30,"reduceRight"],[106,53,104,26],[106,54,104,42,"walkReducer"],[106,65,104,26],[106,67,104,55],[106,72,104,26],[106,73,103,43],[106,76,105,26,"ref"],[106,79,105,29],[106,80,105,30,"reduce"],[106,86,105,26],[106,87,105,37,"walkReducer"],[106,98,105,26],[106,100,105,50],[106,105,105,26],[106,106,103,20],[108,0,107,20],[108,16,107,24,"breakWalk"],[108,25,107,20],[108,27,107,35],[109,0,108,24],[109,21,108,31],[109,25,108,24],[110,0,109,21],[111,0,110,17],[111,11,102,16],[111,17,110,23],[111,21,110,27,"walk"],[111,25,110,31],[111,26,110,32,"ref"],[111,29,110,31],[111,30,110,23],[111,32,110,38],[112,0,111,20],[112,19,111,27],[112,23,111,20],[113,0,112,17],[114,0,113,13],[115,0,114,9],[117,0,116,8],[117,10,116,12,"useContext"],[117,20,116,8],[117,22,116,24],[118,0,117,12,"context"],[118,8,117,12,"context"],[118,15,117,19],[118,16,117,20,"contextName"],[118,27,117,19],[118,28,117,12],[118,31,117,35,"prevContextValue"],[118,47,117,12],[119,0,118,9],[120,0,119,5],[120,5,89,4],[121,0,120,1],[123,0,122,0],[123,11,122,9,"createFastTraveralMap"],[123,32,122,0],[123,33,122,31,"iterators"],[123,42,122,0],[123,44,122,42],[124,0,123,4],[124,11,123,11],[125,0,124,8,"Atrule"],[125,6,124,8,"Atrule"],[125,12,124,14],[125,14,124,16],[126,0,125,12,"StyleSheet"],[126,8,125,12,"StyleSheet"],[126,18,125,22],[126,20,125,24,"iterators"],[126,29,125,33],[126,30,125,34,"StyleSheet"],[126,40,124,16],[127,0,126,12,"Atrule"],[127,8,126,12,"Atrule"],[127,14,126,18],[127,16,126,20,"iterators"],[127,25,126,29],[127,26,126,30,"Atrule"],[127,32,124,16],[128,0,127,12,"Rule"],[128,8,127,12,"Rule"],[128,12,127,16],[128,14,127,18,"iterators"],[128,23,127,27],[128,24,127,28,"Rule"],[128,28,124,16],[129,0,128,12,"Block"],[129,8,128,12,"Block"],[129,13,128,17],[129,15,128,19,"iterators"],[129,24,128,28],[129,25,128,29,"Block"],[130,0,124,16],[130,7,123,11],[131,0,130,8,"Rule"],[131,6,130,8,"Rule"],[131,10,130,12],[131,12,130,14],[132,0,131,12,"StyleSheet"],[132,8,131,12,"StyleSheet"],[132,18,131,22],[132,20,131,24,"iterators"],[132,29,131,33],[132,30,131,34,"StyleSheet"],[132,40,130,14],[133,0,132,12,"Atrule"],[133,8,132,12,"Atrule"],[133,14,132,18],[133,16,132,20,"iterators"],[133,25,132,29],[133,26,132,30,"Atrule"],[133,32,130,14],[134,0,133,12,"Rule"],[134,8,133,12,"Rule"],[134,12,133,16],[134,14,133,18,"iterators"],[134,23,133,27],[134,24,133,28,"Rule"],[134,28,130,14],[135,0,134,12,"Block"],[135,8,134,12,"Block"],[135,13,134,17],[135,15,134,19,"iterators"],[135,24,134,28],[135,25,134,29,"Block"],[136,0,130,14],[136,7,123,11],[137,0,136,8,"Declaration"],[137,6,136,8,"Declaration"],[137,17,136,19],[137,19,136,21],[138,0,137,12,"StyleSheet"],[138,8,137,12,"StyleSheet"],[138,18,137,22],[138,20,137,24,"iterators"],[138,29,137,33],[138,30,137,34,"StyleSheet"],[138,40,136,21],[139,0,138,12,"Atrule"],[139,8,138,12,"Atrule"],[139,14,138,18],[139,16,138,20,"iterators"],[139,25,138,29],[139,26,138,30,"Atrule"],[139,32,136,21],[140,0,139,12,"Rule"],[140,8,139,12,"Rule"],[140,12,139,16],[140,14,139,18,"iterators"],[140,23,139,27],[140,24,139,28,"Rule"],[140,28,136,21],[141,0,140,12,"Block"],[141,8,140,12,"Block"],[141,13,140,17],[141,15,140,19,"iterators"],[141,24,140,28],[141,25,140,29,"Block"],[141,30,136,21],[142,0,141,12,"DeclarationList"],[142,8,141,12,"DeclarationList"],[142,23,141,27],[142,25,141,29,"iterators"],[142,34,141,38],[142,35,141,39,"DeclarationList"],[143,0,136,21],[144,0,123,11],[144,5,123,4],[145,0,144,1],[147,0,146,0,"module"],[147,2,146,0,"module"],[147,8,146,6],[147,9,146,7,"exports"],[147,16,146,0],[147,19,146,17],[147,28,146,26,"createWalker"],[147,40,146,17],[147,41,146,39,"config"],[147,47,146,17],[147,49,146,47],[148,0,147,4],[148,8,147,8,"types"],[148,13,147,13],[148,16,147,16,"getTypesFromConfig"],[148,34,147,34],[148,35,147,35,"config"],[148,41,147,34],[148,42,147,4],[149,0,148,4],[149,8,148,8,"iteratorsNatural"],[149,24,148,24],[149,27,148,27],[149,29,148,4],[150,0,149,4],[150,8,149,8,"iteratorsReverse"],[150,24,149,24],[150,27,149,27],[150,29,149,4],[151,0,150,4],[151,8,150,8,"breakWalk"],[151,17,150,17],[151,20,150,20,"Symbol"],[151,26,150,26],[151,27,150,27],[151,39,150,26],[151,40,150,4],[152,0,151,4],[152,8,151,8,"skipNode"],[152,16,151,16],[152,19,151,19,"Symbol"],[152,25,151,25],[152,26,151,26],[152,37,151,25],[152,38,151,4],[154,0,153,4],[154,9,153,9],[154,13,153,13,"name"],[154,17,153,4],[154,21,153,21,"types"],[154,26,153,4],[154,28,153,28],[155,0,154,8],[155,10,154,12,"hasOwnProperty"],[155,24,154,26],[155,25,154,27,"call"],[155,29,154,12],[155,30,154,32,"types"],[155,35,154,12],[155,37,154,39,"name"],[155,41,154,12],[155,46,154,48,"types"],[155,51,154,53],[155,52,154,54,"name"],[155,56,154,53],[155,57,154,48],[155,62,154,64],[155,66,154,8],[155,68,154,70],[156,0,155,12,"iteratorsNatural"],[156,8,155,12,"iteratorsNatural"],[156,24,155,28],[156,25,155,29,"name"],[156,29,155,28],[156,30,155,12],[156,33,155,37,"createTypeIterator"],[156,51,155,55],[156,52,155,56,"types"],[156,57,155,61],[156,58,155,62,"name"],[156,62,155,61],[156,63,155,55],[156,65,155,69],[156,70,155,55],[156,71,155,12],[157,0,156,12,"iteratorsReverse"],[157,8,156,12,"iteratorsReverse"],[157,24,156,28],[157,25,156,29,"name"],[157,29,156,28],[157,30,156,12],[157,33,156,37,"createTypeIterator"],[157,51,156,55],[157,52,156,56,"types"],[157,57,156,61],[157,58,156,62,"name"],[157,62,156,61],[157,63,156,55],[157,65,156,69],[157,69,156,55],[157,70,156,12],[158,0,157,9],[159,0,158,5],[161,0,160,4],[161,8,160,8,"fastTraversalIteratorsNatural"],[161,37,160,37],[161,40,160,40,"createFastTraveralMap"],[161,61,160,61],[161,62,160,62,"iteratorsNatural"],[161,78,160,61],[161,79,160,4],[162,0,161,4],[162,8,161,8,"fastTraversalIteratorsReverse"],[162,37,161,37],[162,40,161,40,"createFastTraveralMap"],[162,61,161,61],[162,62,161,62,"iteratorsReverse"],[162,78,161,61],[162,79,161,4],[164,0,163,4],[164,8,163,8,"walk"],[164,12,163,12],[164,15,163,15],[164,24,163,8,"walk"],[164,28,163,15],[164,29,163,24,"root"],[164,33,163,15],[164,35,163,30,"options"],[164,42,163,15],[164,44,163,39],[165,0,164,8],[165,15,164,17,"walkNode"],[165,23,164,8],[165,24,164,26,"node"],[165,28,164,8],[165,30,164,32,"item"],[165,34,164,8],[165,36,164,38,"list"],[165,40,164,8],[165,42,164,44],[166,0,165,12],[166,12,165,16,"enterRet"],[166,20,165,24],[166,23,165,27,"enter"],[166,28,165,32],[166,29,165,33,"call"],[166,33,165,27],[166,34,165,38,"context"],[166,41,165,27],[166,43,165,47,"node"],[166,47,165,27],[166,49,165,53,"item"],[166,53,165,27],[166,55,165,59,"list"],[166,59,165,27],[166,60,165,12],[168,0,167,12],[168,12,167,16,"enterRet"],[168,20,167,24],[168,25,167,29,"breakWalk"],[168,34,167,12],[168,36,167,40],[169,0,168,16],[170,0,169,16],[170,17,169,23],[170,21,169,16],[171,0,170,13],[173,0,172,12],[173,12,172,16,"enterRet"],[173,20,172,24],[173,25,172,29,"skipNode"],[173,33,172,12],[173,35,172,39],[174,0,173,16],[174,17,173,23],[174,22,173,16],[175,0,174,13],[177,0,176,12],[177,12,176,16,"iterators"],[177,21,176,25],[177,22,176,26,"hasOwnProperty"],[177,36,176,16],[177,37,176,41,"node"],[177,41,176,45],[177,42,176,46,"type"],[177,46,176,16],[177,47,176,12],[177,49,176,53],[178,0,177,16],[178,14,177,20,"iterators"],[178,23,177,29],[178,24,177,30,"node"],[178,28,177,34],[178,29,177,35,"type"],[178,33,177,29],[178,34,177,20],[178,35,177,41,"node"],[178,39,177,20],[178,41,177,47,"context"],[178,48,177,20],[178,50,177,56,"walkNode"],[178,58,177,20],[178,60,177,66,"walkReducer"],[178,71,177,20],[178,72,177,16],[178,74,177,80],[179,0,178,20],[179,19,178,27],[179,23,178,20],[180,0,179,17],[181,0,180,13],[183,0,182,12],[183,12,182,16,"leave"],[183,17,182,21],[183,18,182,22,"call"],[183,22,182,16],[183,23,182,27,"context"],[183,30,182,16],[183,32,182,36,"node"],[183,36,182,16],[183,38,182,42,"item"],[183,42,182,16],[183,44,182,48,"list"],[183,48,182,16],[183,54,182,58,"breakWalk"],[183,63,182,12],[183,65,182,69],[184,0,183,16],[184,17,183,23],[184,21,183,16],[185,0,184,13],[187,0,186,12],[187,15,186,19],[187,20,186,12],[188,0,187,9],[190,0,189,8],[190,10,189,12,"walkReducer"],[190,21,189,23],[190,24,189,26],[190,33,189,12,"walkReducer"],[190,44,189,26],[190,45,189,27,"ret"],[190,48,189,26],[190,50,189,32,"data"],[190,54,189,26],[190,56,189,38,"item"],[190,60,189,26],[190,62,189,44,"list"],[190,66,189,26],[191,0,189,26],[191,15,189,53,"ret"],[191,18,189,56],[191,22,189,60,"walkNode"],[191,30,189,68],[191,31,189,69,"data"],[191,35,189,68],[191,37,189,75,"item"],[191,41,189,68],[191,43,189,81,"list"],[191,47,189,68],[191,48,189,26],[192,0,189,26],[192,7,189,8],[194,0,190,8],[194,10,190,12,"enter"],[194,15,190,17],[194,18,190,20,"noop"],[194,22,190,8],[195,0,191,8],[195,10,191,12,"leave"],[195,15,191,17],[195,18,191,20,"noop"],[195,22,191,8],[196,0,192,8],[196,10,192,12,"iterators"],[196,19,192,21],[196,22,192,24,"iteratorsNatural"],[196,38,192,8],[197,0,193,8],[197,10,193,12,"context"],[197,17,193,19],[197,20,193,22],[198,0,194,12,"break"],[198,8,194,12,"break"],[198,13,194,17],[198,15,194,19,"breakWalk"],[198,24,193,22],[199,0,195,12,"skip"],[199,8,195,12,"skip"],[199,12,195,16],[199,14,195,18,"skipNode"],[199,22,193,22],[200,0,197,12,"root"],[200,8,197,12,"root"],[200,12,197,16],[200,14,197,18,"root"],[200,18,193,22],[201,0,198,12,"stylesheet"],[201,8,198,12,"stylesheet"],[201,18,198,22],[201,20,198,24],[201,24,193,22],[202,0,199,12,"atrule"],[202,8,199,12,"atrule"],[202,14,199,18],[202,16,199,20],[202,20,193,22],[203,0,200,12,"atrulePrelude"],[203,8,200,12,"atrulePrelude"],[203,21,200,25],[203,23,200,27],[203,27,193,22],[204,0,201,12,"rule"],[204,8,201,12,"rule"],[204,12,201,16],[204,14,201,18],[204,18,193,22],[205,0,202,12,"selector"],[205,8,202,12,"selector"],[205,16,202,20],[205,18,202,22],[205,22,193,22],[206,0,203,12,"block"],[206,8,203,12,"block"],[206,13,203,17],[206,15,203,19],[206,19,193,22],[207,0,204,12,"declaration"],[207,8,204,12,"declaration"],[207,19,204,23],[207,21,204,25],[207,25,193,22],[208,0,205,12,"function"],[208,8,205,12,"function"],[208,16,205,20],[208,18,205,22],[209,0,193,22],[209,7,193,8],[211,0,208,8],[211,10,208,12],[211,17,208,19,"options"],[211,24,208,12],[211,29,208,31],[211,39,208,8],[211,41,208,43],[212,0,209,12,"enter"],[212,8,209,12,"enter"],[212,13,209,17],[212,16,209,20,"options"],[212,23,209,12],[213,0,210,9],[213,7,208,8],[213,13,210,15],[213,17,210,19,"options"],[213,24,210,15],[213,26,210,28],[214,0,211,12,"enter"],[214,8,211,12,"enter"],[214,13,211,17],[214,16,211,20,"ensureFunction"],[214,30,211,34],[214,31,211,35,"options"],[214,38,211,42],[214,39,211,43,"enter"],[214,44,211,34],[214,45,211,12],[215,0,212,12,"leave"],[215,8,212,12,"leave"],[215,13,212,17],[215,16,212,20,"ensureFunction"],[215,30,212,34],[215,31,212,35,"options"],[215,38,212,42],[215,39,212,43,"leave"],[215,44,212,34],[215,45,212,12],[217,0,214,12],[217,12,214,16,"options"],[217,19,214,23],[217,20,214,24,"reverse"],[217,27,214,12],[217,29,214,33],[218,0,215,16,"iterators"],[218,10,215,16,"iterators"],[218,19,215,25],[218,22,215,28,"iteratorsReverse"],[218,38,215,16],[219,0,216,13],[221,0,218,12],[221,12,218,16,"options"],[221,19,218,23],[221,20,218,24,"visit"],[221,25,218,12],[221,27,218,31],[222,0,219,16],[222,14,219,20,"fastTraversalIteratorsNatural"],[222,43,219,49],[222,44,219,50,"hasOwnProperty"],[222,58,219,20],[222,59,219,65,"options"],[222,66,219,72],[222,67,219,73,"visit"],[222,72,219,20],[222,73,219,16],[222,75,219,81],[223,0,220,20,"iterators"],[223,12,220,20,"iterators"],[223,21,220,29],[223,24,220,32,"options"],[223,31,220,39],[223,32,220,40,"reverse"],[223,39,220,32],[223,42,221,26,"fastTraversalIteratorsReverse"],[223,71,221,55],[223,72,221,56,"options"],[223,79,221,63],[223,80,221,64,"visit"],[223,85,221,55],[223,86,220,32],[223,89,222,26,"fastTraversalIteratorsNatural"],[223,118,222,55],[223,119,222,56,"options"],[223,126,222,63],[223,127,222,64,"visit"],[223,132,222,55],[223,133,220,20],[224,0,223,17],[224,11,219,16],[224,17,223,23],[224,21,223,27],[224,22,223,28,"types"],[224,27,223,33],[224,28,223,34,"hasOwnProperty"],[224,42,223,28],[224,43,223,49,"options"],[224,50,223,56],[224,51,223,57,"visit"],[224,56,223,28],[224,57,223,23],[224,59,223,65],[225,0,224,20],[225,18,224,26],[225,22,224,30,"Error"],[225,27,224,26],[225,28,224,36],[225,44,224,52,"options"],[225,51,224,59],[225,52,224,60,"visit"],[225,57,224,36],[225,60,224,68],[225,95,224,36],[225,98,224,106,"Object"],[225,104,224,112],[225,105,224,113,"keys"],[225,109,224,106],[225,110,224,118,"types"],[225,115,224,106],[225,117,224,125,"join"],[225,121,224,106],[225,122,224,130],[225,126,224,106],[225,127,224,36],[225,130,224,138],[225,133,224,26],[225,134,224,20],[226,0,225,17],[228,0,227,16,"enter"],[228,10,227,16,"enter"],[228,15,227,21],[228,18,227,24,"invokeForType"],[228,31,227,37],[228,32,227,38,"enter"],[228,37,227,37],[228,39,227,45,"options"],[228,46,227,52],[228,47,227,53,"visit"],[228,52,227,37],[228,53,227,16],[229,0,228,16,"leave"],[229,10,228,16,"leave"],[229,15,228,21],[229,18,228,24,"invokeForType"],[229,31,228,37],[229,32,228,38,"leave"],[229,37,228,37],[229,39,228,45,"options"],[229,46,228,52],[229,47,228,53,"visit"],[229,52,228,37],[229,53,228,16],[230,0,229,13],[231,0,230,9],[233,0,232,8],[233,10,232,12,"enter"],[233,15,232,17],[233,20,232,22,"noop"],[233,24,232,12],[233,28,232,30,"leave"],[233,33,232,35],[233,38,232,40,"noop"],[233,42,232,8],[233,44,232,46],[234,0,233,12],[234,14,233,18],[234,18,233,22,"Error"],[234,23,233,18],[234,24,233,28],[234,102,233,18],[234,103,233,12],[235,0,234,9],[237,0,236,8,"walkNode"],[237,6,236,8,"walkNode"],[237,14,236,16],[237,15,236,17,"root"],[237,19,236,16],[237,20,236,8],[238,0,237,5],[238,5,163,4],[240,0,239,4,"walk"],[240,4,239,4,"walk"],[240,8,239,8],[240,9,239,9,"break"],[240,14,239,4],[240,17,239,17,"breakWalk"],[240,26,239,4],[241,0,240,4,"walk"],[241,4,240,4,"walk"],[241,8,240,8],[241,9,240,9,"skip"],[241,13,240,4],[241,16,240,16,"skipNode"],[241,24,240,4],[243,0,242,4,"walk"],[243,4,242,4,"walk"],[243,8,242,8],[243,9,242,9,"find"],[243,13,242,4],[243,16,242,16],[243,26,242,25,"ast"],[243,29,242,16],[243,31,242,30,"fn"],[243,33,242,16],[243,35,242,34],[244,0,243,8],[244,10,243,12,"found"],[244,15,243,17],[244,18,243,20],[244,22,243,8],[245,0,245,8,"walk"],[245,6,245,8,"walk"],[245,10,245,12],[245,11,245,13,"ast"],[245,14,245,12],[245,16,245,18],[245,26,245,27,"node"],[245,30,245,18],[245,32,245,33,"item"],[245,36,245,18],[245,38,245,39,"list"],[245,42,245,18],[245,44,245,45],[246,0,246,12],[246,12,246,16,"fn"],[246,14,246,18],[246,15,246,19,"call"],[246,19,246,16],[246,20,246,24],[246,24,246,16],[246,26,246,30,"node"],[246,30,246,16],[246,32,246,36,"item"],[246,36,246,16],[246,38,246,42,"list"],[246,42,246,16],[246,43,246,12],[246,45,246,49],[247,0,247,16,"found"],[247,10,247,16,"found"],[247,15,247,21],[247,18,247,24,"node"],[247,22,247,16],[248,0,248,16],[248,17,248,23,"breakWalk"],[248,26,248,16],[249,0,249,13],[250,0,250,9],[250,7,245,12],[250,8,245,8],[251,0,252,8],[251,13,252,15,"found"],[251,18,252,8],[252,0,253,5],[252,5,242,4],[254,0,255,4,"walk"],[254,4,255,4,"walk"],[254,8,255,8],[254,9,255,9,"findLast"],[254,17,255,4],[254,20,255,20],[254,30,255,29,"ast"],[254,33,255,20],[254,35,255,34,"fn"],[254,37,255,20],[254,39,255,38],[255,0,256,8],[255,10,256,12,"found"],[255,15,256,17],[255,18,256,20],[255,22,256,8],[256,0,258,8,"walk"],[256,6,258,8,"walk"],[256,10,258,12],[256,11,258,13,"ast"],[256,14,258,12],[256,16,258,18],[257,0,259,12,"reverse"],[257,8,259,12,"reverse"],[257,15,259,19],[257,17,259,21],[257,21,258,18],[258,0,260,12,"enter"],[258,8,260,12,"enter"],[258,13,260,17],[258,15,260,19],[258,30,260,28,"node"],[258,34,260,19],[258,36,260,34,"item"],[258,40,260,19],[258,42,260,40,"list"],[258,46,260,19],[258,48,260,46],[259,0,261,16],[259,14,261,20,"fn"],[259,16,261,22],[259,17,261,23,"call"],[259,21,261,20],[259,22,261,28],[259,26,261,20],[259,28,261,34,"node"],[259,32,261,20],[259,34,261,40,"item"],[259,38,261,20],[259,40,261,46,"list"],[259,44,261,20],[259,45,261,16],[259,47,261,53],[260,0,262,20,"found"],[260,12,262,20,"found"],[260,17,262,25],[260,20,262,28,"node"],[260,24,262,20],[261,0,263,20],[261,19,263,27,"breakWalk"],[261,28,263,20],[262,0,264,17],[263,0,265,13],[264,0,258,18],[264,7,258,12],[264,8,258,8],[265,0,268,8],[265,13,268,15,"found"],[265,18,268,8],[266,0,269,5],[266,5,255,4],[268,0,271,4,"walk"],[268,4,271,4,"walk"],[268,8,271,8],[268,9,271,9,"findAll"],[268,16,271,4],[268,19,271,19],[268,29,271,28,"ast"],[268,32,271,19],[268,34,271,33,"fn"],[268,36,271,19],[268,38,271,37],[269,0,272,8],[269,10,272,12,"found"],[269,15,272,17],[269,18,272,20],[269,20,272,8],[270,0,274,8,"walk"],[270,6,274,8,"walk"],[270,10,274,12],[270,11,274,13,"ast"],[270,14,274,12],[270,16,274,18],[270,26,274,27,"node"],[270,30,274,18],[270,32,274,33,"item"],[270,36,274,18],[270,38,274,39,"list"],[270,42,274,18],[270,44,274,45],[271,0,275,12],[271,12,275,16,"fn"],[271,14,275,18],[271,15,275,19,"call"],[271,19,275,16],[271,20,275,24],[271,24,275,16],[271,26,275,30,"node"],[271,30,275,16],[271,32,275,36,"item"],[271,36,275,16],[271,38,275,42,"list"],[271,42,275,16],[271,43,275,12],[271,45,275,49],[272,0,276,16,"found"],[272,10,276,16,"found"],[272,15,276,21],[272,16,276,22,"push"],[272,20,276,16],[272,21,276,27,"node"],[272,25,276,16],[273,0,277,13],[274,0,278,9],[274,7,274,12],[274,8,274,8],[275,0,280,8],[275,13,280,15,"found"],[275,18,280,8],[276,0,281,5],[276,5,271,4],[278,0,283,4],[278,11,283,11,"walk"],[278,15,283,4],[279,0,284,1],[279,3,146,0]],"functionMap":{"names":["<global>","noop","ensureFunction","invokeForType","<anonymous>","getWalkersFromStructure","getTypesFromConfig","createTypeIterator","createFastTraveralMap","createWalker","walk","walkNode","walkReducer","walk.find","walk$argument_1","walk.findLast","walk$argument_1.enter","walk.findAll"],"mappings":"AAA;WCC,aD;AEE;CFE;AGE;WCC;KDI;CHC;AKE;CL4C;AME;CNgB;AOE;WHS;KG8B;CPC;AQE;CRsB;iBSE;eCiB;QCC;SDuB;0BEE,4DF;KDgD;gBIK;kBCG;SDK;KJG;oBME;mBCK;aDK;KNI;mBQE;kBHG;SGI;KRG;CTG"}},"type":"js/module"}]}