{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":442,"column":0}},{"start":{"line":14,"column":0},"end":{"line":14,"column":48}}]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":442,"column":0}}]}},{"name":"./RCTAsyncStorage","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":0},"end":{"line":14,"column":48}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _RCTAsyncStorage = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[2], \"./RCTAsyncStorage\"));\n\n  if (!_RCTAsyncStorage.default) {\n    throw new Error(\"[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\\n\\nTo fix this issue try these steps:\\n\\n  \\u2022 Run `react-native link @react-native-async-storage/async-storage` in the project root.\\n\\n  \\u2022 Rebuild and restart the app.\\n\\n  \\u2022 Run the packager with `--reset-cache` flag.\\n\\n  \\u2022 If you are using CocoaPods on iOS, run `pod install` in the `ios` directory and then rebuild and re-run the app.\\n\\n  \\u2022 If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\\n\\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-async-storage/react-native-async-storage/issues\\n\");\n  }\n\n  function checkValidInput(usedKey, value) {\n    var isValuePassed = arguments.length > 1;\n\n    if (typeof usedKey !== 'string') {\n      console.warn(\"[AsyncStorage] Using \" + typeof usedKey + \" type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: \" + usedKey + \"\\n\");\n    }\n\n    if (isValuePassed && typeof value !== 'string') {\n      if (value == null) {\n        throw new Error(\"[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .remove method instead.\\nPassed value: \" + value + \"\\nPassed key: \" + usedKey + \"\\n\");\n      } else {\n        console.warn(\"[AsyncStorage] The value for key \\\"\" + usedKey + \"\\\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: \" + value + \"\\nPassed key: \" + usedKey + \"\\n\");\n      }\n    }\n  }\n\n  function checkValidArgs(keyValuePairs, callback) {\n    if (!Array.isArray(keyValuePairs) || keyValuePairs.length === 0 || !Array.isArray(keyValuePairs[0])) {\n      throw new Error('[AsyncStorage] Expected array of key-value pairs as first argument to multiSet');\n    }\n\n    if (callback && typeof callback !== 'function') {\n      if (Array.isArray(callback)) {\n        throw new Error('[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?');\n      }\n\n      throw new Error('[AsyncStorage] Expected function as second argument to multiSet');\n    }\n  }\n\n  var AsyncStorage = {\n    _getRequests: [],\n    _getKeys: [],\n    _immediate: null,\n    getItem: function getItem(key, callback) {\n      return new Promise(function (resolve, reject) {\n        checkValidInput(key);\n\n        _RCTAsyncStorage.default.multiGet([key], function (errors, result) {\n          var value = result && result[0] && result[0][1] ? result[0][1] : null;\n          var errs = convertErrors(errors);\n          callback && callback(errs && errs[0], value);\n\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve(value);\n          }\n        });\n      });\n    },\n    setItem: function setItem(key, value, callback) {\n      return new Promise(function (resolve, reject) {\n        checkValidInput(key, value);\n\n        _RCTAsyncStorage.default.multiSet([[key, value]], function (errors) {\n          var errs = convertErrors(errors);\n          callback && callback(errs && errs[0]);\n\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    },\n    removeItem: function removeItem(key, callback) {\n      return new Promise(function (resolve, reject) {\n        checkValidInput(key);\n\n        _RCTAsyncStorage.default.multiRemove([key], function (errors) {\n          var errs = convertErrors(errors);\n          callback && callback(errs && errs[0]);\n\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    },\n    mergeItem: function mergeItem(key, value, callback) {\n      return new Promise(function (resolve, reject) {\n        checkValidInput(key, value);\n\n        _RCTAsyncStorage.default.multiMerge([[key, value]], function (errors) {\n          var errs = convertErrors(errors);\n          callback && callback(errs && errs[0]);\n\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    },\n    clear: function clear(callback) {\n      return new Promise(function (resolve, reject) {\n        _RCTAsyncStorage.default.clear(function (error) {\n          var err = convertError(error);\n          callback && callback(err);\n\n          if (err) {\n            reject(err);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    },\n    getAllKeys: function getAllKeys(callback) {\n      return new Promise(function (resolve, reject) {\n        _RCTAsyncStorage.default.getAllKeys(function (error, keys) {\n          var err = convertError(error);\n          callback && callback(err, keys);\n\n          if (err) {\n            reject(err);\n          } else {\n            resolve(keys);\n          }\n        });\n      });\n    },\n    flushGetRequests: function flushGetRequests() {\n      var getRequests = this._getRequests;\n      var getKeys = this._getKeys;\n      this._getRequests = [];\n      this._getKeys = [];\n\n      _RCTAsyncStorage.default.multiGet(getKeys, function (errors, result) {\n        var map = {};\n        result && result.forEach(function (_ref) {\n          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n\n          map[key] = value;\n          return value;\n        });\n        var reqLength = getRequests.length;\n\n        for (var i = 0; i < reqLength; i++) {\n          var request = getRequests[i];\n          var requestKeys = request.keys;\n          var requestResult = requestKeys.map(function (key) {\n            return [key, map[key]];\n          });\n          request.callback && request.callback(null, requestResult);\n          request.resolve && request.resolve(requestResult);\n        }\n      });\n    },\n    multiGet: function multiGet(keys, callback) {\n      var _this = this;\n\n      if (!this._immediate) {\n        this._immediate = setImmediate(function () {\n          _this._immediate = null;\n\n          _this.flushGetRequests();\n        });\n      }\n\n      var getRequest = {\n        keys: keys,\n        callback: callback,\n        keyIndex: this._getKeys.length,\n        resolve: null,\n        reject: null\n      };\n      var promiseResult = new Promise(function (resolve, reject) {\n        getRequest.resolve = resolve;\n        getRequest.reject = reject;\n      });\n\n      this._getRequests.push(getRequest);\n\n      keys.forEach(function (key) {\n        if (_this._getKeys.indexOf(key) === -1) {\n          _this._getKeys.push(key);\n        }\n      });\n      return promiseResult;\n    },\n    multiSet: function multiSet(keyValuePairs, callback) {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise(function (resolve, reject) {\n        keyValuePairs.forEach(function (_ref3) {\n          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n              key = _ref4[0],\n              value = _ref4[1];\n\n          checkValidInput(key, value);\n        });\n\n        _RCTAsyncStorage.default.multiSet(keyValuePairs, function (errors) {\n          var error = convertErrors(errors);\n          callback && callback(error);\n\n          if (error) {\n            reject(error);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    },\n    multiRemove: function multiRemove(keys, callback) {\n      return new Promise(function (resolve, reject) {\n        keys.forEach(function (key) {\n          return checkValidInput(key);\n        });\n\n        _RCTAsyncStorage.default.multiRemove(keys, function (errors) {\n          var error = convertErrors(errors);\n          callback && callback(error);\n\n          if (error) {\n            reject(error);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    },\n    multiMerge: function multiMerge(keyValuePairs, callback) {\n      return new Promise(function (resolve, reject) {\n        _RCTAsyncStorage.default.multiMerge(keyValuePairs, function (errors) {\n          var error = convertErrors(errors);\n          callback && callback(error);\n\n          if (error) {\n            reject(error);\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n  };\n\n  if (!_RCTAsyncStorage.default.multiMerge) {\n    delete AsyncStorage.mergeItem;\n    delete AsyncStorage.multiMerge;\n  }\n\n  function convertErrors(errs) {\n    if (!errs || Array.isArray(errs) && errs.length === 0) {\n      return null;\n    }\n\n    return (Array.isArray(errs) ? errs : [errs]).map(function (e) {\n      return convertError(e);\n    });\n  }\n\n  function convertError(error) {\n    if (!error) {\n      return null;\n    }\n\n    var out = new Error(error.message);\n    out.key = error.key;\n    return out;\n  }\n\n  var _default = AsyncStorage;\n  exports.default = _default;\n});","lineCount":289,"map":[[2,0,12,0],[11,0,14,0],[13,0,16,0],[13,6,16,4],[13,7,16,5,"RCTAsyncStorage"],[13,31,16,0],[13,33,16,22],[14,0,17,2],[14,10,17,8],[14,14,17,12,"Error"],[14,19,17,8],[14,787,17,2],[15,0,33,1],[17,0,50,0],[17,11,50,9,"checkValidInput"],[17,26,50,0],[17,27,50,25,"usedKey"],[17,34,50,0],[17,36,50,42,"value"],[17,41,50,0],[17,43,50,54],[18,0,51,2],[18,8,51,8,"isValuePassed"],[18,21,51,21],[18,24,51,24,"arguments"],[18,33,51,33],[18,34,51,34,"length"],[18,40,51,24],[18,43,51,43],[18,44,51,2],[20,0,53,2],[20,8,53,6],[20,15,53,13,"usedKey"],[20,22,53,6],[20,27,53,25],[20,35,53,2],[20,37,53,35],[21,0,54,4,"console"],[21,6,54,4,"console"],[21,13,54,11],[21,14,54,12,"warn"],[21,18,54,4],[21,45,55,30],[21,52,55,37,"usedKey"],[21,59,54,4],[21,177,55,157,"usedKey"],[21,184,54,4],[22,0,57,3],[24,0,59,2],[24,8,59,6,"isValuePassed"],[24,21,59,19],[24,25,59,23],[24,32,59,30,"value"],[24,37,59,23],[24,42,59,40],[24,50,59,2],[24,52,59,50],[25,0,60,4],[25,10,60,8,"value"],[25,15,60,13],[25,19,60,17],[25,23,60,4],[25,25,60,23],[26,0,61,6],[26,14,61,12],[26,18,61,16,"Error"],[26,23,61,12],[26,166,62,148,"value"],[26,171,61,12],[26,193,62,170,"usedKey"],[26,200,61,12],[26,208,61,6],[27,0,64,5],[27,7,60,4],[27,13,64,11],[28,0,65,6,"console"],[28,8,65,6,"console"],[28,15,65,13],[28,16,65,14,"warn"],[28,20,65,6],[28,61,66,45,"usedKey"],[28,68,65,6],[28,182,66,160,"value"],[28,187,65,6],[28,209,66,182,"usedKey"],[28,216,65,6],[29,0,68,5],[30,0,69,3],[31,0,70,1],[33,0,72,0],[33,11,72,9,"checkValidArgs"],[33,25,72,0],[33,26,72,24,"keyValuePairs"],[33,39,72,0],[33,41,72,39,"callback"],[33,49,72,0],[33,51,72,49],[34,0,73,2],[34,8,74,4],[34,9,74,5,"Array"],[34,14,74,10],[34,15,74,11,"isArray"],[34,22,74,5],[34,23,74,19,"keyValuePairs"],[34,36,74,5],[34,37,74,4],[34,41,75,4,"keyValuePairs"],[34,54,75,17],[34,55,75,18,"length"],[34,61,75,4],[34,66,75,29],[34,67,74,4],[34,71,76,4],[34,72,76,5,"Array"],[34,77,76,10],[34,78,76,11,"isArray"],[34,85,76,5],[34,86,76,19,"keyValuePairs"],[34,99,76,32],[34,100,76,33],[34,101,76,32],[34,102,76,5],[34,103,73,2],[34,105,77,4],[35,0,78,4],[35,12,78,10],[35,16,78,14,"Error"],[35,21,78,10],[35,22,79,6],[35,102,78,10],[35,103,78,4],[36,0,81,3],[38,0,83,2],[38,8,83,6,"callback"],[38,16,83,14],[38,20,83,18],[38,27,83,25,"callback"],[38,35,83,18],[38,40,83,38],[38,50,83,2],[38,52,83,50],[39,0,84,4],[39,10,84,8,"Array"],[39,15,84,13],[39,16,84,14,"isArray"],[39,23,84,8],[39,24,84,22,"callback"],[39,32,84,8],[39,33,84,4],[39,35,84,33],[40,0,85,6],[40,14,85,12],[40,18,85,16,"Error"],[40,23,85,12],[40,24,86,8],[40,165,85,12],[40,166,85,6],[41,0,88,5],[43,0,90,4],[43,12,90,10],[43,16,90,14,"Error"],[43,21,90,10],[43,22,91,6],[43,87,90,10],[43,88,90,4],[44,0,93,3],[45,0,94,1],[47,0,103,0],[47,6,103,6,"AsyncStorage"],[47,18,103,18],[47,21,103,21],[48,0,104,2,"_getRequests"],[48,4,104,2,"_getRequests"],[48,16,104,14],[48,18,104,17],[48,20,103,21],[49,0,105,2,"_getKeys"],[49,4,105,2,"_getKeys"],[49,12,105,10],[49,14,105,13],[49,16,103,21],[50,0,106,2,"_immediate"],[50,4,106,2,"_immediate"],[50,14,106,12],[50,16,106,15],[50,20,103,21],[51,0,113,2,"getItem"],[51,4,113,2,"getItem"],[51,11,113,9],[51,13,113,11],[51,30,114,4,"key"],[51,33,113,11],[51,35,115,4,"callback"],[51,43,113,11],[51,45,116,28],[52,0,117,4],[52,13,117,11],[52,17,117,15,"Promise"],[52,24,117,11],[52,25,117,23],[52,35,117,24,"resolve"],[52,42,117,23],[52,44,117,33,"reject"],[52,50,117,23],[52,52,117,44],[53,0,118,6,"checkValidInput"],[53,8,118,6,"checkValidInput"],[53,23,118,21],[53,24,118,22,"key"],[53,27,118,21],[53,28,118,6],[55,0,119,6,"RCTAsyncStorage"],[55,33,119,22,"multiGet"],[55,41,119,6],[55,42,119,31],[55,43,119,32,"key"],[55,46,119,31],[55,47,119,6],[55,49,119,38],[55,59,119,48,"errors"],[55,65,119,38],[55,67,119,56,"result"],[55,73,119,38],[55,75,119,64],[56,0,121,8],[56,14,121,14,"value"],[56,19,121,19],[56,22,121,22,"result"],[56,28,121,28],[56,32,121,32,"result"],[56,38,121,38],[56,39,121,39],[56,40,121,38],[56,41,121,22],[56,45,121,45,"result"],[56,51,121,51],[56,52,121,52],[56,53,121,51],[56,54,121,45],[56,55,121,55],[56,56,121,45],[56,57,121,22],[56,60,121,60,"result"],[56,66,121,66],[56,67,121,67],[56,68,121,66],[56,69,121,60],[56,70,121,70],[56,71,121,60],[56,72,121,22],[56,75,121,75],[56,79,121,8],[57,0,122,8],[57,14,122,14,"errs"],[57,18,122,18],[57,21,122,21,"convertErrors"],[57,34,122,34],[57,35,122,35,"errors"],[57,41,122,34],[57,42,122,8],[58,0,123,8,"callback"],[58,10,123,8,"callback"],[58,18,123,16],[58,22,123,20,"callback"],[58,30,123,28],[58,31,123,29,"errs"],[58,35,123,33],[58,39,123,37,"errs"],[58,43,123,41],[58,44,123,42],[58,45,123,41],[58,46,123,28],[58,48,123,46,"value"],[58,53,123,28],[58,54,123,8],[60,0,124,8],[60,14,124,12,"errs"],[60,18,124,8],[60,20,124,18],[61,0,125,10,"reject"],[61,12,125,10,"reject"],[61,18,125,16],[61,19,125,17,"errs"],[61,23,125,21],[61,24,125,22],[61,25,125,21],[61,26,125,16],[61,27,125,10],[62,0,126,9],[62,11,124,8],[62,17,126,15],[63,0,127,10,"resolve"],[63,12,127,10,"resolve"],[63,19,127,17],[63,20,127,18,"value"],[63,25,127,17],[63,26,127,10],[64,0,128,9],[65,0,129,7],[65,9,119,6],[66,0,130,5],[66,7,117,11],[66,8,117,4],[67,0,131,3],[67,5,103,21],[68,0,138,2,"setItem"],[68,4,138,2,"setItem"],[68,11,138,9],[68,13,138,11],[68,30,139,4,"key"],[68,33,138,11],[68,35,140,4,"value"],[68,40,138,11],[68,42,141,4,"callback"],[68,50,138,11],[68,52,142,19],[69,0,143,4],[69,13,143,11],[69,17,143,15,"Promise"],[69,24,143,11],[69,25,143,23],[69,35,143,24,"resolve"],[69,42,143,23],[69,44,143,33,"reject"],[69,50,143,23],[69,52,143,44],[70,0,144,6,"checkValidInput"],[70,8,144,6,"checkValidInput"],[70,23,144,21],[70,24,144,22,"key"],[70,27,144,21],[70,29,144,27,"value"],[70,34,144,21],[70,35,144,6],[72,0,145,6,"RCTAsyncStorage"],[72,33,145,22,"multiSet"],[72,41,145,6],[72,42,145,31],[72,43,145,32],[72,44,145,33,"key"],[72,47,145,32],[72,49,145,38,"value"],[72,54,145,32],[72,55,145,31],[72,56,145,6],[72,58,145,47],[72,68,145,57,"errors"],[72,74,145,47],[72,76,145,65],[73,0,146,8],[73,14,146,14,"errs"],[73,18,146,18],[73,21,146,21,"convertErrors"],[73,34,146,34],[73,35,146,35,"errors"],[73,41,146,34],[73,42,146,8],[74,0,147,8,"callback"],[74,10,147,8,"callback"],[74,18,147,16],[74,22,147,20,"callback"],[74,30,147,28],[74,31,147,29,"errs"],[74,35,147,33],[74,39,147,37,"errs"],[74,43,147,41],[74,44,147,42],[74,45,147,41],[74,46,147,28],[74,47,147,8],[76,0,148,8],[76,14,148,12,"errs"],[76,18,148,8],[76,20,148,18],[77,0,149,10,"reject"],[77,12,149,10,"reject"],[77,18,149,16],[77,19,149,17,"errs"],[77,23,149,21],[77,24,149,22],[77,25,149,21],[77,26,149,16],[77,27,149,10],[78,0,150,9],[78,11,148,8],[78,17,150,15],[79,0,151,10,"resolve"],[79,12,151,10,"resolve"],[79,19,151,17],[79,20,151,18],[79,24,151,17],[79,25,151,10],[80,0,152,9],[81,0,153,7],[81,9,145,6],[82,0,154,5],[82,7,143,11],[82,8,143,4],[83,0,155,3],[83,5,103,21],[84,0,162,2,"removeItem"],[84,4,162,2,"removeItem"],[84,14,162,12],[84,16,162,14],[84,36,163,4,"key"],[84,39,162,14],[84,41,164,4,"callback"],[84,49,162,14],[84,51,165,19],[85,0,166,4],[85,13,166,11],[85,17,166,15,"Promise"],[85,24,166,11],[85,25,166,23],[85,35,166,24,"resolve"],[85,42,166,23],[85,44,166,33,"reject"],[85,50,166,23],[85,52,166,44],[86,0,167,6,"checkValidInput"],[86,8,167,6,"checkValidInput"],[86,23,167,21],[86,24,167,22,"key"],[86,27,167,21],[86,28,167,6],[88,0,168,6,"RCTAsyncStorage"],[88,33,168,22,"multiRemove"],[88,44,168,6],[88,45,168,34],[88,46,168,35,"key"],[88,49,168,34],[88,50,168,6],[88,52,168,41],[88,62,168,51,"errors"],[88,68,168,41],[88,70,168,59],[89,0,169,8],[89,14,169,14,"errs"],[89,18,169,18],[89,21,169,21,"convertErrors"],[89,34,169,34],[89,35,169,35,"errors"],[89,41,169,34],[89,42,169,8],[90,0,170,8,"callback"],[90,10,170,8,"callback"],[90,18,170,16],[90,22,170,20,"callback"],[90,30,170,28],[90,31,170,29,"errs"],[90,35,170,33],[90,39,170,37,"errs"],[90,43,170,41],[90,44,170,42],[90,45,170,41],[90,46,170,28],[90,47,170,8],[92,0,171,8],[92,14,171,12,"errs"],[92,18,171,8],[92,20,171,18],[93,0,172,10,"reject"],[93,12,172,10,"reject"],[93,18,172,16],[93,19,172,17,"errs"],[93,23,172,21],[93,24,172,22],[93,25,172,21],[93,26,172,16],[93,27,172,10],[94,0,173,9],[94,11,171,8],[94,17,173,15],[95,0,174,10,"resolve"],[95,12,174,10,"resolve"],[95,19,174,17],[95,20,174,18],[95,24,174,17],[95,25,174,10],[96,0,175,9],[97,0,176,7],[97,9,168,6],[98,0,177,5],[98,7,166,11],[98,8,166,4],[99,0,178,3],[99,5,103,21],[100,0,188,2,"mergeItem"],[100,4,188,2,"mergeItem"],[100,13,188,11],[100,15,188,13],[100,34,189,4,"key"],[100,37,188,13],[100,39,190,4,"value"],[100,44,188,13],[100,46,191,4,"callback"],[100,54,188,13],[100,56,192,19],[101,0,193,4],[101,13,193,11],[101,17,193,15,"Promise"],[101,24,193,11],[101,25,193,23],[101,35,193,24,"resolve"],[101,42,193,23],[101,44,193,33,"reject"],[101,50,193,23],[101,52,193,44],[102,0,194,6,"checkValidInput"],[102,8,194,6,"checkValidInput"],[102,23,194,21],[102,24,194,22,"key"],[102,27,194,21],[102,29,194,27,"value"],[102,34,194,21],[102,35,194,6],[104,0,195,6,"RCTAsyncStorage"],[104,33,195,22,"multiMerge"],[104,43,195,6],[104,44,195,33],[104,45,195,34],[104,46,195,35,"key"],[104,49,195,34],[104,51,195,40,"value"],[104,56,195,34],[104,57,195,33],[104,58,195,6],[104,60,195,49],[104,70,195,59,"errors"],[104,76,195,49],[104,78,195,67],[105,0,196,8],[105,14,196,14,"errs"],[105,18,196,18],[105,21,196,21,"convertErrors"],[105,34,196,34],[105,35,196,35,"errors"],[105,41,196,34],[105,42,196,8],[106,0,197,8,"callback"],[106,10,197,8,"callback"],[106,18,197,16],[106,22,197,20,"callback"],[106,30,197,28],[106,31,197,29,"errs"],[106,35,197,33],[106,39,197,37,"errs"],[106,43,197,41],[106,44,197,42],[106,45,197,41],[106,46,197,28],[106,47,197,8],[108,0,198,8],[108,14,198,12,"errs"],[108,18,198,8],[108,20,198,18],[109,0,199,10,"reject"],[109,12,199,10,"reject"],[109,18,199,16],[109,19,199,17,"errs"],[109,23,199,21],[109,24,199,22],[109,25,199,21],[109,26,199,16],[109,27,199,10],[110,0,200,9],[110,11,198,8],[110,17,200,15],[111,0,201,10,"resolve"],[111,12,201,10,"resolve"],[111,19,201,17],[111,20,201,18],[111,24,201,17],[111,25,201,10],[112,0,202,9],[113,0,203,7],[113,9,195,6],[114,0,204,5],[114,7,193,11],[114,8,193,4],[115,0,205,3],[115,5,103,21],[116,0,214,2,"clear"],[116,4,214,2,"clear"],[116,9,214,7],[116,11,214,9],[116,26,214,19,"callback"],[116,34,214,9],[116,36,214,71],[117,0,215,4],[117,13,215,11],[117,17,215,15,"Promise"],[117,24,215,11],[117,25,215,23],[117,35,215,24,"resolve"],[117,42,215,23],[117,44,215,33,"reject"],[117,50,215,23],[117,52,215,44],[118,0,216,6,"RCTAsyncStorage"],[118,33,216,22,"clear"],[118,38,216,6],[118,39,216,28],[118,49,216,38,"error"],[118,54,216,28],[118,56,216,45],[119,0,217,8],[119,14,217,14,"err"],[119,17,217,17],[119,20,217,20,"convertError"],[119,32,217,32],[119,33,217,33,"error"],[119,38,217,32],[119,39,217,8],[120,0,218,8,"callback"],[120,10,218,8,"callback"],[120,18,218,16],[120,22,218,20,"callback"],[120,30,218,28],[120,31,218,29,"err"],[120,34,218,28],[120,35,218,8],[122,0,219,8],[122,14,219,12,"err"],[122,17,219,8],[122,19,219,17],[123,0,220,10,"reject"],[123,12,220,10,"reject"],[123,18,220,16],[123,19,220,17,"err"],[123,22,220,16],[123,23,220,10],[124,0,221,9],[124,11,219,8],[124,17,221,15],[125,0,222,10,"resolve"],[125,12,222,10,"resolve"],[125,19,222,17],[125,20,222,18],[125,24,222,17],[125,25,222,10],[126,0,223,9],[127,0,224,7],[127,9,216,6],[128,0,225,5],[128,7,215,11],[128,8,215,4],[129,0,226,3],[129,5,103,21],[130,0,233,2,"getAllKeys"],[130,4,233,2,"getAllKeys"],[130,14,233,12],[130,16,233,14],[130,36,234,4,"callback"],[130,44,233,14],[130,46,235,34],[131,0,236,4],[131,13,236,11],[131,17,236,15,"Promise"],[131,24,236,11],[131,25,236,23],[131,35,236,24,"resolve"],[131,42,236,23],[131,44,236,33,"reject"],[131,50,236,23],[131,52,236,44],[132,0,237,6,"RCTAsyncStorage"],[132,33,237,22,"getAllKeys"],[132,43,237,6],[132,44,237,33],[132,54,237,43,"error"],[132,59,237,33],[132,61,237,50,"keys"],[132,65,237,33],[132,67,237,56],[133,0,238,8],[133,14,238,14,"err"],[133,17,238,17],[133,20,238,20,"convertError"],[133,32,238,32],[133,33,238,33,"error"],[133,38,238,32],[133,39,238,8],[134,0,239,8,"callback"],[134,10,239,8,"callback"],[134,18,239,16],[134,22,239,20,"callback"],[134,30,239,28],[134,31,239,29,"err"],[134,34,239,28],[134,36,239,34,"keys"],[134,40,239,28],[134,41,239,8],[136,0,240,8],[136,14,240,12,"err"],[136,17,240,8],[136,19,240,17],[137,0,241,10,"reject"],[137,12,241,10,"reject"],[137,18,241,16],[137,19,241,17,"err"],[137,22,241,16],[137,23,241,10],[138,0,242,9],[138,11,240,8],[138,17,242,15],[139,0,243,10,"resolve"],[139,12,243,10,"resolve"],[139,19,243,17],[139,20,243,18,"keys"],[139,24,243,17],[139,25,243,10],[140,0,244,9],[141,0,245,7],[141,9,237,6],[142,0,246,5],[142,7,236,11],[142,8,236,4],[143,0,247,3],[143,5,103,21],[144,0,264,2,"flushGetRequests"],[144,4,264,2,"flushGetRequests"],[144,20,264,18],[144,22,264,20],[144,50,264,38],[145,0,265,4],[145,10,265,10,"getRequests"],[145,21,265,21],[145,24,265,24],[145,29,265,29,"_getRequests"],[145,41,265,4],[146,0,266,4],[146,10,266,10,"getKeys"],[146,17,266,17],[146,20,266,20],[146,25,266,25,"_getKeys"],[146,33,266,4],[147,0,268,4],[147,11,268,9,"_getRequests"],[147,23,268,4],[147,26,268,24],[147,28,268,4],[148,0,269,4],[148,11,269,9,"_getKeys"],[148,19,269,4],[148,22,269,20],[148,24,269,4],[150,0,271,4,"RCTAsyncStorage"],[150,31,271,20,"multiGet"],[150,39,271,4],[150,40,271,29,"getKeys"],[150,47,271,4],[150,49,271,38],[150,59,271,48,"errors"],[150,65,271,38],[150,67,271,56,"result"],[150,73,271,38],[150,75,271,64],[151,0,278,6],[151,12,278,12,"map"],[151,15,278,15],[151,18,278,18],[151,20,278,6],[152,0,279,6,"result"],[152,8,279,6,"result"],[152,14,279,12],[152,18,280,8,"result"],[152,24,280,14],[152,25,280,15,"forEach"],[152,32,280,8],[152,33,280,23],[152,49,280,41],[153,0,280,41],[154,0,280,41],[154,14,280,25,"key"],[154,17,280,41],[155,0,280,41],[155,14,280,30,"value"],[155,19,280,41],[157,0,281,10,"map"],[157,10,281,10,"map"],[157,13,281,13],[157,14,281,14,"key"],[157,17,281,13],[157,18,281,10],[157,21,281,21,"value"],[157,26,281,10],[158,0,282,10],[158,17,282,17,"value"],[158,22,282,10],[159,0,283,9],[159,9,280,8],[159,10,279,6],[160,0,284,6],[160,12,284,12,"reqLength"],[160,21,284,21],[160,24,284,24,"getRequests"],[160,35,284,35],[160,36,284,36,"length"],[160,42,284,6],[162,0,285,6],[162,13,285,11],[162,17,285,15,"i"],[162,18,285,16],[162,21,285,19],[162,22,285,6],[162,24,285,22,"i"],[162,25,285,23],[162,28,285,26,"reqLength"],[162,37,285,6],[162,39,285,37,"i"],[162,40,285,38],[162,42,285,6],[162,44,285,42],[163,0,286,8],[163,14,286,14,"request"],[163,21,286,21],[163,24,286,24,"getRequests"],[163,35,286,35],[163,36,286,36,"i"],[163,37,286,35],[163,38,286,8],[164,0,287,8],[164,14,287,14,"requestKeys"],[164,25,287,25],[164,28,287,28,"request"],[164,35,287,35],[164,36,287,36,"keys"],[164,40,287,8],[165,0,288,8],[165,14,288,14,"requestResult"],[165,27,288,27],[165,30,288,30,"requestKeys"],[165,41,288,41],[165,42,288,42,"map"],[165,45,288,30],[165,46,288,46],[165,56,288,47,"key"],[165,59,288,46],[166,0,288,46],[166,19,288,55],[166,20,288,56,"key"],[166,23,288,55],[166,25,288,61,"map"],[166,28,288,64],[166,29,288,65,"key"],[166,32,288,64],[166,33,288,55],[166,34,288,46],[167,0,288,46],[167,11,288,30],[167,12,288,8],[168,0,289,8,"request"],[168,10,289,8,"request"],[168,17,289,15],[168,18,289,16,"callback"],[168,26,289,8],[168,30,289,28,"request"],[168,37,289,35],[168,38,289,36,"callback"],[168,46,289,28],[168,47,289,45],[168,51,289,28],[168,53,289,51,"requestResult"],[168,66,289,28],[168,67,289,8],[169,0,290,8,"request"],[169,10,290,8,"request"],[169,17,290,15],[169,18,290,16,"resolve"],[169,25,290,8],[169,29,290,27,"request"],[169,36,290,34],[169,37,290,35,"resolve"],[169,44,290,27],[169,45,290,43,"requestResult"],[169,58,290,27],[169,59,290,8],[170,0,291,7],[171,0,292,5],[171,7,271,4],[172,0,293,3],[172,5,103,21],[173,0,302,2,"multiGet"],[173,4,302,2,"multiGet"],[173,12,302,10],[173,14,302,12],[173,32,303,4,"keys"],[173,36,302,12],[173,38,304,4,"callback"],[173,46,302,12],[173,48,305,51],[174,0,305,51],[176,0,306,4],[176,10,306,8],[176,11,306,9],[176,16,306,14,"_immediate"],[176,26,306,4],[176,28,306,26],[177,0,307,6],[177,13,307,11,"_immediate"],[177,23,307,6],[177,26,307,24,"setImmediate"],[177,38,307,36],[177,39,307,37],[177,51,307,43],[178,0,308,8],[178,10,308,8],[178,15,308,12],[178,16,308,13,"_immediate"],[178,26,308,8],[178,29,308,26],[178,33,308,8],[180,0,309,8],[180,10,309,8],[180,15,309,12],[180,16,309,13,"flushGetRequests"],[180,32,309,8],[181,0,310,7],[181,9,307,36],[181,10,307,6],[182,0,311,5],[184,0,313,4],[184,10,313,10,"getRequest"],[184,20,313,34],[184,23,313,37],[185,0,314,6,"keys"],[185,8,314,6,"keys"],[185,12,314,10],[185,14,314,12,"keys"],[185,18,313,37],[186,0,315,6,"callback"],[186,8,315,6,"callback"],[186,16,315,14],[186,18,315,16,"callback"],[186,26,313,37],[187,0,317,6,"keyIndex"],[187,8,317,6,"keyIndex"],[187,16,317,14],[187,18,317,16],[187,23,317,21,"_getKeys"],[187,31,317,16],[187,32,317,30,"length"],[187,38,313,37],[188,0,318,6,"resolve"],[188,8,318,6,"resolve"],[188,15,318,13],[188,17,318,15],[188,21,313,37],[189,0,319,6,"reject"],[189,8,319,6,"reject"],[189,14,319,12],[189,16,319,14],[190,0,313,37],[190,7,313,4],[191,0,322,4],[191,10,322,10,"promiseResult"],[191,23,322,23],[191,26,322,26],[191,30,322,30,"Promise"],[191,37,322,26],[191,38,322,38],[191,48,322,39,"resolve"],[191,55,322,38],[191,57,322,48,"reject"],[191,63,322,38],[191,65,322,59],[192,0,323,6,"getRequest"],[192,8,323,6,"getRequest"],[192,18,323,16],[192,19,323,17,"resolve"],[192,26,323,6],[192,29,323,27,"resolve"],[192,36,323,6],[193,0,324,6,"getRequest"],[193,8,324,6,"getRequest"],[193,18,324,16],[193,19,324,17,"reject"],[193,25,324,6],[193,28,324,26,"reject"],[193,34,324,6],[194,0,325,5],[194,7,322,26],[194,8,322,4],[196,0,327,4],[196,11,327,9,"_getRequests"],[196,23,327,4],[196,24,327,22,"push"],[196,28,327,4],[196,29,327,27,"getRequest"],[196,39,327,4],[198,0,329,4,"keys"],[198,6,329,4,"keys"],[198,10,329,8],[198,11,329,9,"forEach"],[198,18,329,4],[198,19,329,17],[198,29,329,18,"key"],[198,32,329,17],[198,34,329,26],[199,0,330,6],[199,12,330,10],[199,17,330,14],[199,18,330,15,"_getKeys"],[199,26,330,10],[199,27,330,24,"indexOf"],[199,34,330,10],[199,35,330,32,"key"],[199,38,330,10],[199,44,330,41],[199,45,330,42],[199,46,330,6],[199,48,330,45],[200,0,331,8],[200,10,331,8],[200,15,331,12],[200,16,331,13,"_getKeys"],[200,24,331,8],[200,25,331,22,"push"],[200,29,331,8],[200,30,331,27,"key"],[200,33,331,8],[201,0,332,7],[202,0,333,5],[202,7,329,4],[203,0,335,4],[203,13,335,11,"promiseResult"],[203,26,335,4],[204,0,336,3],[204,5,103,21],[205,0,344,2,"multiSet"],[205,4,344,2,"multiSet"],[205,12,344,10],[205,14,344,12],[205,32,345,4,"keyValuePairs"],[205,45,344,12],[205,47,346,4,"callback"],[205,55,344,12],[205,57,347,19],[206,0,348,4,"checkValidArgs"],[206,6,348,4,"checkValidArgs"],[206,20,348,18],[206,21,348,19,"keyValuePairs"],[206,34,348,18],[206,36,348,34,"callback"],[206,44,348,18],[206,45,348,4],[207,0,349,4],[207,13,349,11],[207,17,349,15,"Promise"],[207,24,349,11],[207,25,349,23],[207,35,349,24,"resolve"],[207,42,349,23],[207,44,349,33,"reject"],[207,50,349,23],[207,52,349,44],[208,0,350,6,"keyValuePairs"],[208,8,350,6,"keyValuePairs"],[208,21,350,19],[208,22,350,20,"forEach"],[208,29,350,6],[208,30,350,28],[208,47,350,46],[209,0,350,46],[210,0,350,46],[210,14,350,30,"key"],[210,17,350,46],[211,0,350,46],[211,14,350,35,"value"],[211,19,350,46],[213,0,351,8,"checkValidInput"],[213,10,351,8,"checkValidInput"],[213,25,351,23],[213,26,351,24,"key"],[213,29,351,23],[213,31,351,29,"value"],[213,36,351,23],[213,37,351,8],[214,0,352,7],[214,9,350,6],[216,0,354,6,"RCTAsyncStorage"],[216,33,354,22,"multiSet"],[216,41,354,6],[216,42,354,31,"keyValuePairs"],[216,55,354,6],[216,57,354,46],[216,67,354,56,"errors"],[216,73,354,46],[216,75,354,64],[217,0,355,8],[217,14,355,14,"error"],[217,19,355,19],[217,22,355,22,"convertErrors"],[217,35,355,35],[217,36,355,36,"errors"],[217,42,355,35],[217,43,355,8],[218,0,356,8,"callback"],[218,10,356,8,"callback"],[218,18,356,16],[218,22,356,20,"callback"],[218,30,356,28],[218,31,356,29,"error"],[218,36,356,28],[218,37,356,8],[220,0,357,8],[220,14,357,12,"error"],[220,19,357,8],[220,21,357,19],[221,0,358,10,"reject"],[221,12,358,10,"reject"],[221,18,358,16],[221,19,358,17,"error"],[221,24,358,16],[221,25,358,10],[222,0,359,9],[222,11,357,8],[222,17,359,15],[223,0,360,10,"resolve"],[223,12,360,10,"resolve"],[223,19,360,17],[223,20,360,18],[223,24,360,17],[223,25,360,10],[224,0,361,9],[225,0,362,7],[225,9,354,6],[226,0,363,5],[226,7,349,11],[226,8,349,4],[227,0,364,3],[227,5,103,21],[228,0,371,2,"multiRemove"],[228,4,371,2,"multiRemove"],[228,15,371,13],[228,17,371,15],[228,38,372,4,"keys"],[228,42,371,15],[228,44,373,4,"callback"],[228,52,371,15],[228,54,374,19],[229,0,375,4],[229,13,375,11],[229,17,375,15,"Promise"],[229,24,375,11],[229,25,375,23],[229,35,375,24,"resolve"],[229,42,375,23],[229,44,375,33,"reject"],[229,50,375,23],[229,52,375,44],[230,0,376,6,"keys"],[230,8,376,6,"keys"],[230,12,376,10],[230,13,376,11,"forEach"],[230,20,376,6],[230,21,376,19],[230,31,376,20,"key"],[230,34,376,19],[231,0,376,19],[231,17,376,28,"checkValidInput"],[231,32,376,43],[231,33,376,44,"key"],[231,36,376,43],[231,37,376,19],[232,0,376,19],[232,9,376,6],[234,0,378,6,"RCTAsyncStorage"],[234,33,378,22,"multiRemove"],[234,44,378,6],[234,45,378,34,"keys"],[234,49,378,6],[234,51,378,40],[234,61,378,50,"errors"],[234,67,378,40],[234,69,378,58],[235,0,379,8],[235,14,379,14,"error"],[235,19,379,19],[235,22,379,22,"convertErrors"],[235,35,379,35],[235,36,379,36,"errors"],[235,42,379,35],[235,43,379,8],[236,0,380,8,"callback"],[236,10,380,8,"callback"],[236,18,380,16],[236,22,380,20,"callback"],[236,30,380,28],[236,31,380,29,"error"],[236,36,380,28],[236,37,380,8],[238,0,381,8],[238,14,381,12,"error"],[238,19,381,8],[238,21,381,19],[239,0,382,10,"reject"],[239,12,382,10,"reject"],[239,18,382,16],[239,19,382,17,"error"],[239,24,382,16],[239,25,382,10],[240,0,383,9],[240,11,381,8],[240,17,383,15],[241,0,384,10,"resolve"],[241,12,384,10,"resolve"],[241,19,384,17],[241,20,384,18],[241,24,384,17],[241,25,384,10],[242,0,385,9],[243,0,386,7],[243,9,378,6],[244,0,387,5],[244,7,375,11],[244,8,375,4],[245,0,388,3],[245,5,103,21],[246,0,398,2,"multiMerge"],[246,4,398,2,"multiMerge"],[246,14,398,12],[246,16,398,14],[246,36,399,4,"keyValuePairs"],[246,49,398,14],[246,51,400,4,"callback"],[246,59,398,14],[246,61,401,19],[247,0,402,4],[247,13,402,11],[247,17,402,15,"Promise"],[247,24,402,11],[247,25,402,23],[247,35,402,24,"resolve"],[247,42,402,23],[247,44,402,33,"reject"],[247,50,402,23],[247,52,402,44],[248,0,403,6,"RCTAsyncStorage"],[248,33,403,22,"multiMerge"],[248,43,403,6],[248,44,403,33,"keyValuePairs"],[248,57,403,6],[248,59,403,48],[248,69,403,58,"errors"],[248,75,403,48],[248,77,403,66],[249,0,404,8],[249,14,404,14,"error"],[249,19,404,19],[249,22,404,22,"convertErrors"],[249,35,404,35],[249,36,404,36,"errors"],[249,42,404,35],[249,43,404,8],[250,0,405,8,"callback"],[250,10,405,8,"callback"],[250,18,405,16],[250,22,405,20,"callback"],[250,30,405,28],[250,31,405,29,"error"],[250,36,405,28],[250,37,405,8],[252,0,406,8],[252,14,406,12,"error"],[252,19,406,8],[252,21,406,19],[253,0,407,10,"reject"],[253,12,407,10,"reject"],[253,18,407,16],[253,19,407,17,"error"],[253,24,407,16],[253,25,407,10],[254,0,408,9],[254,11,406,8],[254,17,408,15],[255,0,409,10,"resolve"],[255,12,409,10,"resolve"],[255,19,409,17],[255,20,409,18],[255,24,409,17],[255,25,409,10],[256,0,410,9],[257,0,411,7],[257,9,403,6],[258,0,412,5],[258,7,402,11],[258,8,402,4],[259,0,413,3],[260,0,103,21],[260,3,103,0],[262,0,417,0],[262,6,417,4],[262,7,417,5,"RCTAsyncStorage"],[262,32,417,21,"multiMerge"],[262,42,417,0],[262,44,417,33],[263,0,419,2],[263,11,419,9,"AsyncStorage"],[263,23,419,21],[263,24,419,22,"mergeItem"],[263,33,419,2],[264,0,421,2],[264,11,421,9,"AsyncStorage"],[264,23,421,21],[264,24,421,22,"multiMerge"],[264,34,421,2],[265,0,422,1],[267,0,424,0],[267,11,424,9,"convertErrors"],[267,24,424,0],[267,25,424,23,"errs"],[267,29,424,0],[267,31,424,54],[268,0,425,2],[268,8,425,6],[268,9,425,7,"errs"],[268,13,425,6],[268,17,425,16,"Array"],[268,22,425,21],[268,23,425,22,"isArray"],[268,30,425,16],[268,31,425,30,"errs"],[268,35,425,16],[268,40,425,39,"errs"],[268,44,425,43],[268,45,425,44,"length"],[268,51,425,39],[268,56,425,55],[268,57,425,2],[268,59,425,59],[269,0,426,4],[269,13,426,11],[269,17,426,4],[270,0,427,3],[272,0,428,2],[272,11,428,9],[272,12,428,10,"Array"],[272,17,428,15],[272,18,428,16,"isArray"],[272,25,428,10],[272,26,428,24,"errs"],[272,30,428,10],[272,34,428,32,"errs"],[272,38,428,10],[272,41,428,39],[272,42,428,40,"errs"],[272,46,428,39],[272,47,428,9],[272,49,428,47,"map"],[272,52,428,9],[272,53,428,51],[272,63,428,52,"e"],[272,64,428,51],[273,0,428,51],[273,13,428,58,"convertError"],[273,25,428,70],[273,26,428,71,"e"],[273,27,428,70],[273,28,428,51],[274,0,428,51],[274,5,428,9],[274,6,428,2],[275,0,429,1],[277,0,431,0],[277,11,431,9,"convertError"],[277,23,431,0],[277,24,431,22,"error"],[277,29,431,0],[277,31,431,37],[278,0,432,2],[278,8,432,6],[278,9,432,7,"error"],[278,14,432,2],[278,16,432,14],[279,0,433,4],[279,13,433,11],[279,17,433,4],[280,0,434,3],[282,0,435,2],[282,8,435,8,"out"],[282,11,435,11],[282,14,435,14],[282,18,435,18,"Error"],[282,23,435,14],[282,24,435,24,"error"],[282,29,435,29],[282,30,435,30,"message"],[282,37,435,14],[282,38,435,2],[283,0,437,2,"out"],[283,4,437,2,"out"],[283,7,437,5],[283,8,437,6,"key"],[283,11,437,2],[283,14,437,12,"error"],[283,19,437,17],[283,20,437,18,"key"],[283,23,437,2],[284,0,438,2],[284,11,438,9,"out"],[284,14,438,2],[285,0,439,1],[287,17,441,15,"AsyncStorage"],[287,29]],"functionMap":{"names":["<global>","checkValidInput","checkValidArgs","getItem","Promise$argument_0","RCTAsyncStorage.multiGet$argument_1","setItem","RCTAsyncStorage.multiSet$argument_1","removeItem","RCTAsyncStorage.multiRemove$argument_1","mergeItem","RCTAsyncStorage.multiMerge$argument_1","clear","RCTAsyncStorage.clear$argument_0","getAllKeys","RCTAsyncStorage.getAllKeys$argument_0","flushGetRequests","result.forEach$argument_0","requestKeys.map$argument_0","multiGet","setImmediate$argument_0","keys.forEach$argument_0","multiSet","keyValuePairs.forEach$argument_0","multiRemove","multiMerge","convertErrors","map$argument_0","convertError"],"mappings":"AAA;ACiD;CDoB;AEE;CFsB;WGmB;uBCI;sCCE;ODU;KDC;GHC;WMO;uBFK;+CGE;OHQ;KEC;GNC;cQO;uBJI;yCKE;OLQ;KIC;GRC;aUU;uBNK;iDOE;OPQ;KMC;GVC;SYS;uBRC;4BSC;OTQ;KQC;GZC;ccO;uBVG;iCWC;OXQ;KUC;GdC;oBgBiB;sCXO;uBYS;SZG;8CaK,wBb;KWI;GhBC;YmBS;qCCK;ODG;sCfY;KeG;iBEI;KFI;GnBG;YsBQ;uBlBK;4BmBC;OnBE;8CGE;OHQ;KkBC;GtBC;ewBO;uBpBI;mBiBC,6BjB;wCKE;OLQ;KoBC;GxBC;cyBU;uBrBI;gDOC;OPQ;KqBC;GzBC;A0BW;mDCI,sBD;C1BC;A4BE;C5BQ"}},"type":"js/module"}]}