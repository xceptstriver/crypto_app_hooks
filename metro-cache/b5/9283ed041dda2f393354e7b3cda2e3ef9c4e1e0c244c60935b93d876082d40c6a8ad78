{"dependencies":[{"name":"../parser/create","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":16},"end":{"line":16,"column":36}}]}},{"name":"../walker/create","data":{"asyncType":null,"locs":[{"start":{"line":17,"column":15},"end":{"line":17,"column":35}}]}},{"name":"../generator/create","data":{"asyncType":null,"locs":[{"start":{"line":18,"column":19},"end":{"line":18,"column":42}}]}},{"name":"../convertor/create","data":{"asyncType":null,"locs":[{"start":{"line":19,"column":18},"end":{"line":19,"column":39}}]}},{"name":"../common/List","data":{"asyncType":null,"locs":[{"start":{"line":22,"column":8},"end":{"line":22,"column":18}}]}},{"name":"../common/SyntaxError","data":{"asyncType":null,"locs":[{"start":{"line":23,"column":8},"end":{"line":23,"column":32}}]}},{"name":"../common/TokenStream","data":{"asyncType":null,"locs":[{"start":{"line":24,"column":8},"end":{"line":24,"column":32}}]}},{"name":"../lexer/Lexer","data":{"asyncType":null,"locs":[{"start":{"line":25,"column":8},"end":{"line":25,"column":20}},{"start":{"line":35,"column":19},"end":{"line":35,"column":68}},{"start":{"line":64,"column":19},"end":{"line":70,"column":14}}]}},{"name":"../utils/names","data":{"asyncType":null,"locs":[{"start":{"line":27,"column":22},"end":{"line":27,"column":40}},{"start":{"line":28,"column":17},"end":{"line":28,"column":30}},{"start":{"line":29,"column":18},"end":{"line":29,"column":32}},{"start":{"line":30,"column":26},"end":{"line":30,"column":48}}]}},{"name":"../definition-syntax","data":{"asyncType":null,"locs":[{"start":{"line":32,"column":8},"end":{"line":32,"column":42}}]}},{"name":"../tokenizer","data":{"asyncType":null,"locs":[{"start":{"line":38,"column":8},"end":{"line":38,"column":26}}]}},{"name":"../utils/clone","data":{"asyncType":null,"locs":[{"start":{"line":47,"column":8},"end":{"line":47,"column":20}}]}},{"name":"./config/mix","data":{"asyncType":null,"locs":[{"start":{"line":52,"column":32},"end":{"line":52,"column":47}},{"start":{"line":55,"column":23},"end":{"line":55,"column":38}},{"start":{"line":59,"column":22},"end":{"line":59,"column":42}},{"start":{"line":76,"column":24},"end":{"line":76,"column":39}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  function _createSyntax(config) {\n    var parse = _$$_REQUIRE(_dependencyMap[0], \"../parser/create\")(config);\n\n    var walk = _$$_REQUIRE(_dependencyMap[1], \"../walker/create\")(config);\n\n    var generate = _$$_REQUIRE(_dependencyMap[2], \"../generator/create\")(config);\n\n    var convert = _$$_REQUIRE(_dependencyMap[3], \"../convertor/create\")(walk);\n\n    var syntax = {\n      List: _$$_REQUIRE(_dependencyMap[4], \"../common/List\"),\n      SyntaxError: _$$_REQUIRE(_dependencyMap[5], \"../common/SyntaxError\"),\n      TokenStream: _$$_REQUIRE(_dependencyMap[6], \"../common/TokenStream\"),\n      Lexer: _$$_REQUIRE(_dependencyMap[7], \"../lexer/Lexer\"),\n      vendorPrefix: _$$_REQUIRE(_dependencyMap[8], \"../utils/names\").vendorPrefix,\n      keyword: _$$_REQUIRE(_dependencyMap[8], \"../utils/names\").keyword,\n      property: _$$_REQUIRE(_dependencyMap[8], \"../utils/names\").property,\n      isCustomProperty: _$$_REQUIRE(_dependencyMap[8], \"../utils/names\").isCustomProperty,\n      definitionSyntax: _$$_REQUIRE(_dependencyMap[9], \"../definition-syntax\"),\n      lexer: null,\n      createLexer: function createLexer(config) {\n        return new (_$$_REQUIRE(_dependencyMap[7], \"../lexer/Lexer\"))(config, syntax, syntax.lexer.structure);\n      },\n      tokenize: _$$_REQUIRE(_dependencyMap[10], \"../tokenizer\"),\n      parse: parse,\n      walk: walk,\n      generate: generate,\n      find: walk.find,\n      findLast: walk.findLast,\n      findAll: walk.findAll,\n      clone: _$$_REQUIRE(_dependencyMap[11], \"../utils/clone\"),\n      fromPlainObject: convert.fromPlainObject,\n      toPlainObject: convert.toPlainObject,\n      createSyntax: function createSyntax(config) {\n        return _createSyntax(_$$_REQUIRE(_dependencyMap[12], \"./config/mix\")({}, config));\n      },\n      fork: function fork(extension) {\n        var base = _$$_REQUIRE(_dependencyMap[12], \"./config/mix\")({}, config);\n\n        return _createSyntax(typeof extension === 'function' ? extension(base, Object.assign) : _$$_REQUIRE(_dependencyMap[12], \"./config/mix\")(base, extension));\n      }\n    };\n    syntax.lexer = new (_$$_REQUIRE(_dependencyMap[7], \"../lexer/Lexer\"))({\n      generic: true,\n      types: config.types,\n      atrules: config.atrules,\n      properties: config.properties,\n      node: config.node\n    }, syntax);\n    return syntax;\n  }\n\n  ;\n\n  exports.create = function (config) {\n    return _createSyntax(_$$_REQUIRE(_dependencyMap[12], \"./config/mix\")({}, config));\n  };\n});","lineCount":59,"map":[[2,0,15,0],[2,11,15,9,"createSyntax"],[2,24,15,0],[2,25,15,22,"config"],[2,31,15,0],[2,33,15,30],[3,0,16,4],[3,8,16,8,"parse"],[3,13,16,13],[3,16,16,16],[3,67,16,29,"config"],[3,73,16,16],[3,74,16,4],[5,0,17,4],[5,8,17,8,"walk"],[5,12,17,12],[5,15,17,15],[5,66,17,28,"config"],[5,72,17,15],[5,73,17,4],[7,0,18,4],[7,8,18,8,"generate"],[7,16,18,16],[7,19,18,19],[7,73,18,35,"config"],[7,79,18,19],[7,80,18,4],[9,0,19,4],[9,8,19,8,"convert"],[9,15,19,15],[9,18,19,18],[9,72,19,34,"walk"],[9,76,19,18],[9,77,19,4],[11,0,21,4],[11,8,21,8,"syntax"],[11,14,21,14],[11,17,21,17],[12,0,22,8,"List"],[12,6,22,8,"List"],[12,10,22,12],[12,60,21,17],[13,0,23,8,"SyntaxError"],[13,6,23,8,"SyntaxError"],[13,17,23,19],[13,74,21,17],[14,0,24,8,"TokenStream"],[14,6,24,8,"TokenStream"],[14,17,24,19],[14,74,21,17],[15,0,25,8,"Lexer"],[15,6,25,8,"Lexer"],[15,11,25,13],[15,61,21,17],[16,0,27,8,"vendorPrefix"],[16,6,27,8,"vendorPrefix"],[16,18,27,20],[16,20,27,22],[16,69,27,28,"vendorPrefix"],[16,81,21,17],[17,0,28,8,"keyword"],[17,6,28,8,"keyword"],[17,13,28,15],[17,15,28,17],[17,64,28,23,"keyword"],[17,71,21,17],[18,0,29,8,"property"],[18,6,29,8,"property"],[18,14,29,16],[18,16,29,18],[18,65,29,24,"property"],[18,73,21,17],[19,0,30,8,"isCustomProperty"],[19,6,30,8,"isCustomProperty"],[19,22,30,24],[19,24,30,26],[19,73,30,32,"isCustomProperty"],[19,89,21,17],[20,0,32,8,"definitionSyntax"],[20,6,32,8,"definitionSyntax"],[20,22,32,24],[20,78,21,17],[21,0,33,8,"lexer"],[21,6,33,8,"lexer"],[21,11,33,13],[21,13,33,15],[21,17,21,17],[22,0,34,8,"createLexer"],[22,6,34,8,"createLexer"],[22,17,34,19],[22,19,34,21],[22,40,34,30,"config"],[22,46,34,21],[22,48,34,38],[23,0,35,12],[23,15,35,19],[23,70,35,29,"config"],[23,76,35,19],[23,78,35,37,"syntax"],[23,84,35,19],[23,86,35,45,"syntax"],[23,92,35,51],[23,93,35,52,"lexer"],[23,98,35,45],[23,99,35,58,"structure"],[23,108,35,19],[23,109,35,12],[24,0,36,9],[24,7,21,17],[25,0,38,8,"tokenize"],[25,6,38,8,"tokenize"],[25,14,38,16],[25,63,21,17],[26,0,39,8,"parse"],[26,6,39,8,"parse"],[26,11,39,13],[26,13,39,15,"parse"],[26,18,21,17],[27,0,40,8,"walk"],[27,6,40,8,"walk"],[27,10,40,12],[27,12,40,14,"walk"],[27,16,21,17],[28,0,41,8,"generate"],[28,6,41,8,"generate"],[28,14,41,16],[28,16,41,18,"generate"],[28,24,21,17],[29,0,43,8,"find"],[29,6,43,8,"find"],[29,10,43,12],[29,12,43,14,"walk"],[29,16,43,18],[29,17,43,19,"find"],[29,21,21,17],[30,0,44,8,"findLast"],[30,6,44,8,"findLast"],[30,14,44,16],[30,16,44,18,"walk"],[30,20,44,22],[30,21,44,23,"findLast"],[30,29,21,17],[31,0,45,8,"findAll"],[31,6,45,8,"findAll"],[31,13,45,15],[31,15,45,17,"walk"],[31,19,45,21],[31,20,45,22,"findAll"],[31,27,21,17],[32,0,47,8,"clone"],[32,6,47,8,"clone"],[32,11,47,13],[32,62,21,17],[33,0,48,8,"fromPlainObject"],[33,6,48,8,"fromPlainObject"],[33,21,48,23],[33,23,48,25,"convert"],[33,30,48,32],[33,31,48,33,"fromPlainObject"],[33,46,21,17],[34,0,49,8,"toPlainObject"],[34,6,49,8,"toPlainObject"],[34,19,49,21],[34,21,49,23,"convert"],[34,28,49,30],[34,29,49,31,"toPlainObject"],[34,42,21,17],[35,0,51,8,"createSyntax"],[35,6,51,8,"createSyntax"],[35,18,51,20],[35,20,51,22],[35,42,51,31,"config"],[35,48,51,22],[35,50,51,39],[36,0,52,12],[36,15,52,19,"createSyntax"],[36,28,52,31],[36,29,52,32],[36,77,52,36],[36,79,52,32],[36,81,52,40,"config"],[36,87,52,32],[36,88,52,31],[36,89,52,12],[37,0,53,9],[37,7,21,17],[38,0,54,8,"fork"],[38,6,54,8,"fork"],[38,10,54,12],[38,12,54,14],[38,26,54,23,"extension"],[38,35,54,14],[38,37,54,34],[39,0,55,12],[39,12,55,16,"base"],[39,16,55,20],[39,19,55,23],[39,67,55,27],[39,69,55,23],[39,71,55,31,"config"],[39,77,55,23],[39,78,55,12],[41,0,56,12],[41,15,56,19,"createSyntax"],[41,28,56,31],[41,29,57,16],[41,36,57,23,"extension"],[41,45,57,16],[41,50,57,37],[41,60,57,16],[41,63,58,22,"extension"],[41,72,58,31],[41,73,58,32,"base"],[41,77,58,31],[41,79,58,38,"Object"],[41,85,58,44],[41,86,58,45,"assign"],[41,92,58,31],[41,93,57,16],[41,96,59,22],[41,144,59,26,"base"],[41,148,59,22],[41,150,59,32,"extension"],[41,159,59,22],[41,160,56,31],[41,161,56,12],[42,0,61,9],[43,0,21,17],[43,5,21,4],[44,0,64,4,"syntax"],[44,4,64,4,"syntax"],[44,10,64,10],[44,11,64,11,"lexer"],[44,16,64,4],[44,19,64,19],[44,74,64,29],[45,0,65,8,"generic"],[45,6,65,8,"generic"],[45,13,65,15],[45,15,65,17],[45,19,64,29],[46,0,66,8,"types"],[46,6,66,8,"types"],[46,11,66,13],[46,13,66,15,"config"],[46,19,66,21],[46,20,66,22,"types"],[46,25,64,29],[47,0,67,8,"atrules"],[47,6,67,8,"atrules"],[47,13,67,15],[47,15,67,17,"config"],[47,21,67,23],[47,22,67,24,"atrules"],[47,29,64,29],[48,0,68,8,"properties"],[48,6,68,8,"properties"],[48,16,68,18],[48,18,68,20,"config"],[48,24,68,26],[48,25,68,27,"properties"],[48,35,64,29],[49,0,69,8,"node"],[49,6,69,8,"node"],[49,10,69,12],[49,12,69,14,"config"],[49,18,69,20],[49,19,69,21,"node"],[50,0,64,29],[50,5,64,19],[50,7,70,7,"syntax"],[50,13,64,19],[50,14,64,4],[51,0,72,4],[51,11,72,11,"syntax"],[51,17,72,4],[52,0,73,1],[54,0,73,1],[56,0,75,0,"exports"],[56,2,75,0,"exports"],[56,9,75,7],[56,10,75,8,"create"],[56,16,75,0],[56,19,75,17],[56,29,75,26,"config"],[56,35,75,17],[56,37,75,34],[57,0,76,4],[57,11,76,11,"createSyntax"],[57,24,76,23],[57,25,76,24],[57,73,76,28],[57,75,76,24],[57,77,76,32,"config"],[57,83,76,24],[57,84,76,23],[57,85,76,4],[58,0,77,1],[58,3,75,0]],"functionMap":{"names":["<global>","createSyntax","syntax.createLexer","syntax.createSyntax","syntax.fork","exports.create"],"mappings":"AAA;ACc;qBCmB;SDE;sBEe;SFE;cGC;SHO;CDY;iBKE;CLE"}},"type":"js/module"}]}