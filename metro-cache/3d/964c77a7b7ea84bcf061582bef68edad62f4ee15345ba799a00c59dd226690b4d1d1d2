{"dependencies":[{"name":"./util","data":{"asyncType":null,"locs":[{"start":{"line":50,"column":35},"end":{"line":50,"column":51}},{"start":{"line":74,"column":15},"end":{"line":74,"column":31}},{"start":{"line":91,"column":15},"end":{"line":91,"column":31}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var has = Object.prototype.hasOwnProperty;\n  var hasNativeMap = typeof Map !== \"undefined\";\n\n  function ArraySet() {\n    this._array = [];\n    this._set = hasNativeMap ? new Map() : Object.create(null);\n  }\n\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n\n    return set;\n  };\n\n  ArraySet.prototype.size = function ArraySet_size() {\n    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n  };\n\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var sStr = hasNativeMap ? aStr : _$$_REQUIRE(_dependencyMap[0], \"./util\").toSetString(aStr);\n    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n    var idx = this._array.length;\n\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n\n    if (!isDuplicate) {\n      if (hasNativeMap) {\n        this._set.set(aStr, idx);\n      } else {\n        this._set[sStr] = idx;\n      }\n    }\n  };\n\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    if (hasNativeMap) {\n      return this._set.has(aStr);\n    } else {\n      var sStr = _$$_REQUIRE(_dependencyMap[0], \"./util\").toSetString(aStr);\n\n      return has.call(this._set, sStr);\n    }\n  };\n\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (hasNativeMap) {\n      var idx = this._set.get(aStr);\n\n      if (idx >= 0) {\n        return idx;\n      }\n    } else {\n      var sStr = _$$_REQUIRE(_dependencyMap[0], \"./util\").toSetString(aStr);\n\n      if (has.call(this._set, sStr)) {\n        return this._set[sStr];\n      }\n    }\n\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n\n  exports.ArraySet = ArraySet;\n});","lineCount":83,"map":[[2,0,9,0],[2,6,9,4,"has"],[2,9,9,7],[2,12,9,10,"Object"],[2,18,9,16],[2,19,9,17,"prototype"],[2,28,9,10],[2,29,9,27,"hasOwnProperty"],[2,43,9,0],[3,0,10,0],[3,6,10,4,"hasNativeMap"],[3,18,10,16],[3,21,10,19],[3,28,10,26,"Map"],[3,31,10,19],[3,36,10,34],[3,47,10,0],[5,0,18,0],[5,11,18,9,"ArraySet"],[5,19,18,0],[5,22,18,20],[6,0,19,2],[6,9,19,7,"_array"],[6,15,19,2],[6,18,19,16],[6,20,19,2],[7,0,20,2],[7,9,20,7,"_set"],[7,13,20,2],[7,16,20,14,"hasNativeMap"],[7,28,20,26],[7,31,20,29],[7,35,20,33,"Map"],[7,38,20,29],[7,40,20,26],[7,43,20,41,"Object"],[7,49,20,47],[7,50,20,48,"create"],[7,56,20,41],[7,57,20,55],[7,61,20,41],[7,62,20,2],[8,0,21,1],[10,0,26,0,"ArraySet"],[10,2,26,0,"ArraySet"],[10,10,26,8],[10,11,26,9,"fromArray"],[10,20,26,0],[10,23,26,21],[10,32,26,30,"ArraySet_fromArray"],[10,50,26,21],[10,51,26,49,"aArray"],[10,57,26,21],[10,59,26,57,"aAllowDuplicates"],[10,75,26,21],[10,77,26,75],[11,0,27,2],[11,8,27,6,"set"],[11,11,27,9],[11,14,27,12],[11,18,27,16,"ArraySet"],[11,26,27,12],[11,28,27,2],[13,0,28,2],[13,9,28,7],[13,13,28,11,"i"],[13,14,28,12],[13,17,28,15],[13,18,28,7],[13,20,28,18,"len"],[13,23,28,21],[13,26,28,24,"aArray"],[13,32,28,30],[13,33,28,31,"length"],[13,39,28,2],[13,41,28,39,"i"],[13,42,28,40],[13,45,28,43,"len"],[13,48,28,2],[13,50,28,48,"i"],[13,51,28,49],[13,53,28,2],[13,55,28,53],[14,0,29,4,"set"],[14,6,29,4,"set"],[14,9,29,7],[14,10,29,8,"add"],[14,13,29,4],[14,14,29,12,"aArray"],[14,20,29,18],[14,21,29,19,"i"],[14,22,29,18],[14,23,29,4],[14,25,29,23,"aAllowDuplicates"],[14,41,29,4],[15,0,30,3],[17,0,31,2],[17,11,31,9,"set"],[17,14,31,2],[18,0,32,1],[18,3,26,0],[20,0,40,0,"ArraySet"],[20,2,40,0,"ArraySet"],[20,10,40,8],[20,11,40,9,"prototype"],[20,20,40,0],[20,21,40,19,"size"],[20,25,40,0],[20,28,40,26],[20,37,40,35,"ArraySet_size"],[20,50,40,26],[20,53,40,51],[21,0,41,2],[21,11,41,9,"hasNativeMap"],[21,23,41,21],[21,26,41,24],[21,31,41,29,"_set"],[21,35,41,24],[21,36,41,34,"size"],[21,40,41,21],[21,43,41,41,"Object"],[21,49,41,47],[21,50,41,48,"getOwnPropertyNames"],[21,69,41,41],[21,70,41,68],[21,75,41,73,"_set"],[21,79,41,41],[21,81,41,79,"length"],[21,87,41,2],[22,0,42,1],[22,3,40,0],[24,0,49,0,"ArraySet"],[24,2,49,0,"ArraySet"],[24,10,49,8],[24,11,49,9,"prototype"],[24,20,49,0],[24,21,49,19,"add"],[24,24,49,0],[24,27,49,25],[24,36,49,34,"ArraySet_add"],[24,48,49,25],[24,49,49,47,"aStr"],[24,53,49,25],[24,55,49,53,"aAllowDuplicates"],[24,71,49,25],[24,73,49,71],[25,0,50,2],[25,8,50,6,"sStr"],[25,12,50,10],[25,15,50,13,"hasNativeMap"],[25,27,50,25],[25,30,50,28,"aStr"],[25,34,50,25],[25,37,50,35],[25,78,50,40,"toSetString"],[25,89,50,35],[25,90,50,52,"aStr"],[25,94,50,35],[25,95,50,2],[26,0,51,2],[26,8,51,6,"isDuplicate"],[26,19,51,17],[26,22,51,20,"hasNativeMap"],[26,34,51,32],[26,37,51,35],[26,42,51,40,"has"],[26,45,51,35],[26,46,51,44,"aStr"],[26,50,51,35],[26,51,51,32],[26,54,51,52,"has"],[26,57,51,55],[26,58,51,56,"call"],[26,62,51,52],[26,63,51,61],[26,68,51,66,"_set"],[26,72,51,52],[26,74,51,72,"sStr"],[26,78,51,52],[26,79,51,2],[27,0,52,2],[27,8,52,6,"idx"],[27,11,52,9],[27,14,52,12],[27,19,52,17,"_array"],[27,25,52,12],[27,26,52,24,"length"],[27,32,52,2],[29,0,53,2],[29,8,53,6],[29,9,53,7,"isDuplicate"],[29,20,53,6],[29,24,53,22,"aAllowDuplicates"],[29,40,53,2],[29,42,53,40],[30,0,54,4],[30,11,54,9,"_array"],[30,17,54,4],[30,18,54,16,"push"],[30,22,54,4],[30,23,54,21,"aStr"],[30,27,54,4],[31,0,55,3],[33,0,56,2],[33,8,56,6],[33,9,56,7,"isDuplicate"],[33,20,56,2],[33,22,56,20],[34,0,57,4],[34,10,57,8,"hasNativeMap"],[34,22,57,4],[34,24,57,22],[35,0,58,6],[35,13,58,11,"_set"],[35,17,58,6],[35,18,58,16,"set"],[35,21,58,6],[35,22,58,20,"aStr"],[35,26,58,6],[35,28,58,26,"idx"],[35,31,58,6],[36,0,59,5],[36,7,57,4],[36,13,59,11],[37,0,60,6],[37,13,60,11,"_set"],[37,17,60,6],[37,18,60,16,"sStr"],[37,22,60,6],[37,26,60,24,"idx"],[37,29,60,6],[38,0,61,5],[39,0,62,3],[40,0,63,1],[40,3,49,0],[42,0,70,0,"ArraySet"],[42,2,70,0,"ArraySet"],[42,10,70,8],[42,11,70,9,"prototype"],[42,20,70,0],[42,21,70,19,"has"],[42,24,70,0],[42,27,70,25],[42,36,70,34,"ArraySet_has"],[42,48,70,25],[42,49,70,47,"aStr"],[42,53,70,25],[42,55,70,53],[43,0,71,2],[43,8,71,6,"hasNativeMap"],[43,20,71,2],[43,22,71,20],[44,0,72,4],[44,13,72,11],[44,18,72,16,"_set"],[44,22,72,11],[44,23,72,21,"has"],[44,26,72,11],[44,27,72,25,"aStr"],[44,31,72,11],[44,32,72,4],[45,0,73,3],[45,5,71,2],[45,11,73,9],[46,0,74,4],[46,10,74,8,"sStr"],[46,14,74,12],[46,17,74,15],[46,58,74,20,"toSetString"],[46,69,74,15],[46,70,74,32,"aStr"],[46,74,74,15],[46,75,74,4],[48,0,75,4],[48,13,75,11,"has"],[48,16,75,14],[48,17,75,15,"call"],[48,21,75,11],[48,22,75,20],[48,27,75,25,"_set"],[48,31,75,11],[48,33,75,31,"sStr"],[48,37,75,11],[48,38,75,4],[49,0,76,3],[50,0,77,1],[50,3,70,0],[52,0,84,0,"ArraySet"],[52,2,84,0,"ArraySet"],[52,10,84,8],[52,11,84,9,"prototype"],[52,20,84,0],[52,21,84,19,"indexOf"],[52,28,84,0],[52,31,84,29],[52,40,84,38,"ArraySet_indexOf"],[52,56,84,29],[52,57,84,55,"aStr"],[52,61,84,29],[52,63,84,61],[53,0,85,2],[53,8,85,6,"hasNativeMap"],[53,20,85,2],[53,22,85,20],[54,0,86,4],[54,10,86,8,"idx"],[54,13,86,11],[54,16,86,14],[54,21,86,19,"_set"],[54,25,86,14],[54,26,86,24,"get"],[54,29,86,14],[54,30,86,28,"aStr"],[54,34,86,14],[54,35,86,4],[56,0,87,4],[56,10,87,8,"idx"],[56,13,87,11],[56,17,87,15],[56,18,87,4],[56,20,87,18],[57,0,88,8],[57,15,88,15,"idx"],[57,18,88,8],[58,0,89,5],[59,0,90,3],[59,5,85,2],[59,11,90,9],[60,0,91,4],[60,10,91,8,"sStr"],[60,14,91,12],[60,17,91,15],[60,58,91,20,"toSetString"],[60,69,91,15],[60,70,91,32,"aStr"],[60,74,91,15],[60,75,91,4],[62,0,92,4],[62,10,92,8,"has"],[62,13,92,11],[62,14,92,12,"call"],[62,18,92,8],[62,19,92,17],[62,24,92,22,"_set"],[62,28,92,8],[62,30,92,28,"sStr"],[62,34,92,8],[62,35,92,4],[62,37,92,35],[63,0,93,6],[63,15,93,13],[63,20,93,18,"_set"],[63,24,93,13],[63,25,93,23,"sStr"],[63,29,93,13],[63,30,93,6],[64,0,94,5],[65,0,95,3],[67,0,97,2],[67,10,97,8],[67,14,97,12,"Error"],[67,19,97,8],[67,20,97,18],[67,26,97,24,"aStr"],[67,30,97,18],[67,33,97,31],[67,55,97,8],[67,56,97,2],[68,0,98,1],[68,3,84,0],[70,0,105,0,"ArraySet"],[70,2,105,0,"ArraySet"],[70,10,105,8],[70,11,105,9,"prototype"],[70,20,105,0],[70,21,105,19,"at"],[70,23,105,0],[70,26,105,24],[70,35,105,33,"ArraySet_at"],[70,46,105,24],[70,47,105,45,"aIdx"],[70,51,105,24],[70,53,105,51],[71,0,106,2],[71,8,106,6,"aIdx"],[71,12,106,10],[71,16,106,14],[71,17,106,6],[71,21,106,19,"aIdx"],[71,25,106,23],[71,28,106,26],[71,33,106,31,"_array"],[71,39,106,26],[71,40,106,38,"length"],[71,46,106,2],[71,48,106,46],[72,0,107,4],[72,13,107,11],[72,18,107,16,"_array"],[72,24,107,11],[72,25,107,23,"aIdx"],[72,29,107,11],[72,30,107,4],[73,0,108,3],[75,0,109,2],[75,10,109,8],[75,14,109,12,"Error"],[75,19,109,8],[75,20,109,18],[75,47,109,45,"aIdx"],[75,51,109,8],[75,52,109,2],[76,0,110,1],[76,3,105,0],[78,0,117,0,"ArraySet"],[78,2,117,0,"ArraySet"],[78,10,117,8],[78,11,117,9,"prototype"],[78,20,117,0],[78,21,117,19,"toArray"],[78,28,117,0],[78,31,117,29],[78,40,117,38,"ArraySet_toArray"],[78,56,117,29],[78,59,117,57],[79,0,118,2],[79,11,118,9],[79,16,118,14,"_array"],[79,22,118,9],[79,23,118,21,"slice"],[79,28,118,9],[79,30,118,2],[80,0,119,1],[80,3,117,0],[82,0,121,0,"exports"],[82,2,121,0,"exports"],[82,9,121,7],[82,10,121,8,"ArraySet"],[82,18,121,0],[82,21,121,19,"ArraySet"],[82,29,121,0]],"functionMap":{"names":["<global>","ArraySet","ArraySet_fromArray","ArraySet_size","ArraySet_add","ArraySet_has","ArraySet_indexOf","ArraySet_at","ArraySet_toArray"],"mappings":"AAA;ACiB;CDG;qBEK;CFM;0BGQ;CHE;yBIO;CJc;yBKO;CLO;6BMO;CNc;wBOO;CPK;6BQO;CRE"}},"type":"js/module"}]}