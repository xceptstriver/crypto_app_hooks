{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":84,"column":0}}]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0},"end":{"line":84,"column":0}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.findYExtremes = findYExtremes;\n  exports.addExtremesIfNeeded = addExtremesIfNeeded;\n\n  var _slicedToArray2 = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\")(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function findYExtremes(data) {\n    var smallestY = null;\n    var greatestY = null;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(data), _step; !(_step = _iterator()).done;) {\n      var d = _step.value;\n\n      if (d.y !== undefined && (smallestY === null || d.y < smallestY.y)) {\n        smallestY = d;\n      }\n\n      if (d.y !== undefined && (greatestY === null || d.y > greatestY.y)) {\n        greatestY = d;\n      }\n    }\n\n    return {\n      greatestY: greatestY,\n      smallestY: smallestY\n    };\n  }\n\n  function addExtremesIfNeeded(res, data, includeExtremes, removePointsSurroundingExtremes) {\n    if (includeExtremes) {\n      var _findYExtremes = findYExtremes(data),\n          greatestY = _findYExtremes.greatestY,\n          smallestY = _findYExtremes.smallestY;\n\n      var _sort = [greatestY, smallestY].sort(function (a, b) {\n        return a.x < b.x;\n      }),\n          _sort2 = (0, _slicedToArray2.default)(_sort, 2),\n          ex1 = _sort2[0],\n          ex2 = _sort2[1];\n\n      var added1 = false;\n      var added2 = false;\n      var newRes = [];\n\n      for (var i = 0; i < res.length; i++) {\n        var d = res[i];\n        var justAdded1 = false;\n        var justAdded2 = false;\n\n        if (!added1 && (newRes.length === 0 || newRes[newRes.length - 1].x <= ex1.x) && ex1.x <= d.x) {\n          justAdded1 = true;\n          added1 = true;\n\n          if (ex1.x !== d.x) {\n            if (removePointsSurroundingExtremes) {\n              newRes.pop();\n            }\n\n            newRes.push(ex1);\n          }\n        }\n\n        if (!added2 && (newRes.length === 0 || newRes[newRes.length - 1].x <= ex2.x) && ex2.x <= d.x) {\n          justAdded2 = true;\n          added2 = true;\n\n          if (ex2.x !== d.x) {\n            if (!justAdded1 && removePointsSurroundingExtremes) {\n              newRes.pop();\n            }\n\n            newRes.push(ex2);\n          }\n        }\n\n        if (!justAdded1 && !justAdded2 || !removePointsSurroundingExtremes || i === res.length - 1) {\n          newRes.push(d);\n        }\n      }\n\n      if (!added1) {\n        newRes.push(ex1);\n      }\n\n      if (!added2) {\n        newRes.push(ex2);\n      }\n\n      return newRes;\n    }\n\n    return res;\n  }\n});","lineCount":104,"map":[[16,0,1,7],[16,11,1,16,"findYExtremes"],[16,24,1,7],[16,25,1,30,"data"],[16,29,1,7],[16,31,1,36],[17,0,2,2],[17,8,2,6,"smallestY"],[17,17,2,15],[17,20,2,18],[17,24,2,2],[18,0,3,2],[18,8,3,6,"greatestY"],[18,17,3,15],[18,20,3,18],[18,24,3,2],[20,0,4,2],[20,57,4,18,"data"],[20,61,4,2],[20,101,4,24],[21,0,4,24],[21,10,4,13,"d"],[21,11,4,24],[23,0,5,4],[23,10,5,8,"d"],[23,11,5,9],[23,12,5,10,"y"],[23,13,5,8],[23,18,5,16,"undefined"],[23,27,5,8],[23,32,5,30,"smallestY"],[23,41,5,39],[23,46,5,44],[23,50,5,30],[23,54,5,52,"d"],[23,55,5,53],[23,56,5,54,"y"],[23,57,5,52],[23,60,5,58,"smallestY"],[23,69,5,67],[23,70,5,68,"y"],[23,71,5,8],[23,72,5,4],[23,74,5,72],[24,0,6,6,"smallestY"],[24,8,6,6,"smallestY"],[24,17,6,15],[24,20,6,18,"d"],[24,21,6,6],[25,0,7,5],[27,0,9,4],[27,10,9,8,"d"],[27,11,9,9],[27,12,9,10,"y"],[27,13,9,8],[27,18,9,16,"undefined"],[27,27,9,8],[27,32,9,30,"greatestY"],[27,41,9,39],[27,46,9,44],[27,50,9,30],[27,54,9,52,"d"],[27,55,9,53],[27,56,9,54,"y"],[27,57,9,52],[27,60,9,58,"greatestY"],[27,69,9,67],[27,70,9,68,"y"],[27,71,9,8],[27,72,9,4],[27,74,9,72],[28,0,10,6,"greatestY"],[28,8,10,6,"greatestY"],[28,17,10,15],[28,20,10,18,"d"],[28,21,10,6],[29,0,11,5],[30,0,12,3],[32,0,13,2],[32,11,13,9],[33,0,14,4,"greatestY"],[33,6,14,4,"greatestY"],[33,15,14,13],[33,17,14,4,"greatestY"],[33,26,13,9],[34,0,15,4,"smallestY"],[34,6,15,4,"smallestY"],[34,15,15,13],[34,17,15,4,"smallestY"],[35,0,13,9],[35,5,13,2],[36,0,17,1],[38,0,19,7],[38,11,19,16,"addExtremesIfNeeded"],[38,30,19,7],[38,31,20,2,"res"],[38,34,19,7],[38,36,21,2,"data"],[38,40,19,7],[38,42,22,2,"includeExtremes"],[38,57,19,7],[38,59,23,2,"removePointsSurroundingExtremes"],[38,90,19,7],[38,92,24,2],[39,0,25,2],[39,8,25,6,"includeExtremes"],[39,23,25,2],[39,25,25,23],[40,0,26,4],[40,27,26,37,"findYExtremes"],[40,40,26,50],[40,41,26,51,"data"],[40,45,26,50],[40,46,26,4],[41,0,26,4],[41,10,26,12,"greatestY"],[41,19,26,4],[41,37,26,12,"greatestY"],[41,46,26,4],[42,0,26,4],[42,10,26,23,"smallestY"],[42,19,26,4],[42,37,26,23,"smallestY"],[42,46,26,4],[44,0,28,4],[44,18,28,23],[44,19,28,24,"greatestY"],[44,28,28,23],[44,30,28,35,"smallestY"],[44,39,28,23],[44,41,28,46,"sort"],[44,45,28,23],[44,46,28,51],[44,56,28,52,"a"],[44,57,28,51],[44,59,28,55,"b"],[44,60,28,51],[45,0,28,51],[45,15,28,61,"a"],[45,16,28,62],[45,17,28,63,"x"],[45,18,28,61],[45,21,28,67,"b"],[45,22,28,68],[45,23,28,69,"x"],[45,24,28,51],[46,0,28,51],[46,7,28,23],[46,8,28,4],[47,0,28,4],[48,0,28,4],[48,10,28,11,"ex1"],[48,13,28,4],[49,0,28,4],[49,10,28,16,"ex2"],[49,13,28,4],[51,0,29,4],[51,10,29,8,"added1"],[51,16,29,14],[51,19,29,17],[51,24,29,4],[52,0,30,4],[52,10,30,8,"added2"],[52,16,30,14],[52,19,30,17],[52,24,30,4],[53,0,32,4],[53,10,32,10,"newRes"],[53,16,32,16],[53,19,32,19],[53,21,32,4],[55,0,33,4],[55,11,33,9],[55,15,33,13,"i"],[55,16,33,14],[55,19,33,17],[55,20,33,4],[55,22,33,20,"i"],[55,23,33,21],[55,26,33,24,"res"],[55,29,33,27],[55,30,33,28,"length"],[55,36,33,4],[55,38,33,36,"i"],[55,39,33,37],[55,41,33,4],[55,43,33,41],[56,0,34,6],[56,12,34,12,"d"],[56,13,34,13],[56,16,34,16,"res"],[56,19,34,19],[56,20,34,20,"i"],[56,21,34,19],[56,22,34,6],[57,0,35,6],[57,12,35,10,"justAdded1"],[57,22,35,20],[57,25,35,23],[57,30,35,6],[58,0,36,6],[58,12,36,10,"justAdded2"],[58,22,36,20],[58,25,36,23],[58,30,36,6],[60,0,37,6],[60,12,38,8],[60,13,38,9,"added1"],[60,19,38,8],[60,24,39,9,"newRes"],[60,30,39,15],[60,31,39,16,"length"],[60,37,39,9],[60,42,39,27],[60,43,39,9],[60,47,39,32,"newRes"],[60,53,39,38],[60,54,39,39,"newRes"],[60,60,39,45],[60,61,39,46,"length"],[60,67,39,39],[60,70,39,55],[60,71,39,38],[60,72,39,32],[60,73,39,58,"x"],[60,74,39,32],[60,78,39,63,"ex1"],[60,81,39,66],[60,82,39,67,"x"],[60,83,38,8],[60,88,40,8,"ex1"],[60,91,40,11],[60,92,40,12,"x"],[60,93,40,8],[60,97,40,17,"d"],[60,98,40,18],[60,99,40,19,"x"],[60,100,37,6],[60,102,41,8],[61,0,42,8,"justAdded1"],[61,10,42,8,"justAdded1"],[61,20,42,18],[61,23,42,21],[61,27,42,8],[62,0,43,8,"added1"],[62,10,43,8,"added1"],[62,16,43,14],[62,19,43,17],[62,23,43,8],[64,0,44,8],[64,14,44,12,"ex1"],[64,17,44,15],[64,18,44,16,"x"],[64,19,44,12],[64,24,44,22,"d"],[64,25,44,23],[64,26,44,24,"x"],[64,27,44,8],[64,29,44,27],[65,0,45,10],[65,16,45,14,"removePointsSurroundingExtremes"],[65,47,45,10],[65,49,45,47],[66,0,46,12,"newRes"],[66,14,46,12,"newRes"],[66,20,46,18],[66,21,46,19,"pop"],[66,24,46,12],[67,0,47,11],[69,0,48,10,"newRes"],[69,12,48,10,"newRes"],[69,18,48,16],[69,19,48,17,"push"],[69,23,48,10],[69,24,48,22,"ex1"],[69,27,48,10],[70,0,49,9],[71,0,50,7],[73,0,51,6],[73,12,52,8],[73,13,52,9,"added2"],[73,19,52,8],[73,24,53,9,"newRes"],[73,30,53,15],[73,31,53,16,"length"],[73,37,53,9],[73,42,53,27],[73,43,53,9],[73,47,53,32,"newRes"],[73,53,53,38],[73,54,53,39,"newRes"],[73,60,53,45],[73,61,53,46,"length"],[73,67,53,39],[73,70,53,55],[73,71,53,38],[73,72,53,32],[73,73,53,58,"x"],[73,74,53,32],[73,78,53,63,"ex2"],[73,81,53,66],[73,82,53,67,"x"],[73,83,52,8],[73,88,54,8,"ex2"],[73,91,54,11],[73,92,54,12,"x"],[73,93,54,8],[73,97,54,17,"d"],[73,98,54,18],[73,99,54,19,"x"],[73,100,51,6],[73,102,55,8],[74,0,56,8,"justAdded2"],[74,10,56,8,"justAdded2"],[74,20,56,18],[74,23,56,21],[74,27,56,8],[75,0,57,8,"added2"],[75,10,57,8,"added2"],[75,16,57,14],[75,19,57,17],[75,23,57,8],[77,0,58,8],[77,14,58,12,"ex2"],[77,17,58,15],[77,18,58,16,"x"],[77,19,58,12],[77,24,58,22,"d"],[77,25,58,23],[77,26,58,24,"x"],[77,27,58,8],[77,29,58,27],[78,0,59,10],[78,16,59,14],[78,17,59,15,"justAdded1"],[78,27,59,14],[78,31,59,29,"removePointsSurroundingExtremes"],[78,62,59,10],[78,64,59,62],[79,0,60,12,"newRes"],[79,14,60,12,"newRes"],[79,20,60,18],[79,21,60,19,"pop"],[79,24,60,12],[80,0,61,11],[82,0,63,10,"newRes"],[82,12,63,10,"newRes"],[82,18,63,16],[82,19,63,17,"push"],[82,23,63,10],[82,24,63,22,"ex2"],[82,27,63,10],[83,0,64,9],[84,0,65,7],[86,0,66,6],[86,12,67,9],[86,13,67,10,"justAdded1"],[86,23,67,9],[86,27,67,24],[86,28,67,25,"justAdded2"],[86,38,67,8],[86,42,68,8],[86,43,68,9,"removePointsSurroundingExtremes"],[86,74,67,8],[86,78,69,8,"i"],[86,79,69,9],[86,84,69,14,"res"],[86,87,69,17],[86,88,69,18,"length"],[86,94,69,14],[86,97,69,27],[86,98,66,6],[86,100,70,8],[87,0,71,8,"newRes"],[87,10,71,8,"newRes"],[87,16,71,14],[87,17,71,15,"push"],[87,21,71,8],[87,22,71,20,"d"],[87,23,71,8],[88,0,72,7],[89,0,73,5],[91,0,74,4],[91,10,74,8],[91,11,74,9,"added1"],[91,17,74,4],[91,19,74,17],[92,0,75,6,"newRes"],[92,8,75,6,"newRes"],[92,14,75,12],[92,15,75,13,"push"],[92,19,75,6],[92,20,75,18,"ex1"],[92,23,75,6],[93,0,76,5],[95,0,77,4],[95,10,77,8],[95,11,77,9,"added2"],[95,17,77,4],[95,19,77,17],[96,0,78,6,"newRes"],[96,8,78,6,"newRes"],[96,14,78,12],[96,15,78,13,"push"],[96,19,78,6],[96,20,78,18,"ex2"],[96,23,78,6],[97,0,79,5],[99,0,80,4],[99,13,80,11,"newRes"],[99,19,80,4],[100,0,81,3],[102,0,82,2],[102,11,82,9,"res"],[102,14,82,2],[103,0,83,1]],"functionMap":{"names":["<global>","findYExtremes","addExtremesIfNeeded","sort$argument_0"],"mappings":"AAA,OC;CDgB;OEE;mDCS,mBD;CFuD"}},"type":"js/module"}]}